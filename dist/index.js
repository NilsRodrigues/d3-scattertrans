(function (global, factory) {
    typeof exports === 'object' && typeof module !== 'undefined' ? factory(exports, require('d3-ease'), require('d3-selection')) :
    typeof define === 'function' && define.amd ? define(['exports', 'd3-ease', 'd3-selection'], factory) :
    (global = typeof globalThis !== 'undefined' ? globalThis : global || self, factory(global.d3 = global.d3 || {}, global.d3, global.d3));
})(this, (function (exports, d3Ease, d3Selection) { 'use strict';

    let wasm;

    let cachedTextDecoder = new TextDecoder('utf-8', { ignoreBOM: true, fatal: true });

    cachedTextDecoder.decode();

    let cachegetUint8Memory0 = null;
    function getUint8Memory0() {
        if (cachegetUint8Memory0 === null || cachegetUint8Memory0.buffer !== wasm.memory.buffer) {
            cachegetUint8Memory0 = new Uint8Array(wasm.memory.buffer);
        }
        return cachegetUint8Memory0;
    }

    function getStringFromWasm0(ptr, len) {
        return cachedTextDecoder.decode(getUint8Memory0().subarray(ptr, ptr + len));
    }

    const heap = new Array(32).fill(undefined);

    heap.push(undefined, null, true, false);

    let heap_next = heap.length;

    function addHeapObject(obj) {
        if (heap_next === heap.length) heap.push(heap.length + 1);
        const idx = heap_next;
        heap_next = heap[idx];

        heap[idx] = obj;
        return idx;
    }

    function getObject(idx) { return heap[idx]; }

    function dropObject(idx) {
        if (idx < 36) return;
        heap[idx] = heap_next;
        heap_next = idx;
    }

    function takeObject(idx) {
        const ret = getObject(idx);
        dropObject(idx);
        return ret;
    }

    let WASM_VECTOR_LEN = 0;

    function passArray8ToWasm0(arg, malloc) {
        const ptr = malloc(arg.length * 1);
        getUint8Memory0().set(arg, ptr / 1);
        WASM_VECTOR_LEN = arg.length;
        return ptr;
    }

    let cachegetInt32Memory0 = null;
    function getInt32Memory0() {
        if (cachegetInt32Memory0 === null || cachegetInt32Memory0.buffer !== wasm.memory.buffer) {
            cachegetInt32Memory0 = new Int32Array(wasm.memory.buffer);
        }
        return cachegetInt32Memory0;
    }

    function getArrayU8FromWasm0(ptr, len) {
        return getUint8Memory0().subarray(ptr / 1, ptr / 1 + len);
    }
    /**
    */
    class FuzzyCluster {

        static __wrap(ptr) {
            const obj = Object.create(FuzzyCluster.prototype);
            obj.ptr = ptr;

            return obj;
        }

        __destroy_into_raw() {
            const ptr = this.ptr;
            this.ptr = 0;

            return ptr;
        }

        free() {
            const ptr = this.__destroy_into_raw();
            wasm.__wbg_fuzzycluster_free(ptr);
        }
        /**
        * @param {number} eps_min
        * @param {number} eps_max
        * @param {number} pts_min
        * @param {number} pts_max
        */
        constructor(eps_min, eps_max, pts_min, pts_max) {
            var ret = wasm.fuzzycluster_new(eps_min, eps_max, pts_min, pts_max);
            return FuzzyCluster.__wrap(ret);
        }
        /**
        * @param {Uint8Array} packed_data
        * @param {number} dimensions
        * @returns {Uint8Array}
        */
        cluster(packed_data, dimensions) {
            try {
                const retptr = wasm.__wbindgen_add_to_stack_pointer(-16);
                var ptr0 = passArray8ToWasm0(packed_data, wasm.__wbindgen_malloc);
                var len0 = WASM_VECTOR_LEN;
                wasm.fuzzycluster_cluster(retptr, this.ptr, ptr0, len0, dimensions);
                var r0 = getInt32Memory0()[retptr / 4 + 0];
                var r1 = getInt32Memory0()[retptr / 4 + 1];
                var v1 = getArrayU8FromWasm0(r0, r1).slice();
                wasm.__wbindgen_free(r0, r1 * 1);
                return v1;
            } finally {
                wasm.__wbindgen_add_to_stack_pointer(16);
            }
        }
    }

    async function load(module, imports) {
        if (typeof Response === 'function' && module instanceof Response) {
            if (typeof WebAssembly.instantiateStreaming === 'function') {
                try {
                    return await WebAssembly.instantiateStreaming(module, imports);

                } catch (e) {
                    if (module.headers.get('Content-Type') != 'application/wasm') {
                        console.warn("`WebAssembly.instantiateStreaming` failed because your server does not serve wasm with `application/wasm` MIME type. Falling back to `WebAssembly.instantiate` which is slower. Original error:\n", e);

                    } else {
                        throw e;
                    }
                }
            }

            const bytes = await module.arrayBuffer();
            return await WebAssembly.instantiate(bytes, imports);

        } else {
            const instance = await WebAssembly.instantiate(module, imports);

            if (instance instanceof WebAssembly.Instance) {
                return { instance, module };

            } else {
                return instance;
            }
        }
    }

    async function init$1(input) {
        if (typeof input === 'undefined') {
            input = new URL('index_bg.wasm', (typeof document === 'undefined' && typeof location === 'undefined' ? new (require('u' + 'rl').URL)('file:' + __filename).href : typeof document === 'undefined' ? location.href : (document.currentScript && document.currentScript.src || new URL('index.js', document.baseURI).href)));
        }
        const imports = {};
        imports.wbg = {};
        imports.wbg.__wbindgen_string_new = function(arg0, arg1) {
            var ret = getStringFromWasm0(arg0, arg1);
            return addHeapObject(ret);
        };
        imports.wbg.__wbindgen_throw = function(arg0, arg1) {
            throw new Error(getStringFromWasm0(arg0, arg1));
        };
        imports.wbg.__wbindgen_rethrow = function(arg0) {
            throw takeObject(arg0);
        };

        if (typeof input === 'string' || (typeof Request === 'function' && input instanceof Request) || (typeof URL === 'function' && input instanceof URL)) {
            input = fetch(input);
        }



        const { instance, module } = await load(await input, imports);

        wasm = instance.exports;
        init$1.__wbindgen_wasm_module = module;

        return wasm;
    }

    var exports$1 = /*#__PURE__*/Object.freeze({
        __proto__: null,
        FuzzyCluster: FuzzyCluster,
        'default': init$1
    });

    const base64codes = [62,0,0,0,63,52,53,54,55,56,57,58,59,60,61,0,0,0,0,0,0,0,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,0,0,0,0,0,0,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51];

                function getBase64Code(charCode) {
                    return base64codes[charCode - 43];
                }

                function base64_decode(str) {
                    let missingOctets = str.endsWith("==") ? 2 : str.endsWith("=") ? 1 : 0;
                    let n = str.length;
                    let result = new Uint8Array(3 * (n / 4));
                    let buffer;

                    for (let i = 0, j = 0; i < n; i += 4, j += 3) {
                        buffer =
                            getBase64Code(str.charCodeAt(i)) << 18 |
                            getBase64Code(str.charCodeAt(i + 1)) << 12 |
                            getBase64Code(str.charCodeAt(i + 2)) << 6 |
                            getBase64Code(str.charCodeAt(i + 3));
                        result[j] = buffer >> 16;
                        result[j + 1] = (buffer >> 8) & 0xFF;
                        result[j + 2] = buffer & 0xFF;
                    }

                    return result.subarray(0, result.length - missingOctets);
                }
            

                        const wasm_code = base64_decode("");

                        var d3stWasm = async () => {
                            await init$1(wasm_code);
                            return exports$1;
                        };

    // @ts-ignore
    function getClusterMean(data, dimKeys, cluster) {
        if (!cluster.length)
            throw new Error('empty cluster');
        const mean = {};
        for (const key of dimKeys) {
            let dimSum = 0;
            for (const i of cluster) {
                dimSum += data[i][key];
            }
            mean[key] = dimSum / cluster.length;
        }
        return mean;
    }
    function eucDistFinite(dimKeys, a, b) {
        let sqSum = 0;
        for (const key of dimKeys) {
            const dimDist = Math.abs(a[key] - b[key]);
            if (Number.isFinite(dimDist))
                sqSum += dimDist * dimDist;
        }
        return Math.sqrt(sqSum);
    }
    function hierarchicalClusterStep(data, dimKeys, clusters) {
        const clusterMeans = clusters.map(cluster => getClusterMean(data, dimKeys, cluster));
        let shortestPair = null;
        for (let i = 0; i < clusters.length; i++) {
            for (let j = 0; j < clusters.length; j++) {
                if (i === j)
                    break; // don't need to check reverse pairs (also ensures i < j)
                const distance = eucDistFinite(dimKeys, clusterMeans[i], clusterMeans[j]);
                if (!shortestPair || distance < shortestPair[0]) {
                    shortestPair = [distance, i, j];
                }
            }
        }
        if (shortestPair) {
            const [, i, j] = shortestPair;
            const newClusters = clusters.slice();
            newClusters[i] = newClusters[i].concat(newClusters.splice(j, 1)[0]);
            return newClusters;
        }
        return null;
    }
    function isClusteringDone(data, dimKeys, clusters, params) {
        if (params.targetCount && clusters.length > params.targetCount)
            return false;
        if (params.targetRadius) {
            // ensure half of all clusters fulfill the radius requirement
            let passingClusters = 0;
            for (const cluster of clusters) {
                const mean = getClusterMean(data, dimKeys, cluster);
                let distanceSum = 0;
                for (const i of cluster) {
                    distanceSum += eucDistFinite(dimKeys, mean, data[i]);
                }
                if (distanceSum / cluster.length > params.targetRadius) {
                    passingClusters++;
                }
            }
            if (passingClusters < clusters.length / 2)
                return false;
        }
        return true;
    }
    /**
     * Simple hierarchical clustering.
     */
    const hierarchicalCluster = async function hierarchicalCluster(data, dimensions, params) {
        if (!data.length)
            return [];
        const dimKeys = dimensions.map(dim => dim.name);
        let clusters = [];
        // start with every data point in its own cluster
        for (let i = 0; i < data.length; i++)
            clusters.push([i]);
        // iterate
        do {
            const newClusters = hierarchicalClusterStep(data, dimKeys, clusters);
            if (newClusters)
                clusters = newClusters;
            else
                break;
        } while (!isClusteringDone(data, dimKeys, clusters, params));
        return clusters;
    };
    const fuzzyCluster = async function fuzzyCluster(data, dimensions, params) {
        const d3st = await d3stWasm();
        const clustering = new d3st.FuzzyCluster(params.epsMin, params.epsMax, params.ptsMin, params.ptsMax);
        const dimensionCount = dimensions.length;
        const packedData = new Float32Array(data.length * dimensionCount);
        for (let i = 0; i < data.length; i++) {
            let offset = i * dimensionCount;
            for (const dim of dimensions) {
                packedData[offset] = dim.normalize(data[i][dim.name]);
                offset++;
            }
        }
        const result = clustering.cluster(new Uint8Array(packedData.buffer), dimensionCount);
        const packedClusters = new Uint16Array(result.buffer);
        const clusters = [];
        const noise = [];
        let cursor = 0;
        while (cursor < packedClusters.length) {
            const pointCount = packedClusters[cursor++];
            const cluster = [];
            for (let i = 0; i < pointCount; i++) {
                const id = packedClusters[cursor++];
                const category = id >> 14;
                const index = id & 0x3FFF;
                packedClusters[cursor++];
                if (category === 2) {
                    // noise gets to be in its own cluster
                    noise.push(index);
                }
                else {
                    cluster.push(index);
                }
            }
            if (cluster.length > 0) {
                clusters.push(cluster);
            }
        }
        if (noise.length > 0) {
            clusters.push(noise);
        }
        //const counts = clusters.map(c => c.length).join(", ");
        //console.info(`Found ${clusters.length} clusters: ${counts}`);
        //console.info(`${noise.length} points in noise cluster.`);
        return clusters;
    };

    function lerp$1(a, b, t) {
        return (b - a) * t + a;
    }
    function clamp(x, l, h) {
        return Math.max(l, Math.min(x, h));
    }

    var index = /*#__PURE__*/Object.freeze({
        __proto__: null,
        lerp: lerp$1,
        clamp: clamp,
        hierarchicalCluster: hierarchicalCluster,
        fuzzyCluster: fuzzyCluster
    });

    /**
     * Common utilities
     * @module glMatrix
     */
    // Configuration Constants
    var EPSILON = 0.000001;
    var ARRAY_TYPE = typeof Float32Array !== 'undefined' ? Float32Array : Array;
    if (!Math.hypot) Math.hypot = function () {
      var y = 0,
          i = arguments.length;

      while (i--) {
        y += arguments[i] * arguments[i];
      }

      return Math.sqrt(y);
    };

    /**
     * 4x4 Matrix<br>Format: column-major, when typed out it looks like row-major<br>The matrices are being post multiplied.
     * @module mat4
     */

    /**
     * Creates a new identity mat4
     *
     * @returns {mat4} a new 4x4 matrix
     */

    function create$2() {
      var out = new ARRAY_TYPE(16);

      if (ARRAY_TYPE != Float32Array) {
        out[1] = 0;
        out[2] = 0;
        out[3] = 0;
        out[4] = 0;
        out[6] = 0;
        out[7] = 0;
        out[8] = 0;
        out[9] = 0;
        out[11] = 0;
        out[12] = 0;
        out[13] = 0;
        out[14] = 0;
      }

      out[0] = 1;
      out[5] = 1;
      out[10] = 1;
      out[15] = 1;
      return out;
    }
    /**
     * Multiplies two mat4s
     *
     * @param {mat4} out the receiving matrix
     * @param {ReadonlyMat4} a the first operand
     * @param {ReadonlyMat4} b the second operand
     * @returns {mat4} out
     */

    function multiply(out, a, b) {
      var a00 = a[0],
          a01 = a[1],
          a02 = a[2],
          a03 = a[3];
      var a10 = a[4],
          a11 = a[5],
          a12 = a[6],
          a13 = a[7];
      var a20 = a[8],
          a21 = a[9],
          a22 = a[10],
          a23 = a[11];
      var a30 = a[12],
          a31 = a[13],
          a32 = a[14],
          a33 = a[15]; // Cache only the current line of the second matrix

      var b0 = b[0],
          b1 = b[1],
          b2 = b[2],
          b3 = b[3];
      out[0] = b0 * a00 + b1 * a10 + b2 * a20 + b3 * a30;
      out[1] = b0 * a01 + b1 * a11 + b2 * a21 + b3 * a31;
      out[2] = b0 * a02 + b1 * a12 + b2 * a22 + b3 * a32;
      out[3] = b0 * a03 + b1 * a13 + b2 * a23 + b3 * a33;
      b0 = b[4];
      b1 = b[5];
      b2 = b[6];
      b3 = b[7];
      out[4] = b0 * a00 + b1 * a10 + b2 * a20 + b3 * a30;
      out[5] = b0 * a01 + b1 * a11 + b2 * a21 + b3 * a31;
      out[6] = b0 * a02 + b1 * a12 + b2 * a22 + b3 * a32;
      out[7] = b0 * a03 + b1 * a13 + b2 * a23 + b3 * a33;
      b0 = b[8];
      b1 = b[9];
      b2 = b[10];
      b3 = b[11];
      out[8] = b0 * a00 + b1 * a10 + b2 * a20 + b3 * a30;
      out[9] = b0 * a01 + b1 * a11 + b2 * a21 + b3 * a31;
      out[10] = b0 * a02 + b1 * a12 + b2 * a22 + b3 * a32;
      out[11] = b0 * a03 + b1 * a13 + b2 * a23 + b3 * a33;
      b0 = b[12];
      b1 = b[13];
      b2 = b[14];
      b3 = b[15];
      out[12] = b0 * a00 + b1 * a10 + b2 * a20 + b3 * a30;
      out[13] = b0 * a01 + b1 * a11 + b2 * a21 + b3 * a31;
      out[14] = b0 * a02 + b1 * a12 + b2 * a22 + b3 * a32;
      out[15] = b0 * a03 + b1 * a13 + b2 * a23 + b3 * a33;
      return out;
    }
    /**
     * Translate a mat4 by the given vector
     *
     * @param {mat4} out the receiving matrix
     * @param {ReadonlyMat4} a the matrix to translate
     * @param {ReadonlyVec3} v vector to translate by
     * @returns {mat4} out
     */

    function translate(out, a, v) {
      var x = v[0],
          y = v[1],
          z = v[2];
      var a00, a01, a02, a03;
      var a10, a11, a12, a13;
      var a20, a21, a22, a23;

      if (a === out) {
        out[12] = a[0] * x + a[4] * y + a[8] * z + a[12];
        out[13] = a[1] * x + a[5] * y + a[9] * z + a[13];
        out[14] = a[2] * x + a[6] * y + a[10] * z + a[14];
        out[15] = a[3] * x + a[7] * y + a[11] * z + a[15];
      } else {
        a00 = a[0];
        a01 = a[1];
        a02 = a[2];
        a03 = a[3];
        a10 = a[4];
        a11 = a[5];
        a12 = a[6];
        a13 = a[7];
        a20 = a[8];
        a21 = a[9];
        a22 = a[10];
        a23 = a[11];
        out[0] = a00;
        out[1] = a01;
        out[2] = a02;
        out[3] = a03;
        out[4] = a10;
        out[5] = a11;
        out[6] = a12;
        out[7] = a13;
        out[8] = a20;
        out[9] = a21;
        out[10] = a22;
        out[11] = a23;
        out[12] = a00 * x + a10 * y + a20 * z + a[12];
        out[13] = a01 * x + a11 * y + a21 * z + a[13];
        out[14] = a02 * x + a12 * y + a22 * z + a[14];
        out[15] = a03 * x + a13 * y + a23 * z + a[15];
      }

      return out;
    }
    /**
     * Rotates a mat4 by the given angle around the given axis
     *
     * @param {mat4} out the receiving matrix
     * @param {ReadonlyMat4} a the matrix to rotate
     * @param {Number} rad the angle to rotate the matrix by
     * @param {ReadonlyVec3} axis the axis to rotate around
     * @returns {mat4} out
     */

    function rotate(out, a, rad, axis) {
      var x = axis[0],
          y = axis[1],
          z = axis[2];
      var len = Math.hypot(x, y, z);
      var s, c, t;
      var a00, a01, a02, a03;
      var a10, a11, a12, a13;
      var a20, a21, a22, a23;
      var b00, b01, b02;
      var b10, b11, b12;
      var b20, b21, b22;

      if (len < EPSILON) {
        return null;
      }

      len = 1 / len;
      x *= len;
      y *= len;
      z *= len;
      s = Math.sin(rad);
      c = Math.cos(rad);
      t = 1 - c;
      a00 = a[0];
      a01 = a[1];
      a02 = a[2];
      a03 = a[3];
      a10 = a[4];
      a11 = a[5];
      a12 = a[6];
      a13 = a[7];
      a20 = a[8];
      a21 = a[9];
      a22 = a[10];
      a23 = a[11]; // Construct the elements of the rotation matrix

      b00 = x * x * t + c;
      b01 = y * x * t + z * s;
      b02 = z * x * t - y * s;
      b10 = x * y * t - z * s;
      b11 = y * y * t + c;
      b12 = z * y * t + x * s;
      b20 = x * z * t + y * s;
      b21 = y * z * t - x * s;
      b22 = z * z * t + c; // Perform rotation-specific matrix multiplication

      out[0] = a00 * b00 + a10 * b01 + a20 * b02;
      out[1] = a01 * b00 + a11 * b01 + a21 * b02;
      out[2] = a02 * b00 + a12 * b01 + a22 * b02;
      out[3] = a03 * b00 + a13 * b01 + a23 * b02;
      out[4] = a00 * b10 + a10 * b11 + a20 * b12;
      out[5] = a01 * b10 + a11 * b11 + a21 * b12;
      out[6] = a02 * b10 + a12 * b11 + a22 * b12;
      out[7] = a03 * b10 + a13 * b11 + a23 * b12;
      out[8] = a00 * b20 + a10 * b21 + a20 * b22;
      out[9] = a01 * b20 + a11 * b21 + a21 * b22;
      out[10] = a02 * b20 + a12 * b21 + a22 * b22;
      out[11] = a03 * b20 + a13 * b21 + a23 * b22;

      if (a !== out) {
        // If the source and destination differ, copy the unchanged last row
        out[12] = a[12];
        out[13] = a[13];
        out[14] = a[14];
        out[15] = a[15];
      }

      return out;
    }
    /**
     * Creates a matrix from a vector translation
     * This is equivalent to (but much faster than):
     *
     *     mat4.identity(dest);
     *     mat4.translate(dest, dest, vec);
     *
     * @param {mat4} out mat4 receiving operation result
     * @param {ReadonlyVec3} v Translation vector
     * @returns {mat4} out
     */

    function fromTranslation(out, v) {
      out[0] = 1;
      out[1] = 0;
      out[2] = 0;
      out[3] = 0;
      out[4] = 0;
      out[5] = 1;
      out[6] = 0;
      out[7] = 0;
      out[8] = 0;
      out[9] = 0;
      out[10] = 1;
      out[11] = 0;
      out[12] = v[0];
      out[13] = v[1];
      out[14] = v[2];
      out[15] = 1;
      return out;
    }
    /**
     * Generates a perspective projection matrix with the given bounds.
     * The near/far clip planes correspond to a normalized device coordinate Z range of [-1, 1],
     * which matches WebGL/OpenGL's clip volume.
     * Passing null/undefined/no value for far will generate infinite projection matrix.
     *
     * @param {mat4} out mat4 frustum matrix will be written into
     * @param {number} fovy Vertical field of view in radians
     * @param {number} aspect Aspect ratio. typically viewport width/height
     * @param {number} near Near bound of the frustum
     * @param {number} far Far bound of the frustum, can be null or Infinity
     * @returns {mat4} out
     */

    function perspectiveNO(out, fovy, aspect, near, far) {
      var f = 1.0 / Math.tan(fovy / 2),
          nf;
      out[0] = f / aspect;
      out[1] = 0;
      out[2] = 0;
      out[3] = 0;
      out[4] = 0;
      out[5] = f;
      out[6] = 0;
      out[7] = 0;
      out[8] = 0;
      out[9] = 0;
      out[11] = -1;
      out[12] = 0;
      out[13] = 0;
      out[15] = 0;

      if (far != null && far !== Infinity) {
        nf = 1 / (near - far);
        out[10] = (far + near) * nf;
        out[14] = 2 * far * near * nf;
      } else {
        out[10] = -1;
        out[14] = -2 * near;
      }

      return out;
    }
    /**
     * Alias for {@link mat4.perspectiveNO}
     * @function
     */

    var perspective = perspectiveNO;
    /**
     * Generates a orthogonal projection matrix with the given bounds.
     * The near/far clip planes correspond to a normalized device coordinate Z range of [-1, 1],
     * which matches WebGL/OpenGL's clip volume.
     *
     * @param {mat4} out mat4 frustum matrix will be written into
     * @param {number} left Left bound of the frustum
     * @param {number} right Right bound of the frustum
     * @param {number} bottom Bottom bound of the frustum
     * @param {number} top Top bound of the frustum
     * @param {number} near Near bound of the frustum
     * @param {number} far Far bound of the frustum
     * @returns {mat4} out
     */

    function orthoNO(out, left, right, bottom, top, near, far) {
      var lr = 1 / (left - right);
      var bt = 1 / (bottom - top);
      var nf = 1 / (near - far);
      out[0] = -2 * lr;
      out[1] = 0;
      out[2] = 0;
      out[3] = 0;
      out[4] = 0;
      out[5] = -2 * bt;
      out[6] = 0;
      out[7] = 0;
      out[8] = 0;
      out[9] = 0;
      out[10] = 2 * nf;
      out[11] = 0;
      out[12] = (left + right) * lr;
      out[13] = (top + bottom) * bt;
      out[14] = (far + near) * nf;
      out[15] = 1;
      return out;
    }
    /**
     * Alias for {@link mat4.orthoNO}
     * @function
     */

    var ortho = orthoNO;
    /**
     * Multiply each element of the matrix by a scalar.
     *
     * @param {mat4} out the receiving matrix
     * @param {ReadonlyMat4} a the matrix to scale
     * @param {Number} b amount to scale the matrix's elements by
     * @returns {mat4} out
     */

    function multiplyScalar(out, a, b) {
      out[0] = a[0] * b;
      out[1] = a[1] * b;
      out[2] = a[2] * b;
      out[3] = a[3] * b;
      out[4] = a[4] * b;
      out[5] = a[5] * b;
      out[6] = a[6] * b;
      out[7] = a[7] * b;
      out[8] = a[8] * b;
      out[9] = a[9] * b;
      out[10] = a[10] * b;
      out[11] = a[11] * b;
      out[12] = a[12] * b;
      out[13] = a[13] * b;
      out[14] = a[14] * b;
      out[15] = a[15] * b;
      return out;
    }
    /**
     * Adds two mat4's after multiplying each element of the second operand by a scalar value.
     *
     * @param {mat4} out the receiving vector
     * @param {ReadonlyMat4} a the first operand
     * @param {ReadonlyMat4} b the second operand
     * @param {Number} scale the amount to scale b's elements by before adding
     * @returns {mat4} out
     */

    function multiplyScalarAndAdd(out, a, b, scale) {
      out[0] = a[0] + b[0] * scale;
      out[1] = a[1] + b[1] * scale;
      out[2] = a[2] + b[2] * scale;
      out[3] = a[3] + b[3] * scale;
      out[4] = a[4] + b[4] * scale;
      out[5] = a[5] + b[5] * scale;
      out[6] = a[6] + b[6] * scale;
      out[7] = a[7] + b[7] * scale;
      out[8] = a[8] + b[8] * scale;
      out[9] = a[9] + b[9] * scale;
      out[10] = a[10] + b[10] * scale;
      out[11] = a[11] + b[11] * scale;
      out[12] = a[12] + b[12] * scale;
      out[13] = a[13] + b[13] * scale;
      out[14] = a[14] + b[14] * scale;
      out[15] = a[15] + b[15] * scale;
      return out;
    }
    /**
     * Alias for {@link mat4.multiply}
     * @function
     */

    var mul = multiply;

    /**
     * 4 Dimensional Vector
     * @module vec4
     */

    /**
     * Creates a new, empty vec4
     *
     * @returns {vec4} a new 4D vector
     */

    function create$1() {
      var out = new ARRAY_TYPE(4);

      if (ARRAY_TYPE != Float32Array) {
        out[0] = 0;
        out[1] = 0;
        out[2] = 0;
        out[3] = 0;
      }

      return out;
    }
    /**
     * Transforms the vec4 with a mat4.
     *
     * @param {vec4} out the receiving vector
     * @param {ReadonlyVec4} a the vector to transform
     * @param {ReadonlyMat4} m matrix to transform with
     * @returns {vec4} out
     */

    function transformMat4(out, a, m) {
      var x = a[0],
          y = a[1],
          z = a[2],
          w = a[3];
      out[0] = m[0] * x + m[4] * y + m[8] * z + m[12] * w;
      out[1] = m[1] * x + m[5] * y + m[9] * z + m[13] * w;
      out[2] = m[2] * x + m[6] * y + m[10] * z + m[14] * w;
      out[3] = m[3] * x + m[7] * y + m[11] * z + m[15] * w;
      return out;
    }
    /**
     * Perform some operation over an array of vec4s.
     *
     * @param {Array} a the array of vectors to iterate over
     * @param {Number} stride Number of elements between the start of each vec4. If 0 assumes tightly packed
     * @param {Number} offset Number of elements to skip at the beginning of the array
     * @param {Number} count Number of vec4s to iterate over. If 0 iterates over entire array
     * @param {Function} fn Function to call for each vector in the array
     * @param {Object} [arg] additional argument to pass to fn
     * @returns {Array} a
     * @function
     */

    (function () {
      var vec = create$1();
      return function (a, stride, offset, count, fn, arg) {
        var i, l;

        if (!stride) {
          stride = 4;
        }

        if (!offset) {
          offset = 0;
        }

        if (count) {
          l = Math.min(count * stride + offset, a.length);
        } else {
          l = a.length;
        }

        for (i = offset; i < l; i += stride) {
          vec[0] = a[i];
          vec[1] = a[i + 1];
          vec[2] = a[i + 2];
          vec[3] = a[i + 3];
          fn(vec, vec, arg);
          a[i] = vec[0];
          a[i + 1] = vec[1];
          a[i + 2] = vec[2];
          a[i + 3] = vec[3];
        }

        return a;
      };
    })();

    /**
     * 2 Dimensional Vector
     * @module vec2
     */

    /**
     * Creates a new, empty vec2
     *
     * @returns {vec2} a new 2D vector
     */

    function create() {
      var out = new ARRAY_TYPE(2);

      if (ARRAY_TYPE != Float32Array) {
        out[0] = 0;
        out[1] = 0;
      }

      return out;
    }
    /**
     * Performs a linear interpolation between two vec2's
     *
     * @param {vec2} out the receiving vector
     * @param {ReadonlyVec2} a the first operand
     * @param {ReadonlyVec2} b the second operand
     * @param {Number} t interpolation amount, in the range [0-1], between the two inputs
     * @returns {vec2} out
     */

    function lerp(out, a, b, t) {
      var ax = a[0],
          ay = a[1];
      out[0] = ax + t * (b[0] - ax);
      out[1] = ay + t * (b[1] - ay);
      return out;
    }
    /**
     * Perform some operation over an array of vec2s.
     *
     * @param {Array} a the array of vectors to iterate over
     * @param {Number} stride Number of elements between the start of each vec2. If 0 assumes tightly packed
     * @param {Number} offset Number of elements to skip at the beginning of the array
     * @param {Number} count Number of vec2s to iterate over. If 0 iterates over entire array
     * @param {Function} fn Function to call for each vector in the array
     * @param {Object} [arg] additional argument to pass to fn
     * @returns {Array} a
     * @function
     */

    (function () {
      var vec = create();
      return function (a, stride, offset, count, fn, arg) {
        var i, l;

        if (!stride) {
          stride = 2;
        }

        if (!offset) {
          offset = 0;
        }

        if (count) {
          l = Math.min(count * stride + offset, a.length);
        } else {
          l = a.length;
        }

        for (i = offset; i < l; i += stride) {
          vec[0] = a[i];
          vec[1] = a[i + 1];
          fn(vec, vec, arg);
          a[i] = vec[0];
          a[i + 1] = vec[1];
        }

        return a;
      };
    })();

    // Perspective or orthographic rotation
    /**
     * A rotation transition can swap out a single dimension.
     * It uses depth to add the new dimension and rotates the entire view to the new dimension pair.
     * If perspective is used, it will first "zoom out" from orthographic to perspective projection.
     */
    class RotationTransition {
        constructor(views, params) {
            this.views = views;
            this.params = params;
            this.hasMeaningfulIntermediates = true;
            this.isReady = true;
            this.transitions = [];
            for (let i = 0; i < views.length - 1; i++) {
                this.transitions.push(new SingleRotationTransition(views[i], views[i + 1], params));
            }
        }
        async prepare() { }
        getX(t, point) {
            t *= this.views.length - 1;
            const transIndex = Math.min(Math.floor(t), this.transitions.length - 1);
            return this.transitions[transIndex].getX(t - transIndex, point);
        }
        getY(t, point) {
            t *= this.views.length - 1;
            const transIndex = Math.min(Math.floor(t), this.transitions.length - 1);
            return this.transitions[transIndex].getY(t - transIndex, point);
        }
    }
    RotationTransition.requiresCommonDimensions = true;
    RotationTransition.canSwapDimensions = false;
    RotationTransition.params = {
        perspective: {
            type: 'number',
            domain: [0, 1],
            default: 0,
            round: false
        },
        perspFov: {
            shouldShow: (params) => (params.perspective || 0) > 0,
            type: 'number',
            domain: [0, 90],
            default: 60,
            round: true
        },
        cameraDistance: {
            shouldShow: (params) => (params.perspective || 0) > 0,
            type: 'number',
            domain: [0, 5],
            default: 1.5,
            round: false
        },
        staged: {
            shouldShow: (params) => (params.perspective || 0) > 0,
            type: 'bool',
            default: false
        },
        ease: {
            shouldShow: (params) => params.staged || false,
            type: 'enum',
            variants: [
                { label: 'linear', value: (t) => t },
                { label: 'quad', value: d3Ease.easeQuad },
                { label: 'cubic', value: d3Ease.easeCubic },
                { label: 'exp', value: d3Ease.easeExp }
            ],
            default: 1
        },
        zoomTime: {
            shouldShow: (params) => params.staged || false,
            type: 'number',
            domain: [0, 0.5],
            default: 0.2,
            round: false
        }
    };
    class SingleRotationTransition {
        constructor(startView, endView, params) {
            this.startView = startView;
            this.endView = endView;
            this.params = params;
            this.params.perspective = this.params.perspective || 0;
            this.params.perspFov = this.params.perspFov || 60;
            this.params.cameraDistance = this.params.cameraDistance || 1.5;
            this.rotAxis = startView.x === endView.x ? 'x' : 'y';
        }
        getRotAxisAsVector() {
            if (this.rotAxis === 'x')
                return [1, 0, 0];
            if (this.rotAxis === 'y')
                return [0, 1, 0];
            if (this.rotAxis === 'z')
                return [0, 0, 1];
            throw new Error('invalid axis');
        }
        ease(t) {
            if (this.params.ease) {
                return this.params.ease(t);
            }
            return d3Ease.easeQuad(t);
        }
        cacheData(t) {
            this.cachedT = t;
            let rotation = 0;
            let perspFactor = 0;
            const perspTransTime = (this.params.zoomTime || 0.2) * this.params.perspective * (this.params.staged ? 1 : 0);
            if (t < perspTransTime) {
                perspFactor = this.ease(t / perspTransTime);
            }
            else if (t < 1 - perspTransTime) {
                const uneased = (t - perspTransTime) / (1 - 2 * perspTransTime);
                const eased = this.params.staged ? this.ease(uneased) : uneased; // don't need to ease if there's no staging
                rotation = lerp$1(uneased, eased, this.params.perspective);
                perspFactor = 1;
            }
            else {
                rotation = 1;
                perspFactor = perspTransTime ? 1 - this.ease((t - 1 + perspTransTime) / perspTransTime) : 0;
            }
            if (!this.params.staged) {
                // ease in sync with rotation (sort of)
                // perspFactor = Math.sin(Math.acos(2 * t - 1));
                // scaled solution to (x)^2 + (y+1)^2 = 2; a small circle segment
                perspFactor = 2.41 * (Math.sqrt(2 - (2 * t - 1) ** 2) - 1);
            }
            // TODO: allow user to specify direction
            if (this.rotAxis === 'x')
                rotation *= -1; // FIXME: why
            this.cachedRotation = create$2();
            // rotate around center
            translate(this.cachedRotation, this.cachedRotation, [0.5, 0.5, 0.5]);
            rotate(this.cachedRotation, this.cachedRotation, rotation * Math.PI / 2, this.getRotAxisAsVector());
            translate(this.cachedRotation, this.cachedRotation, [-0.5, -0.5, -0.5]);
            const ortho$1 = ortho(create$2(), -0.5, 0.5, -0.5, 0.5, 0.1, 1.5);
            const persp = perspective(create$2(), this.params.perspFov / 180 * Math.PI, 1, 0.1, 1.5);
            const viewOffset = fromTranslation(create$2(), [-0.5, -0.5, -this.params.cameraDistance]);
            this.cachedProjection = multiplyScalar(create$2(), ortho$1, 1 - perspFactor * this.params.perspective);
            this.cachedProjection = multiplyScalarAndAdd(this.cachedProjection, this.cachedProjection, persp, perspFactor * this.params.perspective);
            mul(this.cachedProjection, this.cachedProjection, viewOffset);
        }
        getProjection(t) {
            if (t !== this.cachedT)
                this.cacheData(t);
            return this.cachedProjection;
        }
        getRotation(t) {
            if (t !== this.cachedT)
                this.cacheData(t);
            return this.cachedRotation;
        }
        projectPoint(t, point) {
            const proj = this.getProjection(t);
            const rot = this.getRotation(t);
            const p = create$1();
            p[3] = 1;
            if (this.rotAxis === 'x') {
                p[0] = this.startView.getX(point);
                p[1] = this.startView.getY(point);
                p[2] = this.endView.getY(point);
            }
            else if (this.rotAxis === 'y') {
                p[0] = this.startView.getX(point);
                p[1] = this.startView.getY(point);
                p[2] = this.endView.getX(point);
            }
            transformMat4(p, p, rot);
            transformMat4(p, p, proj);
            p[0] /= p[3];
            p[1] /= p[3];
            p[2] /= p[3];
            p[3] = 1;
            return p;
        }
        getX(t, point) {
            return this.projectPoint(t, point)[0] / 2 + 0.5;
        }
        getY(t, point) {
            return this.projectPoint(t, point)[1] / 2 + 0.5;
        }
    }

    class StraightTransition {
        constructor(views) {
            this.views = views;
            this.hasMeaningfulIntermediates = true;
            this.isReady = true;
        }
        async prepare() { }
        getX(t, point) {
            t *= this.views.length - 1;
            const startView = this.views[Math.floor(t)];
            const endView = this.views[Math.floor(t + 1)] || startView;
            return lerp$1(startView.getX(point), endView.getX(point), t - Math.floor(t));
        }
        getY(t, point) {
            t *= this.views.length - 1;
            const startView = this.views[Math.floor(t)];
            const endView = this.views[Math.floor(t + 1)] || startView;
            return lerp$1(startView.getY(point), endView.getY(point), t - Math.floor(t));
        }
    }
    StraightTransition.requiresCommonDimensions = false;
    StraightTransition.canSwapDimensions = true;
    StraightTransition.params = {};

    // Common data types for spline and spline-worker
    /** Evaluates a bézier curve. */
    function bezierEval(bezier, t) {
        if (bezier.length <= 1) {
            return bezier[0];
        }
        else {
            const newBezier = [];
            for (let i = 0; i < bezier.length - 1; i++) {
                newBezier.push(lerp(create(), bezier[i], bezier[i + 1], t));
            }
            return bezierEval(newBezier, t);
        }
    }

    var WorkerClass = null;

    try {
        var WorkerThreads =
            typeof module !== 'undefined' && typeof module.require === 'function' && module.require('worker_threads') ||
            typeof __non_webpack_require__ === 'function' && __non_webpack_require__('worker_threads') ||
            typeof require === 'function' && require('worker_threads');
        WorkerClass = WorkerThreads.Worker;
    } catch(e) {} // eslint-disable-line

    function decodeBase64$1(base64, enableUnicode) {
        return Buffer.from(base64, 'base64').toString(enableUnicode ? 'utf16' : 'utf8');
    }

    function createBase64WorkerFactory$2(base64, sourcemapArg, enableUnicodeArg) {
        var sourcemap = sourcemapArg === undefined ? null : sourcemapArg;
        var enableUnicode = enableUnicodeArg === undefined ? false : enableUnicodeArg;
        var source = decodeBase64$1(base64, enableUnicode);
        var start = source.indexOf('\n', 10) + 1;
        var body = source.substring(start) + (sourcemap ? '\/\/# sourceMappingURL=' + sourcemap : '');
        return function WorkerFactory(options) {
            return new WorkerClass(body, Object.assign({}, options, { eval: true }));
        };
    }

    function decodeBase64(base64, enableUnicode) {
        var binaryString = atob(base64);
        if (enableUnicode) {
            var binaryView = new Uint8Array(binaryString.length);
            for (var i = 0, n = binaryString.length; i < n; ++i) {
                binaryView[i] = binaryString.charCodeAt(i);
            }
            return String.fromCharCode.apply(null, new Uint16Array(binaryView.buffer));
        }
        return binaryString;
    }

    function createURL(base64, sourcemapArg, enableUnicodeArg) {
        var sourcemap = sourcemapArg === undefined ? null : sourcemapArg;
        var enableUnicode = enableUnicodeArg === undefined ? false : enableUnicodeArg;
        var source = decodeBase64(base64, enableUnicode);
        var start = source.indexOf('\n', 10) + 1;
        var body = source.substring(start) + (sourcemap ? '\/\/# sourceMappingURL=' + sourcemap : '');
        var blob = new Blob([body], { type: 'application/javascript' });
        return URL.createObjectURL(blob);
    }

    function createBase64WorkerFactory$1(base64, sourcemapArg, enableUnicodeArg) {
        var url;
        return function WorkerFactory(options) {
            url = url || createURL(base64, sourcemapArg, enableUnicodeArg);
            return new Worker(url, options);
        };
    }

    var kIsNodeJS = Object.prototype.toString.call(typeof process !== 'undefined' ? process : 0) === '[object process]';

    function isNodeJS() {
        return kIsNodeJS;
    }

    function createBase64WorkerFactory(base64, sourcemapArg, enableUnicodeArg) {
        if (isNodeJS()) {
            return createBase64WorkerFactory$2(base64, sourcemapArg, enableUnicodeArg);
        }
        return createBase64WorkerFactory$1(base64, sourcemapArg, enableUnicodeArg);
    }

    var WorkerFactory = createBase64WorkerFactory('', null, false);
    /* eslint-enable */

    const retimeIdentity = (t) => t;
    /** Legacy retime function used when timeOffset is true */
    const retimeLegacyTimeOffset = (t, data) => {
        const timeOffset = data.index / data.total - 0.5;
        if (timeOffset > 0) {
            t = Math.min(1, Math.max(0, (t - timeOffset) / (1 - timeOffset)));
        }
        else if (timeOffset < 0) {
            t = Math.min(1, Math.max(0, t / (1 + timeOffset)));
        }
        return t;
    };
    /** Retime function that animates every cluster in sequence with no overlapping animation. */
    const retimeEqualNonOverlappingCascade = (t, data) => {
        t = t * data.total - data.index;
        return Math.min(1, Math.max(0, t));
    };
    /**
     * Retime function that animates every cluster in sequence with no overlapping animation.
     * The duration of the animation is proportional to the cluster size.
     */
    const retimeProportionalNonOverlappingCascade = (t, data) => {
        const clusterPoints = data.clusters.map(c => c.points);
        const totalPoints = clusterPoints.reduce((a, b) => a + b, 0);
        const pointsIndexMin = clusterPoints.slice(0, data.index).reduce((a, b) => a + b, 0);
        t = ((t * totalPoints) - pointsIndexMin) / clusterPoints[data.index];
        return Math.min(1, Math.max(0, t));
    };

    // Spline transition
    /**
     * A spline transition animates points on splines.
     * Points are clustered in an attempt to minimize confusing paths by having points that are adjacent
     * move similarly.
     */
    class SplineTransition {
        constructor(views, params) {
            this.views = views;
            this.params = params;
            this.clusterGuides = [];
            this.pointPaths = new Map();
            this.hasMeaningfulIntermediates = !this.params.looseIntermediates;
            this.isReady = false;
        }
        async prepare() {
            var _a, _b, _c;
            const worker = new WorkerFactory();
            worker.postMessage({
                data: this.params.data,
                views: this.views,
                params: {
                    clustering: (_a = this.params) === null || _a === void 0 ? void 0 : _a.clustering,
                    looseIntermediates: (_b = this.params) === null || _b === void 0 ? void 0 : _b.looseIntermediates,
                    bundlingStrength: (_c = this.params) === null || _c === void 0 ? void 0 : _c.bundlingStrength,
                }
            });
            const [ok, result] = await new Promise(resolve => {
                const callback = (e) => {
                    resolve(e.data);
                    worker.removeEventListener('message', callback);
                };
                worker.addEventListener('message', callback);
            });
            if (!ok)
                throw result;
            this.clusterGuides = result.clusterGuides;
            this.pointPaths = result.pointPaths;
            this.isReady = true;
        }
        ease(t) {
            if (this.params.ease) {
                return this.params.ease(t);
            }
            return d3Ease.easeQuad(t);
        }
        getPointPos(t, point) {
            // looseIntermediates creates a single curve
            if (!this.params.looseIntermediates)
                t *= this.views.length - 1;
            const pathSegments = this.pointPaths.get(this.params.data.indexOf(point));
            if (pathSegments === undefined)
                throw new Error('unknown point passed to spline transition');
            const segmentIndex = Math.min(Math.floor(t), pathSegments.length - 1);
            const currentPath = pathSegments[segmentIndex];
            let easing = (t) => t;
            // if we're animating over multiple views, we'll need easing because the path segments
            // are different lengths and thus different speeds
            if (!this.params.looseIntermediates && this.views.length > 2) {
                easing = (t) => this.ease(t);
            }
            let retimeFn = retimeIdentity;
            if (this.params.retime)
                retimeFn = this.params.retime;
            else if (this.params.timeOffset)
                retimeFn = retimeLegacyTimeOffset;
            return pathEval(currentPath, t - segmentIndex, easing, retimeFn);
        }
        getX(t, point) {
            return this.getPointPos(t, point)[0];
        }
        getY(t, point) {
            return this.getPointPos(t, point)[1];
        }
        drawDebug(node, mapPos) {
            for (const path of this.pointPaths.values()) {
                let d = [];
                for (const segment of path) {
                    for (const curve of segment) {
                        d.push(`M ${mapPos(curve.curve[0]).join(',')}`);
                        // svg doesn't support higher order curves
                        for (let i = 1; i <= 50; i++) {
                            const pos = bezierEval(curve.curve, i / 50);
                            d.push(`L ${mapPos(pos).join(',')}`);
                        }
                    }
                }
                const pathNode = document.createElementNS('http://www.w3.org/2000/svg', 'path');
                pathNode.setAttribute('d', d.join(' '));
                pathNode.setAttribute('fill', 'none');
                pathNode.setAttribute('stroke', '#' + ('000000' + (Math.random() * 0xFFFFFF).toString(16)).substr(-6));
                node.appendChild(pathNode);
            }
        }
    }
    SplineTransition.requiresCommonDimensions = false;
    SplineTransition.canSwapDimensions = true;
    SplineTransition.params = {
        clustering: {
            type: 'group',
            nullable: true,
            contents: {
                epsMin: {
                    type: 'number',
                    domain: [0, 1],
                    default: 0.1,
                    round: false
                },
                ptsMin: {
                    type: 'number',
                    domain: [0, 100],
                    default: 1,
                    round: false
                },
                epsMax: {
                    type: 'derived',
                    derive: (params) => params.clustering.epsMin
                },
                ptsMax: {
                    type: 'derived',
                    derive: (params) => params.clustering.ptsMin
                }
            }
        },
        looseIntermediates: {
            type: 'bool',
            default: false
        },
        bundlingStrength: {
            shouldShow: (params) => !!params.clustering,
            type: 'number',
            domain: [0, 10],
            default: 0,
            round: true
        },
        ease: {
            type: 'enum',
            variants: [
                { label: 'linear', value: (t) => t },
                { label: 'quad', value: d3Ease.easeQuad },
                { label: 'cubic', value: d3Ease.easeCubic },
                { label: 'exp', value: d3Ease.easeExp }
            ],
            default: 1
        },
        timeOffset: {
            shouldShow: (params) => !!params.clustering && !params.retime,
            type: 'bool',
            default: false
        },
        retime: {
            shouldShow: (params) => !!params.clustering && !params.timeOffset,
            type: 'enum',
            variants: [
                { label: 'identity', value: null },
                { label: 'cascade', value: retimeEqualNonOverlappingCascade },
                { label: 'proportional cascade', value: retimeProportionalNonOverlappingCascade }
            ],
            default: 0,
        },
    };
    /** Finds the index where the given element would be sorted into the array. */
    function binarySearch(arr, toFind) {
        let low = 0;
        let high = arr.length - 1;
        while (high - low > 1) {
            const avg = Math.floor((high + low) / 2);
            const sample = arr[avg];
            if (sample > toFind) {
                high = avg;
            }
            else {
                low = avg;
            }
        }
        return [low, high];
    }
    /** Evaluates a point path (polybézier) for the given time t. */
    function pathEval(path, t, easing, retime) {
        t *= path.length;
        const curveIndex = Math.min(Math.floor(t), path.length - 1);
        const curve = path[curveIndex];
        let offsetTime = t - curveIndex;
        offsetTime = retime(offsetTime, curve.retime);
        offsetTime = easing(offsetTime);
        // use arc length LUT
        const targetLen = offsetTime * curve.lut[curve.lut.length - 1];
        const [lutDownIdx, lutUpIdx] = binarySearch(curve.lut, targetLen);
        const lutDownT = lutDownIdx / (curve.lut.length - 1);
        const lutUpT = lutUpIdx / (curve.lut.length - 1);
        const lutDownLen = curve.lut[lutDownIdx];
        const lutUpLen = curve.lut[lutUpIdx];
        let curveT;
        if (lutDownLen === lutUpLen) {
            curveT = lutDownT;
        }
        else {
            curveT = lutDownT === lutUpT
                ? lutDownT
                : lutDownT + (lutUpT - lutDownT) * ((targetLen - lutDownLen) / (lutUpLen - lutDownLen));
        }
        return bezierEval(curve.curve, curveT);
    }

    var sTransitions = /*#__PURE__*/Object.freeze({
        __proto__: null,
        util: index,
        RotationTransition: RotationTransition,
        SingleRotationTransition: SingleRotationTransition,
        StraightTransition: StraightTransition,
        retimeIdentity: retimeIdentity,
        retimeLegacyTimeOffset: retimeLegacyTimeOffset,
        retimeEqualNonOverlappingCascade: retimeEqualNonOverlappingCascade,
        retimeProportionalNonOverlappingCascade: retimeProportionalNonOverlappingCascade,
        SplineTransition: SplineTransition
    });

    var DimensionMappingType;
    (function (DimensionMappingType) {
        DimensionMappingType["Linear"] = "linear";
        DimensionMappingType["Log"] = "log";
    })(DimensionMappingType || (DimensionMappingType = {}));
    const mappings = {
        [DimensionMappingType.Linear]: {
            toNormalized([min, max], value) {
                return (value - min) / (max - min);
            },
            toDomain([min, max], value) {
                return min + value * (max - min);
            }
        },
        [DimensionMappingType.Log]: {
            toNormalized([min, max], value) {
                const a = value - min;
                const b = max - min;
                return Math.log(a + 1) / Math.log(b + 1);
            },
            toDomain([min, max], value) {
                value = value * Math.log(max - min + 1);
                return min + Math.exp(value) - 1;
            }
        }
    };
    /**
     * A data dimension.
     *
     * In general, dimensions are assumed to be usable as a dimension in euclidean space.
     */
    class Dimension {
        constructor(name, domain, mapping = Dimension.Linear) {
            this.name = name;
            this.domain = domain;
            this.mapping = mapping;
        }
        /** Normalizes a value from this dimension's domain to 0..1.  */
        normalize(value) {
            return mappings[this.mapping].toNormalized(this.domain, value);
        }
        /** Expands a normalized value [0..1] to a value in the regular domain range. */
        expand(value) {
            return mappings[this.mapping].toDomain(this.domain, value);
        }
        /** Returns true if this object equals the other object. */
        eq(other) {
            return this.name === other.name && this.domain[0] === other.domain[0] && this.domain[1] === other.domain[1];
        }
        /**
         * Creates a new dimension from the given data.
         *
         * @param key the key in the DataPoints that contains this dimension's data
         * @param data the data with which to calculate the domain
         * @param padding additional padding (multiplicative: the domain will be scaled by padding + 1)
         */
        static fromData(key, data, padding = 0) {
            let min = Infinity;
            let max = -Infinity;
            for (const point of data) {
                const value = point[key];
                if (value < min)
                    min = value;
                if (value > max)
                    max = value;
            }
            if (!Number.isFinite(min))
                min = 0;
            if (!Number.isFinite(max))
                max = 0;
            if (padding) {
                const range = max - min;
                min -= range * padding / 2;
                max += range * padding / 2;
            }
            return new Dimension(key, [min, max]);
        }
    }
    Dimension.Linear = DimensionMappingType.Linear;
    Dimension.Log = DimensionMappingType.Log;

    var sData = /*#__PURE__*/Object.freeze({
        __proto__: null,
        get DimensionMappingType () { return DimensionMappingType; },
        Dimension: Dimension
    });

    /**
     * Represents a view of two data dimensions as a scatter plot.
     */
    class ScatterView {
        constructor(x, y) {
            this.x = x;
            this.y = y;
        }
        /** Returns the normalized X position of a point (in 0..1). */
        getX(point) {
            return this.x.normalize(point[this.x.name]);
        }
        /** Returns the normalized Y position of a point (in 0..1). */
        getY(point) {
            return this.y.normalize(point[this.y.name]);
        }
        toString() {
            return `ScatterView(x: ${this.x.name.toString()}, y: ${this.y.name.toString()})`;
        }
        /**
        * Checks whether this view can be transitioned to the given view with the given transition.
        * If not, this function will throw an error.
        */
        validateTransitionTo(view, withType) {
            const transType = withType;
            if (transType.requiresCommonDimensions) {
                if (!this.x.eq(view.x) && !this.x.eq(view.y) && !this.y.eq(view.x) && !this.y.eq(view.y)) {
                    throw new Error(`cannot transitions between view ${this.toString()} and ${view.toString()} with ${transType.name}: no common dimensions`);
                }
            }
            if (!transType.canSwapDimensions) {
                if (this.x.eq(view.y) || this.y.eq(view.x)) {
                    throw new Error(`cannot transitions between view ${this.toString()} and ${view.toString()} with ${transType.name}: swapping is not supported`);
                }
            }
        }
        /**
         * Transitions this view with the given transition type and parameters to the last view across
         * all intermediate views.
         *
         * @param withType the transition type
         * @param params parameters for the transition
         * @param views intermediate views and a final view. The final view is required
         */
        transitionTo(withType, params, ...views) {
            if (!views.length)
                throw new Error('cannot transition to nothing');
            const transType = withType;
            const transitionViews = [this, ...views];
            for (let i = 0; i < transitionViews.length - 1; i++) {
                transitionViews[i].validateTransitionTo(transitionViews[i + 1], transType);
            }
            return new transType(transitionViews, params);
        }
    }

    var sView = /*#__PURE__*/Object.freeze({
        __proto__: null,
        ScatterView: ScatterView
    });

    var domain;

    // This constructor is used to store event handlers. Instantiating this is
    // faster than explicitly calling `Object.create(null)` to get a "clean" empty
    // object (tested with v8 v4.9).
    function EventHandlers() {}
    EventHandlers.prototype = Object.create(null);

    function EventEmitter() {
      EventEmitter.init.call(this);
    }

    // nodejs oddity
    // require('events') === require('events').EventEmitter
    EventEmitter.EventEmitter = EventEmitter;

    EventEmitter.usingDomains = false;

    EventEmitter.prototype.domain = undefined;
    EventEmitter.prototype._events = undefined;
    EventEmitter.prototype._maxListeners = undefined;

    // By default EventEmitters will print a warning if more than 10 listeners are
    // added to it. This is a useful default which helps finding memory leaks.
    EventEmitter.defaultMaxListeners = 10;

    EventEmitter.init = function() {
      this.domain = null;
      if (EventEmitter.usingDomains) {
        // if there is an active domain, then attach to it.
        if (domain.active ) ;
      }

      if (!this._events || this._events === Object.getPrototypeOf(this)._events) {
        this._events = new EventHandlers();
        this._eventsCount = 0;
      }

      this._maxListeners = this._maxListeners || undefined;
    };

    // Obviously not all Emitters should be limited to 10. This function allows
    // that to be increased. Set to zero for unlimited.
    EventEmitter.prototype.setMaxListeners = function setMaxListeners(n) {
      if (typeof n !== 'number' || n < 0 || isNaN(n))
        throw new TypeError('"n" argument must be a positive number');
      this._maxListeners = n;
      return this;
    };

    function $getMaxListeners(that) {
      if (that._maxListeners === undefined)
        return EventEmitter.defaultMaxListeners;
      return that._maxListeners;
    }

    EventEmitter.prototype.getMaxListeners = function getMaxListeners() {
      return $getMaxListeners(this);
    };

    // These standalone emit* functions are used to optimize calling of event
    // handlers for fast cases because emit() itself often has a variable number of
    // arguments and can be deoptimized because of that. These functions always have
    // the same number of arguments and thus do not get deoptimized, so the code
    // inside them can execute faster.
    function emitNone(handler, isFn, self) {
      if (isFn)
        handler.call(self);
      else {
        var len = handler.length;
        var listeners = arrayClone(handler, len);
        for (var i = 0; i < len; ++i)
          listeners[i].call(self);
      }
    }
    function emitOne(handler, isFn, self, arg1) {
      if (isFn)
        handler.call(self, arg1);
      else {
        var len = handler.length;
        var listeners = arrayClone(handler, len);
        for (var i = 0; i < len; ++i)
          listeners[i].call(self, arg1);
      }
    }
    function emitTwo(handler, isFn, self, arg1, arg2) {
      if (isFn)
        handler.call(self, arg1, arg2);
      else {
        var len = handler.length;
        var listeners = arrayClone(handler, len);
        for (var i = 0; i < len; ++i)
          listeners[i].call(self, arg1, arg2);
      }
    }
    function emitThree(handler, isFn, self, arg1, arg2, arg3) {
      if (isFn)
        handler.call(self, arg1, arg2, arg3);
      else {
        var len = handler.length;
        var listeners = arrayClone(handler, len);
        for (var i = 0; i < len; ++i)
          listeners[i].call(self, arg1, arg2, arg3);
      }
    }

    function emitMany(handler, isFn, self, args) {
      if (isFn)
        handler.apply(self, args);
      else {
        var len = handler.length;
        var listeners = arrayClone(handler, len);
        for (var i = 0; i < len; ++i)
          listeners[i].apply(self, args);
      }
    }

    EventEmitter.prototype.emit = function emit(type) {
      var er, handler, len, args, i, events, domain;
      var doError = (type === 'error');

      events = this._events;
      if (events)
        doError = (doError && events.error == null);
      else if (!doError)
        return false;

      domain = this.domain;

      // If there is no 'error' event listener then throw.
      if (doError) {
        er = arguments[1];
        if (domain) {
          if (!er)
            er = new Error('Uncaught, unspecified "error" event');
          er.domainEmitter = this;
          er.domain = domain;
          er.domainThrown = false;
          domain.emit('error', er);
        } else if (er instanceof Error) {
          throw er; // Unhandled 'error' event
        } else {
          // At least give some kind of context to the user
          var err = new Error('Uncaught, unspecified "error" event. (' + er + ')');
          err.context = er;
          throw err;
        }
        return false;
      }

      handler = events[type];

      if (!handler)
        return false;

      var isFn = typeof handler === 'function';
      len = arguments.length;
      switch (len) {
        // fast cases
        case 1:
          emitNone(handler, isFn, this);
          break;
        case 2:
          emitOne(handler, isFn, this, arguments[1]);
          break;
        case 3:
          emitTwo(handler, isFn, this, arguments[1], arguments[2]);
          break;
        case 4:
          emitThree(handler, isFn, this, arguments[1], arguments[2], arguments[3]);
          break;
        // slower
        default:
          args = new Array(len - 1);
          for (i = 1; i < len; i++)
            args[i - 1] = arguments[i];
          emitMany(handler, isFn, this, args);
      }

      return true;
    };

    function _addListener(target, type, listener, prepend) {
      var m;
      var events;
      var existing;

      if (typeof listener !== 'function')
        throw new TypeError('"listener" argument must be a function');

      events = target._events;
      if (!events) {
        events = target._events = new EventHandlers();
        target._eventsCount = 0;
      } else {
        // To avoid recursion in the case that type === "newListener"! Before
        // adding it to the listeners, first emit "newListener".
        if (events.newListener) {
          target.emit('newListener', type,
                      listener.listener ? listener.listener : listener);

          // Re-assign `events` because a newListener handler could have caused the
          // this._events to be assigned to a new object
          events = target._events;
        }
        existing = events[type];
      }

      if (!existing) {
        // Optimize the case of one listener. Don't need the extra array object.
        existing = events[type] = listener;
        ++target._eventsCount;
      } else {
        if (typeof existing === 'function') {
          // Adding the second element, need to change to array.
          existing = events[type] = prepend ? [listener, existing] :
                                              [existing, listener];
        } else {
          // If we've already got an array, just append.
          if (prepend) {
            existing.unshift(listener);
          } else {
            existing.push(listener);
          }
        }

        // Check for listener leak
        if (!existing.warned) {
          m = $getMaxListeners(target);
          if (m && m > 0 && existing.length > m) {
            existing.warned = true;
            var w = new Error('Possible EventEmitter memory leak detected. ' +
                                existing.length + ' ' + type + ' listeners added. ' +
                                'Use emitter.setMaxListeners() to increase limit');
            w.name = 'MaxListenersExceededWarning';
            w.emitter = target;
            w.type = type;
            w.count = existing.length;
            emitWarning(w);
          }
        }
      }

      return target;
    }
    function emitWarning(e) {
      typeof console.warn === 'function' ? console.warn(e) : console.log(e);
    }
    EventEmitter.prototype.addListener = function addListener(type, listener) {
      return _addListener(this, type, listener, false);
    };

    EventEmitter.prototype.on = EventEmitter.prototype.addListener;

    EventEmitter.prototype.prependListener =
        function prependListener(type, listener) {
          return _addListener(this, type, listener, true);
        };

    function _onceWrap(target, type, listener) {
      var fired = false;
      function g() {
        target.removeListener(type, g);
        if (!fired) {
          fired = true;
          listener.apply(target, arguments);
        }
      }
      g.listener = listener;
      return g;
    }

    EventEmitter.prototype.once = function once(type, listener) {
      if (typeof listener !== 'function')
        throw new TypeError('"listener" argument must be a function');
      this.on(type, _onceWrap(this, type, listener));
      return this;
    };

    EventEmitter.prototype.prependOnceListener =
        function prependOnceListener(type, listener) {
          if (typeof listener !== 'function')
            throw new TypeError('"listener" argument must be a function');
          this.prependListener(type, _onceWrap(this, type, listener));
          return this;
        };

    // emits a 'removeListener' event iff the listener was removed
    EventEmitter.prototype.removeListener =
        function removeListener(type, listener) {
          var list, events, position, i, originalListener;

          if (typeof listener !== 'function')
            throw new TypeError('"listener" argument must be a function');

          events = this._events;
          if (!events)
            return this;

          list = events[type];
          if (!list)
            return this;

          if (list === listener || (list.listener && list.listener === listener)) {
            if (--this._eventsCount === 0)
              this._events = new EventHandlers();
            else {
              delete events[type];
              if (events.removeListener)
                this.emit('removeListener', type, list.listener || listener);
            }
          } else if (typeof list !== 'function') {
            position = -1;

            for (i = list.length; i-- > 0;) {
              if (list[i] === listener ||
                  (list[i].listener && list[i].listener === listener)) {
                originalListener = list[i].listener;
                position = i;
                break;
              }
            }

            if (position < 0)
              return this;

            if (list.length === 1) {
              list[0] = undefined;
              if (--this._eventsCount === 0) {
                this._events = new EventHandlers();
                return this;
              } else {
                delete events[type];
              }
            } else {
              spliceOne(list, position);
            }

            if (events.removeListener)
              this.emit('removeListener', type, originalListener || listener);
          }

          return this;
        };
        
    // Alias for removeListener added in NodeJS 10.0
    // https://nodejs.org/api/events.html#events_emitter_off_eventname_listener
    EventEmitter.prototype.off = function(type, listener){
        return this.removeListener(type, listener);
    };

    EventEmitter.prototype.removeAllListeners =
        function removeAllListeners(type) {
          var listeners, events;

          events = this._events;
          if (!events)
            return this;

          // not listening for removeListener, no need to emit
          if (!events.removeListener) {
            if (arguments.length === 0) {
              this._events = new EventHandlers();
              this._eventsCount = 0;
            } else if (events[type]) {
              if (--this._eventsCount === 0)
                this._events = new EventHandlers();
              else
                delete events[type];
            }
            return this;
          }

          // emit removeListener for all listeners on all events
          if (arguments.length === 0) {
            var keys = Object.keys(events);
            for (var i = 0, key; i < keys.length; ++i) {
              key = keys[i];
              if (key === 'removeListener') continue;
              this.removeAllListeners(key);
            }
            this.removeAllListeners('removeListener');
            this._events = new EventHandlers();
            this._eventsCount = 0;
            return this;
          }

          listeners = events[type];

          if (typeof listeners === 'function') {
            this.removeListener(type, listeners);
          } else if (listeners) {
            // LIFO order
            do {
              this.removeListener(type, listeners[listeners.length - 1]);
            } while (listeners[0]);
          }

          return this;
        };

    EventEmitter.prototype.listeners = function listeners(type) {
      var evlistener;
      var ret;
      var events = this._events;

      if (!events)
        ret = [];
      else {
        evlistener = events[type];
        if (!evlistener)
          ret = [];
        else if (typeof evlistener === 'function')
          ret = [evlistener.listener || evlistener];
        else
          ret = unwrapListeners(evlistener);
      }

      return ret;
    };

    EventEmitter.listenerCount = function(emitter, type) {
      if (typeof emitter.listenerCount === 'function') {
        return emitter.listenerCount(type);
      } else {
        return listenerCount$1.call(emitter, type);
      }
    };

    EventEmitter.prototype.listenerCount = listenerCount$1;
    function listenerCount$1(type) {
      var events = this._events;

      if (events) {
        var evlistener = events[type];

        if (typeof evlistener === 'function') {
          return 1;
        } else if (evlistener) {
          return evlistener.length;
        }
      }

      return 0;
    }

    EventEmitter.prototype.eventNames = function eventNames() {
      return this._eventsCount > 0 ? Reflect.ownKeys(this._events) : [];
    };

    // About 1.5x faster than the two-arg version of Array#splice().
    function spliceOne(list, index) {
      for (var i = index, k = i + 1, n = list.length; k < n; i += 1, k += 1)
        list[i] = list[k];
      list.pop();
    }

    function arrayClone(arr, i) {
      var copy = new Array(i);
      while (i--)
        copy[i] = arr[i];
      return copy;
    }

    function unwrapListeners(arr) {
      var ret = new Array(arr.length);
      for (var i = 0; i < ret.length; ++i) {
        ret[i] = arr[i].listener || arr[i];
      }
      return ret;
    }

    function straight(path) {
        return path;
    }
    function manhattan(path, dimensions) {
        const dims = dimensions.map(dim => dim.name);
        const result = [];
        let prevItem;
        for (const item of path) {
            if (prevItem) {
                const x = dims.indexOf(item.x.name);
                const y = dims.indexOf(item.y.name);
                const prevX = dims.indexOf(prevItem.x.name);
                const prevY = dims.indexOf(prevItem.y.name);
                if (x !== prevX && y !== prevY) {
                    // if possible, don't cross the diagonal by always picking a point
                    // on the same side as (x, y)
                    let cornerX = x;
                    let cornerY = prevY;
                    for (const cx of [x, prevX]) {
                        for (const cy of [y, prevY]) {
                            const overlap = (cx === prevX && cy == prevY) || (cx === x && cy === y);
                            if (overlap)
                                continue;
                            const sideA = x > y && prevX > prevY && cx > cy;
                            const sideB = x < y && prevX < prevY && cx < cy;
                            if (sideA || sideB) {
                                cornerX = cx;
                                cornerY = cy;
                                break;
                            }
                        }
                    }
                    result.push(new ScatterView(dimensions[cornerX], dimensions[cornerY]));
                }
            }
            result.push(item);
            prevItem = item;
        }
        return result;
    }
    var DiagonalBias;
    (function (DiagonalBias) {
        DiagonalBias[DiagonalBias["Start"] = 0] = "Start";
        DiagonalBias[DiagonalBias["End"] = 1] = "End";
    })(DiagonalBias || (DiagonalBias = {}));
    function diagonalBiased(path, dimensions, bias) {
        const dims = dimensions.map(dim => dim.name);
        const result = [];
        let prevItem;
        for (const item of path) {
            if (prevItem) {
                const x = dims.indexOf(item.x.name);
                const y = dims.indexOf(item.y.name);
                const prevX = dims.indexOf(prevItem.x.name);
                const prevY = dims.indexOf(prevItem.y.name);
                const dx = x - prevX;
                const dy = y - prevY;
                if (dx && dy && Math.abs(dx) !== Math.abs(dy)) {
                    // has partial diagonal component (like _/)
                    let diagOffX, diagOffY;
                    if (Math.abs(dx) > Math.abs(dy)) {
                        diagOffX = Math.sign(dx) * Math.abs(dy);
                        diagOffY = dy;
                    }
                    else {
                        diagOffX = dx;
                        diagOffY = Math.sign(dy) * Math.abs(dx);
                    }
                    if (bias === DiagonalBias.Start) {
                        const pointX = prevX + diagOffX;
                        const pointY = prevY + diagOffY;
                        result.push(new ScatterView(dimensions[pointX], dimensions[pointY]));
                    }
                    else {
                        const pointX = x - diagOffX;
                        const pointY = y - diagOffY;
                        result.push(new ScatterView(dimensions[pointX], dimensions[pointY]));
                    }
                }
            }
            result.push(item);
            prevItem = item;
        }
        return result;
    }
    function diagonalStart(path, dims) {
        return diagonalBiased(path, dims, DiagonalBias.Start);
    }
    function diagonalEnd(path, dims) {
        return diagonalBiased(path, dims, DiagonalBias.End);
    }
    function diagonalStairs(path, dimensions) {
        const dims = dimensions.map(dim => dim.name);
        const result = [];
        let prevItem;
        for (const item of path) {
            if (prevItem) {
                const x = dims.indexOf(item.x.name);
                const y = dims.indexOf(item.y.name);
                const prevX = dims.indexOf(prevItem.x.name);
                const prevY = dims.indexOf(prevItem.y.name);
                // 0 - horizontal; 1 - vertical
                let orientation = Math.abs(x - prevX) > Math.abs(y - prevY) ? 0 : 1;
                let cursorX = prevX;
                let cursorY = prevY;
                let moves = 0;
                while (cursorX !== x || cursorY !== y) {
                    const current = [cursorX, cursorY][orientation];
                    const target = [x, y][orientation];
                    const possibleMoves = [];
                    if (current > 0)
                        possibleMoves.push(-1);
                    if (current < dims.length - 1)
                        possibleMoves.push(1);
                    if (!possibleMoves.length)
                        break;
                    let move = possibleMoves[0];
                    for (const potentialMove of possibleMoves) {
                        const currentDist = Math.abs(target - (current + move));
                        const pmDist = Math.abs(target - (current + potentialMove));
                        if (pmDist < currentDist) {
                            move = potentialMove;
                        }
                    }
                    if (orientation === 0)
                        cursorX += move;
                    else
                        cursorY += move;
                    if (cursorX === x && cursorY === y)
                        break; // don't duplicate last view
                    result.push(new ScatterView(dimensions[cursorX], dimensions[cursorY]));
                    orientation ^= 1; // flip orientation to create stairs
                    // this algorithm will hopefully always halt, but just in case
                    if (moves++ > 1000)
                        break;
                }
            }
            result.push(item);
            prevItem = item;
        }
        return result;
    }

    class ScatterplotMatrix extends EventEmitter {
        constructor() {
            super();
            this._data = [];
            this._dimensions = [];
            this._width = 200;
            this._height = 200;
            this._labelPadding = 20;
            this._canvasScale = 1;
            this._rotateLabels = false;
            this._dirtyRerenderTimeout = -1;
            this.onPlotTransitionChange = () => {
                this._transition = this._plot.transition() || undefined;
                this.setDirty();
            };
            this.onPlotTimeUpdate = () => {
                this.renderCurrentView();
            };
            this._container = d3Selection.create('div')
                .attr('class', 'd3st-scatterplot-matrix')
                .style('display', 'inline-block');
            this._svgContainer = this._container.append('svg')
                .attr('class', 'd3st-inner-plot')
                .style('overflow', 'visible');
            this._svgContainer.append('g').attr('class', 'd3st-plot-axis d3st-plot-axis-top');
            this._svgContainer.append('g').attr('class', 'd3st-plot-axis d3st-plot-axis-left');
            this._svgContainer.selectAll('.d3st-plot-axis')
                .attr('font-family', 'sans-serif')
                .attr('font-size', '10');
            this._matrixPlotsCtx = this._svgContainer
                .append('foreignObject')
                .attr('class', 'd3st-plot-canvas-container')
                .style('pointer-events', 'none')
                .append('xhtml:canvas')
                .attr('class', 'd3st-plot-canvas')
                .node()
                .getContext('2d');
            this._transPath = new TransitionPath();
            this._svgContainer.node().appendChild(this._transPath.node.node());
            this._transBuilder = new TransitionBuilder();
            this._container.node().appendChild(this._transBuilder.node());
            this._svgContainer.node().appendChild(this._transBuilder.path.node.node());
            this._matrixCells = new MatrixCells();
            this._svgContainer.node().appendChild(this._matrixCells.cells.node());
            this._matrixCells.on('select', (x, y) => this._transBuilder.onSelect(x, y));
            this._transBuilder.on('beginBuild', () => {
                this._matrixCells.transitionBuilderDidBegin();
                this._transPath.setVisible(false);
            });
            this._transBuilder.on('endBuild', (didCommit) => {
                this._matrixCells.transitionBuilderDidEnd();
                this._transPath.forceClear();
                if (!didCommit)
                    this._transPath.renderPaths();
                this._transPath.setVisible(true);
            });
            this._transBuilder.on('transition', (transition) => {
                this._transPath.forceClear();
                setTimeout(() => {
                    var _a, _b;
                    (_a = this._plot) === null || _a === void 0 ? void 0 : _a.transition(transition);
                    (_b = this._plot) === null || _b === void 0 ? void 0 : _b.playing(true);
                    this.render();
                }, 0);
            });
            this._transBuilder.on('createTransition', (transition, isRebuild) => {
                var _a, _b, _c, _d;
                const time = (_a = this._plot) === null || _a === void 0 ? void 0 : _a.transitionTime();
                (_b = this._plot) === null || _b === void 0 ? void 0 : _b.transition(transition);
                if (isRebuild) {
                    // keep time
                    (_d = (_c = this._plot) === null || _c === void 0 ? void 0 : _c.transitionTime(time)) === null || _d === void 0 ? void 0 : _d.updateLastRender();
                }
            });
        }
        node() {
            return this._container.node();
        }
        size(width, height) {
            if (typeof width === 'number') {
                this._width = width;
                this._height = typeof height === 'number' ? height : width;
                this.setDirty();
                return this;
            }
            return [this._width, this._height];
        }
        data(data) {
            if (data) {
                this._data = data;
                this.setDirty();
                return this;
            }
            return this._data;
        }
        dimensions(dimensions) {
            if (dimensions) {
                this._dimensions = dimensions;
                this.setDirty();
                return this;
            }
            return this._dimensions;
        }
        setDirty() {
            clearTimeout(this._dirtyRerenderTimeout);
            this._dirtyRerenderTimeout = window.setTimeout(() => {
                this.render();
            }, 50);
        }
        render() {
            var _a;
            this._svgContainer
                .attr('width', this._width)
                .attr('height', this._height);
            this._matrixCells.width = this._width - this._labelPadding;
            this._matrixCells.height = this._height - this._labelPadding;
            this._matrixCells.cells.attr('transform', `translate(${this._labelPadding}, ${this._labelPadding})`);
            this._matrixCells.dimensions = this._dimensions;
            const handlePath = (path) => {
                path.node.attr('transform', `translate(${this._labelPadding}, ${this._labelPadding})`);
                path.plotWidth = this._width - this._labelPadding;
                path.plotHeight = this._height - this._labelPadding;
                path.dimensions = this._dimensions;
            };
            handlePath(this._transPath);
            handlePath(this._transBuilder.path);
            this._transPath.views = (_a = this._transition) === null || _a === void 0 ? void 0 : _a.views;
            this._transBuilder.data = this._data;
            this._transBuilder.dimensions = this._dimensions;
            this._transBuilder.plot = this._plot;
            this._matrixCells.render();
            this._transPath.renderPaths();
            this.renderAxes();
            this.drawPlots();
            this.renderCurrentView();
        }
        transBuilder() {
            return this._transBuilder;
        }
        rotateLabels(rotate) {
            if (typeof rotate === 'boolean') {
                this._rotateLabels = rotate;
                this._container.selectAll('.axis-label').remove();
                this.renderAxes();
                return this;
            }
            return this._rotateLabels;
        }
        renderAxes() {
            const cellSizeX = (this._width - this._labelPadding) / this._dimensions.length;
            const cellSizeY = (this._height - this._labelPadding) / this._dimensions.length;
            getComputedStyle(this.node()).color;
            const top = this._container.select('.d3st-plot-axis-top')
                .attr('transform', `translate(${this._labelPadding},${this._labelPadding})`)
                .attr('text-anchor', 'start')
                .selectAll('.axis-label')
                .data(this._dimensions)
                .attr('x', (dim, idx) => idx * cellSizeX)
                .text(dim => dim.name.toString())
                .call(sel => sel.exit().remove())
                .enter()
                .append('text')
                .attr('class', 'axis-label')
                .attr('dominant-baseline', 'text-bottom')
                .style('fill', 'currentColor')
                .attr('dy', '-5')
                .attr('x', (dim, idx) => idx * cellSizeX)
                .text(dim => dim.name.toString());
            const left = this._container.select('.d3st-plot-axis-left')
                .attr('transform', `translate(${this._labelPadding},${this._labelPadding}) rotate(-90)`)
                .attr('text-anchor', 'end')
                .selectAll('.axis-label')
                .data(this._dimensions)
                .attr('x', (dim, idx) => -(this._height - this._labelPadding)
                + (this._dimensions.length - idx) * cellSizeY)
                .text(dim => dim.name.toString())
                .call(sel => sel.exit().remove())
                .enter()
                .append('text')
                .attr('class', 'axis-label')
                .attr('dominant-baseline', 'text-bottom')
                .attr('x', (dim, idx) => -(this._height - this._labelPadding)
                + (this._dimensions.length - idx) * cellSizeY)
                .attr('dy', '-5')
                .style('fill', 'currentColor')
                .text(dim => dim.name.toString());
            if (this._rotateLabels) {
                top.attr('transform', (dim, idx) => `rotate(-45, ${(idx + 0.3) * cellSizeX}, -10)`);
                left.attr('transform', (dim, idx) => `rotate(90, ${-(idx + 0.3) * cellSizeY}, -10)`);
            }
        }
        drawPlots() {
            const width = this._width - this._labelPadding;
            const height = this._height - this._labelPadding;
            this._canvasScale = Math.ceil(window.devicePixelRatio);
            this._container.select('.d3st-plot-canvas-container')
                .attr('x', this._labelPadding)
                .attr('y', this._labelPadding)
                .attr('width', width)
                .attr('height', height);
            this._container.select('.d3st-plot-canvas')
                .attr('width', width * this._canvasScale)
                .attr('height', height * this._canvasScale)
                .style('width', width + 'px')
                .style('height', height + 'px');
            const ctx = this._matrixPlotsCtx;
            ctx.save();
            ctx.scale(this._canvasScale, this._canvasScale);
            ctx.clearRect(0, 0, width, height);
            ctx.fillStyle = ctx.strokeStyle = getComputedStyle(this.node()).color;
            const cellSizeX = width / this._dimensions.length;
            const cellSizeY = height / this._dimensions.length;
            // background grid
            ctx.save();
            ctx.globalAlpha = 0.3;
            ctx.beginPath();
            ctx.rect(0.5, 0.5, width - 1, height - 1);
            for (let i = 1; i < this._dimensions.length; i++) {
                ctx.moveTo(i * cellSizeX, 0);
                ctx.lineTo(i * cellSizeX, height);
                ctx.moveTo(0, i * cellSizeY);
                ctx.lineTo(width, i * cellSizeY);
            }
            ctx.stroke();
            ctx.restore();
            // individual scatterplots
            for (let y = 0; y < this._dimensions.length; y++) {
                for (let x = 0; x < this._dimensions.length; x++) {
                    const view = new ScatterView(this._dimensions[x], this._dimensions[y]);
                    ctx.beginPath();
                    for (const point of this._data) {
                        const pointX = view.getX(point);
                        const pointY = view.getY(point);
                        // don't draw out of bounds points because they would overlap with adjacent cells
                        if (pointX < 0 || pointY < 0 || pointX > 1 || pointY > 1)
                            continue;
                        const screenX = (x + pointX) * cellSizeX;
                        const screenY = (y + 1 - pointY) * cellSizeY;
                        ctx.moveTo(screenX, screenY);
                        ctx.arc(screenX, screenY, 0.5, 0, 2 * Math.PI);
                    }
                    ctx.fill();
                }
            }
            ctx.restore();
        }
        renderCurrentView() {
            if (this._plot) {
                this._matrixCells.currentTransition = this._plot.transition() || undefined;
                this._matrixCells.currentView = this._plot.view() || undefined;
                this._matrixCells.currentTransitionTime = this._plot.transitionTime();
            }
            else {
                this._matrixCells.currentTransition = undefined;
                this._matrixCells.currentView = undefined;
            }
            this._matrixCells.renderCurrentView();
        }
        connect(plot) {
            this.disconnect();
            this._plot = plot;
            this._plot.on('transitionChange', this.onPlotTransitionChange);
            this._plot.on('transitionTimeUpdate', this.onPlotTimeUpdate);
            this.onPlotTransitionChange();
            this.onPlotTimeUpdate();
            return this;
        }
        plot() {
            return this._plot;
        }
        disconnect() {
            if (this._plot) {
                this._plot.removeListener('transitionChange', this.onPlotTransitionChange);
                this._plot.removeListener('transitionTimeUpdate', this.onPlotTimeUpdate);
            }
            return this;
        }
    }
    /** Handles matrix cell outlines and interaction. */
    class MatrixCells extends EventEmitter {
        constructor() {
            super();
            this.dimensions = [];
            this.width = 100;
            this.height = 100;
            this.currentTransitionTime = 0;
            this.currentStrokeWidth = 0;
            this.cells = d3Selection.create('svg:g')
                .attr('class', 'd3st-matrix-cells');
        }
        render() {
            const cells = [];
            for (let y = 0; y < this.dimensions.length; y++) {
                for (let x = 0; x < this.dimensions.length; x++)
                    cells.push({ x, y });
            }
            const cellSizeX = this.width / this.dimensions.length;
            const cellSizeY = this.height / this.dimensions.length;
            this.cells.selectAll('.d3st-matrix-cell')
                .data(cells)
                .call(sel => sel.exit().remove())
                .call(sel => sel
                .enter()
                .append('g')
                .attr('class', 'd3st-matrix-cell')
                .call(sel => sel.append('rect')
                .attr('class', 'd3st-matrix-cell-cursor')
                .attr('fill', 'none')
                .attr('stroke', 'blue')
                .attr('stroke-width', 0))
                .call(sel => sel.append('rect')
                .attr('class', 'd3st-matrix-cell-hover')
                .attr('fill', 'none')
                .attr('stroke', 'currentColor')
                .attr('stroke-width', 0))
                .call(sel => sel.append('rect')
                .attr('class', 'd3st-matrix-cell-hitbox')
                .attr('fill', 'black')
                .style('opacity', '0')
                .on('mouseover', (event) => {
                const { x, y } = event.currentTarget.parentNode.dataset;
                this.hoverCell = { x: +x, y: +y };
                this.hoverCellDidChange();
            })
                .on('mouseout', (event) => {
                var _a, _b;
                const { x, y } = event.currentTarget.parentNode.dataset;
                const cell = { x: +x, y: +y };
                if (((_a = this.hoverCell) === null || _a === void 0 ? void 0 : _a.x) === cell.x && ((_b = this.hoverCell) === null || _b === void 0 ? void 0 : _b.y) === cell.y)
                    this.hoverCell = undefined;
                this.hoverCellDidChange();
            })
                .on('click', (event) => {
                const { x, y } = event.currentTarget.parentNode.dataset;
                this.emit('select', +x, +y);
            })));
            this.cells.selectAll('.d3st-matrix-cell')
                .data(cells)
                .attr('data-x', cell => cell.x)
                .attr('data-y', cell => cell.y)
                .attr('transform', cell => `translate(${cell.x * cellSizeX}, ${cell.y * cellSizeY})`)
                .call(sel => sel.selectAll('rect').attr('width', cellSizeX).attr('height', cellSizeY));
        }
        renderCurrentView() {
            this.cells.selectAll('.d3st-matrix-cell-cursor')
                .transition()
                .duration(400)
                .ease(d3Ease.easeExpOut)
                .attr('stroke-width', this.currentStrokeWidth);
            const dimIndex = (dim) => this.dimensions.map(d => d.name).indexOf(dim.name);
            const activeViews = [];
            if (this.currentTransition) {
                const views = this.currentTransition.views;
                const maxIndex = views.length - 1;
                const viewIndex = this.currentTransitionTime * maxIndex;
                const indexLo = Math.min(Math.floor(viewIndex), maxIndex);
                const indexHi = Math.min(Math.ceil(viewIndex), maxIndex);
                const t = indexLo === indexHi
                    ? 0
                    : (viewIndex - indexLo) / (indexHi - indexLo);
                activeViews.push({
                    x: dimIndex(views[indexLo].x),
                    y: dimIndex(views[indexLo].y),
                    z: 1 - t
                });
                if (indexLo !== indexHi) {
                    activeViews.push({
                        x: dimIndex(views[indexHi].x),
                        y: dimIndex(views[indexHi].y),
                        z: t
                    });
                }
            }
            else if (this.currentView) {
                activeViews.push({
                    x: dimIndex(this.currentView.x),
                    y: dimIndex(this.currentView.y),
                    z: 1
                });
            }
            for (const view of activeViews) {
                this.cells.select(`.d3st-matrix-cell[data-x="${view.x}"][data-y="${view.y}"]`)
                    .select('.d3st-matrix-cell-cursor')
                    .transition()
                    .duration(0)
                    .attr('stroke-width', Math.sqrt(view.z) * 3);
            }
        }
        hoverCellDidChange() {
            this.cells.selectAll('.d3st-matrix-cell-hover')
                .transition()
                .duration(400)
                .ease(d3Ease.easeExpOut)
                .attr('stroke-width', this.currentStrokeWidth);
            const cell = this.hoverCell;
            if (cell) {
                this.cells.select(`.d3st-matrix-cell[data-x="${cell.x}"][data-y="${cell.y}"]`)
                    .select('.d3st-matrix-cell-hover')
                    .transition()
                    .duration(0)
                    .attr('stroke-width', 3);
            }
        }
        waveEffect(strokeColor, strokeWidth, delay) {
            for (let y = 0; y < this.dimensions.length; y++) {
                for (let x = 0; x < this.dimensions.length; x++) {
                    this.cells.select(`.d3st-matrix-cell[data-x="${x}"][data-y="${y}"]`)
                        .select('.d3st-matrix-cell-hover')
                        .transition()
                        .delay(delay(x, y))
                        .duration(200)
                        .ease(d3Ease.easeExpInOut)
                        .attr('stroke', strokeColor)
                        .attr('stroke-width', 3)
                        .transition()
                        .duration(400)
                        .ease(d3Ease.easeExpOut)
                        .attr('stroke-width', strokeWidth);
                }
            }
        }
        transitionBuilderDidBegin() {
            const cornerX = 0;
            const cornerY = this.dimensions.length - 1;
            const timeScale = 250 / this.dimensions.length;
            this.currentStrokeWidth = 1;
            this.waveEffect('red', 1, (x, y) => Math.hypot(x - cornerX, (y - cornerY) / 2) * timeScale + Math.random() * 20);
        }
        transitionBuilderDidEnd() {
            const cornerX = 0;
            const cornerY = this.dimensions.length - 1;
            const timeScale = 250 / this.dimensions.length;
            const maxIndex = this.dimensions.length - 1;
            const maxDelay = Math.hypot(maxIndex - cornerX, (maxIndex - cornerY) / 2) * timeScale;
            this.currentStrokeWidth = 0;
            this.waveEffect('currentColor', 0, (x, y) => maxDelay - Math.hypot(x - cornerX, (y - cornerY) / 2) * timeScale);
        }
    }
    function pathToSegments(path) {
        const segments = [];
        let prevItem;
        for (const item of path) {
            if (prevItem) {
                segments.push({
                    x1: prevItem.x.name,
                    y1: prevItem.y.name,
                    x2: item.x.name,
                    y2: item.y.name
                });
            }
            prevItem = item;
        }
        return segments;
    }
    class TransitionPath {
        constructor() {
            this.plotWidth = 200;
            this.plotHeight = 200;
            this.dimensions = [];
            this.node = d3Selection.create('svg:g')
                .attr('class', 'd3st-transition-path')
                .attr('fill', 'none')
                .attr('stroke', 'currentColor')
                .attr('stroke-width', 3)
                .attr('stroke-linecap', 'round');
            this._actualPath = this.node.append('g')
                .attr('class', 'd3st-actual-path')
                .style('opacity', '0.25');
            this._innerPath = this.node.append('g')
                .attr('class', 'd3st-inner-path')
                .style('opacity', '0.5');
        }
        setVisible(visible) {
            this.node.transition()
                .duration(200)
                .attr('stroke-width', visible ? 3 : 0);
        }
        forceClear() {
            this.node.selectAll('.path-segment, .stop-point').remove();
        }
        renderPaths() {
            let actualPath = [];
            let path = [];
            if (this.views) {
                path = [...this.views];
                actualPath = this.postTransform ? this.postTransform(path, this.dimensions) : path;
            }
            const actualPathSegments = actualPath.length ? pathToSegments(actualPath) : [];
            const pathSegments = pathToSegments(path);
            const cellSizeX = this.plotWidth / this.dimensions.length;
            const cellSizeY = this.plotHeight / this.dimensions.length;
            const dims = this.dimensions.map(dim => dim.name);
            const getX = (name) => (dims.indexOf(name) + 0.5) * cellSizeX;
            const getY = (name) => (dims.indexOf(name) + 0.5) * cellSizeY;
            const renderSegments = (sel) => sel
                .attr('x1', segment => getX(segment.x1))
                .attr('y1', segment => getY(segment.y1))
                .attr('x2', segment => getX(segment.x2))
                .attr('y2', segment => getY(segment.y2))
                .call(sel => sel.exit().remove())
                .call(sel => sel.enter()
                .append('line')
                .attr('class', 'path-segment')
                .attr('x1', segment => getX(segment.x1))
                .attr('y1', segment => getY(segment.y1))
                .attr('x2', segment => getX(segment.x1))
                .attr('y2', segment => getY(segment.y1))
                .transition()
                .attr('x2', segment => getX(segment.x2))
                .attr('y2', segment => getY(segment.y2)));
            this._actualPath.selectAll('.path-segment')
                .data(actualPathSegments)
                .call(renderSegments);
            this._innerPath.selectAll('.path-segment')
                .data(pathSegments)
                .call(renderSegments);
            this._innerPath.selectAll('.stop-point')
                .data(path)
                .attr('cx', c => getX(c.x.name))
                .attr('cy', c => getY(c.y.name))
                .call(sel => sel.exit().remove())
                .enter()
                .append('circle')
                .attr('class', 'stop-point')
                .attr('cx', c => getX(c.x.name))
                .attr('cy', c => getY(c.y.name))
                .attr('r', 0)
                .transition()
                .attr('r', 2);
        }
    }
    const TRANSITION_TYPES = {
        straight: StraightTransition,
        spline: SplineTransition,
        rotation: RotationTransition,
    };
    const makeIcon = (content) => `<svg xmlns="http://www.w3.org/2000/xml" viewBox="0 0 24 24" width="14" height="14"><g stroke="currentColor" stroke-width="2" fill="none">${content}</g></svg>`;
    const TRANSFORM_TYPES = {
        straight: {
            icon: makeIcon(`<line x1="3.5" y1="20.5" x2="20.5" y2="3.5"></line><polyline points="16 3 21 3 21 8"></polyline>`),
            transform: straight
        },
        manhattan: {
            icon: makeIcon(`<polyline points="2.5 19.5 17.5 19.5 17.5 4.5"></polyline><polyline points="14 7 17.5 3.5 21 7"></polyline>`),
            transform: manhattan
        },
        diagonalStart: {
            icon: makeIcon(`<polyline points="3 20 11.5 7 19.5 7"></polyline><polyline points="17 4 20 7 17 10"></polyline>`),
            transform: diagonalStart
        },
        diagonalEnd: {
            icon: makeIcon(`<polyline points="3.5 19 12 19 19.5 6"></polyline><polyline points="15.5 6.5 20 5.5 21 10"></polyline>`),
            transform: diagonalEnd
        },
        diagonalStairs: {
            icon: makeIcon(`<polyline points="2 21 8 21 8 16 13 16 13 11 18 11 18 4.5"></polyline><polyline points="21 7 18 4 15 7"></polyline>`),
            transform: diagonalStairs
        },
    };
    class TransitionBuilder extends EventEmitter {
        constructor() {
            super();
            this.data = [];
            this.dimensions = [];
            this.buildingTransition = false;
            this.transType = Object.keys(TRANSITION_TYPES)[0];
            this.tfType = Object.keys(TRANSFORM_TYPES)[0];
            this.transParams = {};
            this.onTransParamsChange = (params) => {
                this.transParams[this.transType] = params;
                this.renderParams();
            };
            this.toggleBuilder = () => {
                if (this.buildingTransition)
                    this.end();
                else
                    this.begin();
            };
            this.begin = () => {
                this._modeButton.textContent = 'Cancel';
                this._buildButton.textContent = 'Build';
                this.emit('beginBuild');
                this.buildingTransition = true;
                this.path.setVisible(true);
                this.path.views = [];
                this.path.renderPaths();
            };
            this.end = (didCommit = false) => {
                this._modeButton.textContent = 'Build Transition';
                this._buildButton.textContent = 'Rebuild With New Parameters';
                this.emit('endBuild', didCommit);
                this.buildingTransition = false;
                this.path.setVisible(false);
            };
            this.commit = () => {
                var _a;
                let views;
                let isRebuild = false;
                if (this.buildingTransition) {
                    views = this.path.views;
                }
                else {
                    const currentTrans = (_a = this.plot) === null || _a === void 0 ? void 0 : _a.transition();
                    if (!currentTrans)
                        return;
                    views = currentTrans.views;
                    isRebuild = true;
                }
                if (!views.length)
                    return;
                this.end(true);
                const transition = this.buildTransition(views);
                transition.prepare().then(() => {
                    this.emit('createTransition', transition, isRebuild);
                });
            };
            this._node = document.createElement('div');
            this._node.className = 'd3st-transition-builder';
            this._modeButton = document.createElement('button');
            this._node.appendChild(this._modeButton);
            this._modeButton.textContent = 'Build Transition';
            this._modeButton.addEventListener('click', this.toggleBuilder);
            this._buildButton = document.createElement('button');
            this._node.appendChild(this._buildButton);
            this._buildButton.textContent = 'Rebuild With New Parameters';
            this._buildButton.addEventListener('click', this.commit);
            this._builderSettings = document.createElement('div');
            this._node.appendChild(this._builderSettings);
            {
                const typeSelect = document.createElement('select');
                for (const id in TRANSITION_TYPES) {
                    const option = document.createElement('option');
                    option.value = id;
                    option.textContent = id;
                    typeSelect.appendChild(option);
                }
                typeSelect.addEventListener('change', () => {
                    this.transType = typeSelect.value;
                    this.renderParams();
                });
                this._builderSettings.appendChild(typeSelect);
                const pathTransformSelect = document.createElement('span');
                Object.assign(pathTransformSelect.style, {
                    display: 'inline-block',
                    borderRadius: '4px',
                    overflow: 'hidden',
                    verticalAlign: 'middle',
                    border: '1px solid rgba(0, 0, 0, 0.2)'
                });
                let selectedOption = null;
                for (const id in TRANSFORM_TYPES) {
                    const option = document.createElement('button');
                    option.value = id;
                    option.title = id;
                    option.innerHTML = TRANSFORM_TYPES[id].icon;
                    pathTransformSelect.appendChild(option);
                    Object.assign(option.style, {
                        margin: '0',
                        color: 'inherit',
                        background: 'none',
                        border: 'none',
                        padding: '2px 4px'
                    });
                    if (!selectedOption) {
                        selectedOption = option;
                        selectedOption.style.background = '#000';
                        selectedOption.style.color = '#fff';
                    }
                    option.addEventListener('click', () => {
                        selectedOption.style.background = 'none';
                        selectedOption.style.color = 'inherit';
                        selectedOption = option;
                        selectedOption.style.background = '#000';
                        selectedOption.style.color = '#fff';
                        this.tfType = id;
                        this.renderParams();
                    });
                }
                this._builderSettings.appendChild(pathTransformSelect);
                this._transParams = document.createElement('div');
                this._builderSettings.appendChild(this._transParams);
            }
            this.path = new TransitionPath();
            this.path._innerPath.attr('stroke', 'red').style('opacity', 1);
            this.path.setVisible(false);
        }
        node() {
            return this._node;
        }
        getTransConstructor() {
            return TRANSITION_TYPES[this.transType];
        }
        getPathPostTransform() {
            const { transform } = TRANSFORM_TYPES[this.tfType];
            if (this.getTransConstructor().requiresCommonDimensions) {
                return (path, dims) => manhattan(transform(path, dims), dims);
            }
            return transform;
        }
        renderParams() {
            renderTransitionParams(this._transParams, this.getTransConstructor().params, this.transParams[this.transType] || {}, this.onTransParamsChange);
            this.path.postTransform = this.getPathPostTransform();
            this.path.renderPaths();
        }
        buildTransition(path) {
            const Trans = this.getTransConstructor();
            const postTransform = this.getPathPostTransform();
            if (postTransform)
                path = postTransform(path, this.dimensions);
            return new Trans(path, {
                data: this.data,
                ...(this.transParams[this.transType] || {})
            });
        }
        onSelect(x, y) {
            var _a;
            const xDim = this.dimensions[x];
            const yDim = this.dimensions[y];
            const view = new ScatterView(xDim, yDim);
            if (this.buildingTransition) {
                (_a = this.path.views) === null || _a === void 0 ? void 0 : _a.push(view);
                this.path.renderPaths();
            }
            else if (this.plot) {
                const path = [];
                path.push(this.plot.closestView());
                path.push(view);
                const transition = this.buildTransition(path);
                transition.prepare().then(() => {
                    this.emit('transition', transition);
                });
            }
        }
    }
    function renderTransitionParams(node, params, values, onChange) {
        var _a, _b, _c, _d, _e, _f;
        let domCursor = 0;
        let didRenderNew = false;
        node._values = values;
        const currentChildren = [];
        for (let i = 0; i < node.children.length; i++)
            currentChildren.push(node.children[i]);
        for (const key in params) {
            const param = params[key];
            const itemId = param.type + ' ' + key;
            if (((_b = (_a = currentChildren[domCursor]) === null || _a === void 0 ? void 0 : _a.dataset) === null || _b === void 0 ? void 0 : _b.id) !== itemId) {
                (_d = (_c = currentChildren[domCursor]) === null || _c === void 0 ? void 0 : _c.parentNode) === null || _d === void 0 ? void 0 : _d.removeChild(currentChildren[domCursor]);
                const onParamChange = (thunk) => {
                    onChange({
                        ...node._values,
                        [key]: thunk(node._values[key])
                    });
                };
                const newNode = document.createElement('div');
                newNode.className = 'd3st-transition-param';
                newNode.dataset.id = itemId;
                const defaultValue = createTransitionParam(newNode, param, onParamChange);
                if (!(key in values))
                    values[key] = defaultValue;
                node.insertBefore(newNode, currentChildren[domCursor + 1]);
                currentChildren[domCursor] = newNode;
                didRenderNew = true;
            }
            updateTransitionParam(currentChildren[domCursor], param, key, values);
            domCursor++;
        }
        if (didRenderNew) {
            onChange(values);
        }
        for (let i = domCursor; i < currentChildren.length; i++) {
            (_f = (_e = currentChildren[i]) === null || _e === void 0 ? void 0 : _e.parentNode) === null || _f === void 0 ? void 0 : _f.removeChild(currentChildren[i]);
        }
    }
    function createTransitionParam(node, param, onChange) {
        if (param.type === 'number') {
            const container = document.createElement('div');
            container.className = 'd3st-tp-number';
            node.appendChild(container);
            Object.assign(container.style, {
                position: 'relative',
                padding: '4px',
                cursor: 'ew-resize',
                background: 'rgba(0, 0, 0, 0.1)'
            });
            const sliderValue = document.createElement('div');
            sliderValue.className = 'd3st-tp-n-value';
            container.appendChild(sliderValue);
            Object.assign(sliderValue.style, {
                position: 'absolute',
                inset: '0',
                background: 'currentColor',
                opacity: '0.2',
                transformOrigin: '0 0'
            });
            const label = document.createElement('span');
            label.className = 'd3st-tp-n-label';
            Object.assign(label.style, {
                font: '10px sans-serif'
            });
            container.appendChild(label);
            const input = document.createElement('input');
            input.type = 'number';
            Object.assign(input.style, {
                font: '10px sans-serif',
                position: 'absolute',
                inset: '0',
                display: 'none'
            });
            container.appendChild(input);
            let inputMode = false;
            let pointerIsDown = false;
            let lastPointerX = 0;
            let movedDistance = 0;
            let currentValue = 0;
            container.addEventListener('pointerdown', e => {
                if (inputMode)
                    return;
                e.preventDefault();
                pointerIsDown = true;
                lastPointerX = e.clientX;
                movedDistance = 0;
                onChange(value => currentValue = value);
                container.setPointerCapture(e.pointerId);
            });
            container.addEventListener('pointermove', e => {
                e.preventDefault();
                if (!pointerIsDown)
                    return;
                const delta = (e.clientX - lastPointerX);
                lastPointerX = e.clientX;
                const valueDelta = delta / container.getBoundingClientRect().width * (param.domain[1] - param.domain[0]);
                movedDistance += Math.abs(delta);
                if (movedDistance >= 2) {
                    currentValue += valueDelta;
                    onChange(value => {
                        return Math.min(Math.max(param.round ? Math.round(currentValue) : currentValue, param.domain[0]), param.domain[1]);
                    });
                }
            });
            container.addEventListener('pointerup', e => {
                if (!pointerIsDown)
                    return;
                pointerIsDown = false;
                container.releasePointerCapture(e.pointerId);
                if (movedDistance < 2) {
                    inputMode = true;
                    input.style.display = 'block';
                    onChange(value => input.value = value);
                    input.focus();
                }
            });
            input.addEventListener('keydown', e => {
                if (e.key === 'Enter') {
                    if (Number.isFinite(+input.value)) {
                        onChange(() => {
                            return Math.min(Math.max(param.round ? Math.round(+input.value) : +input.value, param.domain[0]), param.domain[1]);
                        });
                    }
                    input.blur();
                }
                else if (e.key === 'Escape')
                    input.blur();
            });
            input.addEventListener('blur', () => {
                inputMode = false;
                input.style.display = 'none';
            });
            return param.default;
        }
        else if (param.type === 'bool') {
            const checkbox = document.createElement('input');
            checkbox.className = 'd3st-tp-b-checkbox';
            checkbox.type = 'checkbox';
            checkbox.id = Math.random().toString();
            node.appendChild(checkbox);
            node.appendChild(document.createTextNode(' '));
            const label = document.createElement('label');
            label.className = 'd3st-tp-b-label';
            label.setAttribute('for', checkbox.id);
            label.style.font = '10px sans-serif';
            node.appendChild(label);
            checkbox.addEventListener('change', () => {
                onChange(() => checkbox.checked);
            });
            return param.default;
        }
        else if (param.type === 'enum') {
            const id = Math.random().toString();
            const label = document.createElement('label');
            label.className = 'd3st-tp-b-label';
            label.setAttribute('for', id);
            label.style.font = '10px sans-serif';
            node.appendChild(label);
            const select = document.createElement('select');
            select.id = id;
            select.className = 'd3st-tp-e-select';
            let index = 0;
            for (const variant of param.variants) {
                const option = document.createElement('option');
                option.textContent = variant.label;
                option.value = (index++).toString();
                select.appendChild(option);
            }
            node.appendChild(select);
            select.addEventListener('change', () => {
                onChange(() => param.variants[+select.value].value);
            });
            return param.variants[param.default].value;
        }
        else if (param.type === 'group') {
            const header = document.createElement('div');
            header.className = 'd3st-tp-g-header';
            node.appendChild(header);
            const label = document.createElement('label');
            label.className = 'd3st-tp-g-label';
            label.style.font = '10px sans-serif';
            header.appendChild(label);
            const contents = document.createElement('ul');
            contents.className = 'd3st-tp-g-contents';
            node.appendChild(contents);
            Object.assign(contents.style, {
                listStyle: 'none',
                padding: '0',
                margin: '0',
                paddingLeft: '16px'
            });
            const defaults = {};
            for (const itemId in param.contents) {
                const itemNode = document.createElement('li');
                itemNode.className = 'd3st-tp-g-item';
                itemNode.dataset.id = itemId;
                contents.appendChild(itemNode);
                defaults[itemId] = createTransitionParam(itemNode, param.contents[itemId], (thunk) => onChange(v => ({
                    ...v,
                    [itemId]: thunk(v[itemId])
                })));
            }
            if (param.nullable) {
                header.insertBefore(document.createTextNode(' '), header.firstChild);
                const checkbox = document.createElement('input');
                checkbox.className = 'd3st-tp-g-checkbox';
                checkbox.type = 'checkbox';
                checkbox.id = Math.random().toString();
                header.insertBefore(checkbox, header.firstChild);
                label.setAttribute('for', checkbox.id);
                let values = defaults;
                checkbox.addEventListener('change', () => {
                    if (checkbox.checked) {
                        onChange(() => values);
                    }
                    else {
                        onChange(v => {
                            values = v;
                            return null;
                        });
                    }
                });
                return null;
            }
            else {
                return defaults;
            }
        }
        else if (param.type === 'derived') {
            node.style.display = 'none';
            node._paramOnChange = onChange;
        }
    }
    function updateTransitionParam(node, param, paramId, values, topValues = values) {
        var _a;
        if (param.shouldShow) {
            const shouldShow = param.shouldShow(values);
            if (shouldShow)
                node.style.display = 'block';
            else
                node.style.display = 'none';
        }
        if (param.type === 'number') {
            const sliderValue = node.querySelector('.d3st-tp-n-value');
            const label = node.querySelector('.d3st-tp-n-label');
            const scale = (values[paramId] - param.domain[0]) / (param.domain[1] - param.domain[0]);
            sliderValue.style.transform = `scaleX(${scale})`;
            label.textContent = paramId + ': ' + (param.round ? Math.round(values[paramId]) : values[paramId].toFixed(2));
        }
        else if (param.type === 'bool') {
            const checkbox = node.querySelector('.d3st-tp-b-checkbox');
            const label = node.querySelector('.d3st-tp-b-label');
            checkbox.checked = values[paramId];
            label.textContent = paramId;
        }
        else if (param.type === 'enum') {
            const select = node.querySelector('.d3st-tp-e-select');
            const label = node.querySelector('.d3st-tp-b-label');
            select.value = param.variants.map(v => v.value).indexOf(values[paramId]).toString();
            label.textContent = paramId;
        }
        else if (param.type === 'group') {
            const label = node.querySelector('.d3st-tp-g-label');
            const contents = node.querySelector('.d3st-tp-g-contents');
            label.textContent = paramId;
            if (param.nullable) {
                const checkbox = node.querySelector('.d3st-tp-g-checkbox');
                checkbox.checked = values[paramId] !== null;
            }
            if (values[paramId] !== null) {
                contents.style.display = '';
                const nodes = {};
                for (let i = 0; i < contents.children.length; i++) {
                    const child = contents.children[i];
                    if ((_a = child.dataset) === null || _a === void 0 ? void 0 : _a.id)
                        nodes[child.dataset.id] = child;
                }
                for (const itemId in param.contents) {
                    updateTransitionParam(nodes[itemId], param.contents[itemId], itemId, values[paramId] || {}, values);
                }
            }
            else {
                contents.style.display = 'none';
            }
        }
        else if (param.type === 'derived') {
            const derived = param.derive(topValues);
            if (values[paramId] !== derived) {
                node._paramOnChange(() => derived);
            }
        }
    }
    function scatterplotMatrix() {
        return new ScatterplotMatrix();
    }

    /**
     * A scatterplot.
     */
    class Scatterplot extends EventEmitter {
        constructor() {
            super(...arguments);
            this._data = [];
            // Position and size on drawing area.
            this._x = 0;
            this._y = 0;
            this._width = 200;
            this._height = 200;
            // How much padding to add for axes.
            this._axisPaddingTop = 0;
            this._axisPaddingLeft = 0;
            this._axisPaddingRight = 0;
            this._axisPaddingBottom = 0;
            this._currentTransitionTime = 0;
            this._playing = false;
            this._playingBackwards = false;
            this._speed = 1;
            /** Used to determine whether effectiveViewChange should be fired. */
            this._prevViewUpdate = null;
            /**
             * Returns the new selection of circles.
             * @param container the container
             */
            this.createCircles = (container) => {
                // empty existing content
                container.selectAll('.d3st-data').remove();
                // create new circles
                return this._circles = container
                    .selectAll('.d3st-data')
                    .data(this._data)
                    .enter()
                    .append('circle')
                    .attr('class', 'd3st-data')
                    .attr('r', 1)
                    .style('fill', 'black')
                    .call(this.updateCircles);
            };
            /**
             * Updates a previously created selection of circles.
             * @param circles the selection of circles
             */
            this.updateCircles = (circles) => {
                return circles
                    .attr('cx', dataPoint => this.normalizedXToDrawing(this.dataPointX(dataPoint)).toString())
                    .attr('cy', dataPoint => this.normalizedYToDrawing(this.dataPointY(dataPoint)).toString());
            };
            /**
             * Transitions a previously created selection of circles with the given D3 transition.
             * Note that this will not interact with transitionTime.
             *
             * @param circles the selection of circles
             */
            this.transitionCircles = (circles) => {
                if (!this._currentTransition)
                    throw new Error('cannot transition: no transition loaded');
                if (!this._currentTransition.isReady)
                    throw new Error('cannot transition: transition is not ready. call ScatterTransition#prepare() first');
                const transition = this._currentTransition;
                return circles
                    .attrTween('cx', (dataPoint) => t => this.normalizedXToDrawing(transition.getX(t, dataPoint)).toString())
                    .attrTween('cy', (dataPoint) => t => this.normalizedYToDrawing(transition.getY(t, dataPoint)).toString());
            };
            this._lastFrameTime = 0;
            /** Toggles playback. */
            this.togglePlayback = () => {
                this.playing(!this.playing());
            };
            this.playbackFrame = () => {
                if (!this._playing)
                    return;
                const transition = this.transition();
                if (!transition) {
                    this.playing(false);
                    return;
                }
                const deltaTime = (Date.now() - this._lastFrameTime) / 1000;
                this._lastFrameTime = Date.now();
                const transitionCount = transition.views.length - 1;
                const direction = this._playingBackwards ? -1 : 1;
                const newTime = this.transitionTime() + this._speed * direction * deltaTime / transitionCount;
                this.transitionTime(newTime);
                this.updateLastRender();
                const shouldStop = (direction * this._speed) > 0 ? newTime >= 1 : newTime <= 0;
                if (shouldStop)
                    requestAnimationFrame(() => this.playing(false));
                else
                    requestAnimationFrame(this.playbackFrame);
            };
            //#endregion
        }
        x(value) {
            if (value !== undefined) {
                this._x = value;
                this.emit('dimensionsChange');
                return this;
            }
            return this._x;
        }
        y(value) {
            if (value !== undefined) {
                this._y = value;
                this.emit('dimensionsChange');
                return this;
            }
            return this._y;
        }
        width(value) {
            if (value !== undefined) {
                this._width = value;
                this.emit('dimensionsChange');
                return this;
            }
            return this._width;
        }
        height(value) {
            if (value !== undefined) {
                this._height = value;
                this.emit('dimensionsChange');
                return this;
            }
            return this._height;
        }
        pos(x, y) {
            if (x !== undefined && y !== undefined) {
                this._x = x;
                this._y = y;
                this.emit('dimensionsChange');
                return this;
            }
            return [this._x, this._y];
        }
        size(width, height) {
            if (width !== undefined && height !== undefined) {
                this._width = width;
                this._height = height;
                this.emit('dimensionsChange');
                return this;
            }
            return [this._width, this._height];
        }
        rect(x, y, width, height) {
            return this.pos(x, y).size(width, height);
        }
        data(data) {
            if (data) {
                this._data = data;
                this.emit('dataChange');
                return this;
            }
            return this._data;
        }
        axisPadding(top, right, bottom, left) {
            this._axisPaddingTop = top;
            this._axisPaddingLeft = left;
            this._axisPaddingRight = right;
            this._axisPaddingBottom = bottom;
            this.emit('dimensionsChange');
            return this;
        }
        view(viewOrX, y, padding) {
            if (viewOrX && viewOrX instanceof ScatterView) {
                this.setCurrentView(viewOrX);
                return this;
            }
            else if (viewOrX && y) {
                const x = viewOrX;
                const xDim = x instanceof Dimension
                    ? x
                    : Dimension.fromData(x, this._data, padding);
                const yDim = y instanceof Dimension
                    ? y
                    : Dimension.fromData(y, this._data, padding);
                this.setCurrentView(new ScatterView(xDim, yDim));
                return this;
            }
            return this.getCurrentView();
        }
        getCurrentView() {
            if (!this._currentView) {
                if (this._data.length) {
                    console.warn('No scatterplot view set! Creating something random. To set a view, use .view(...)');
                }
                const keys = Object.keys(this._data[0] || {});
                const x = keys[0] || 'x';
                const y = keys[1] || 'y';
                this._currentView = new ScatterView(Dimension.fromData(x, this._data), Dimension.fromData(y, this._data));
            }
            return this._currentView;
        }
        setCurrentView(view) {
            this.clearTransition();
            this._currentView = view;
            this.emit('viewChange');
        }
        transition(transitionOrType, params) {
            if (!transitionOrType)
                return this._currentTransition || null;
            if ('isReady' in transitionOrType) {
                this._currentTransition = transitionOrType;
                this.transitionTime(0);
                this.emit('transitionChange');
                this.updateLastRender();
                return this;
            }
            return new ScatterplotTransitionBuilder(this, transitionOrType, params);
        }
        /** Finishes the transition and applies the final view as the current view. */
        finishTransition() {
            if (!this._currentTransition)
                throw new Error('cannot finish transition: no transition loaded');
            const transitionViews = this._currentTransition.views;
            this.setCurrentView(transitionViews[transitionViews.length - 1]);
            return this;
        }
        /** Clears the current transition. */
        clearTransition() {
            this._currentTransition = undefined;
            this.emit('transitionChange');
            return this;
        }
        /**
         * Returns the current view as specified by the transition (if the current time happens to
         * land on one), or null.
         */
        getCurrentTransitionView() {
            const transition = this.transition();
            if (!transition)
                return this.getCurrentView();
            if (transition.hasMeaningfulIntermediates) {
                const transitionCount = transition.views.length - 1;
                const viewTime = this._currentTransitionTime * transitionCount;
                const closestView = Math.round(viewTime);
                if (Math.abs(viewTime - closestView) < 1e-2) {
                    return transition.views[closestView];
                }
            }
            else if (Math.abs(this._currentTransitionTime - Math.round(this._currentTransitionTime)) < 1e-2) {
                return transition.views[Math.round(this._currentTransitionTime)];
            }
            return null;
        }
        closestView() {
            const transition = this.transition();
            if (!transition)
                return this.getCurrentView();
            const transitionCount = transition.views.length - 1;
            const viewTime = this._currentTransitionTime * transitionCount;
            const closestView = Math.round(viewTime);
            return transition.views[closestView];
        }
        transitionTime(time) {
            if (typeof time === 'number') {
                this._currentTransitionTime = clamp(time, 0, 1);
                this.emit('transitionTimeUpdate');
                const currentView = this.getCurrentTransitionView();
                if (currentView !== this._prevViewUpdate) {
                    this.emit('effectiveViewChange', currentView);
                    this._prevViewUpdate = currentView;
                }
                return this;
            }
            return this._currentTransitionTime;
        }
        //#endregion
        /** Returns the X drawing position for a normalized point position. */
        normalizedXToDrawing(x) {
            return this._x + this._axisPaddingLeft + x * (this._width - this._axisPaddingLeft - this._axisPaddingRight);
        }
        /** Returns the Y drawing position for a normalized point position. */
        normalizedYToDrawing(y) {
            return this._y + this._axisPaddingTop + (1 - y) * (this._height - this._axisPaddingTop - this._axisPaddingBottom);
        }
        /** Returns the 2D drawing position for a normalized point position. */
        normalizedToDrawing(position) {
            return {
                x: this.normalizedXToDrawing(position.x),
                y: this.normalizedYToDrawing(position.y)
            };
        }
        /** Returns the normalized point position for an X drawing position. */
        drawingToNormalizedX(x) {
            return (x - this._x - this._axisPaddingLeft) / (this._width - this._axisPaddingLeft - this._axisPaddingRight);
        }
        /** Returns the normalized point position for a Y drawing position. */
        drawingToNormalizedY(y) {
            return (-y - this._y - this._axisPaddingTop) / (this._height - this._axisPaddingTop - this._axisPaddingBottom) + 1;
        }
        /** Returns the normalized point position for a 2D drawing position. */
        drawingToNormalized(position) {
            return {
                x: this.drawingToNormalizedX(position.x),
                y: this.drawingToNormalizedY(position.y)
            };
        }
        /** Returns the domain point position for a normalized X point position */
        normalizedToDomainX(x) {
            let view = this.getCurrentTransitionView();
            if (!(view instanceof ScatterView)) {
                throw "Can't map between domain and normalized coordinates without a view.";
            }
            return view.x.expand(x);
        }
        /** Returns the domain point position for a normalized Y point position */
        normalizedToDomainY(y) {
            let view = this.getCurrentTransitionView();
            if (!(view instanceof ScatterView)) {
                throw "Can't map between domain and normalized coordinates without a view.";
            }
            return view.y.expand(y);
        }
        /** Returns the domain point position for a normalized 2D point position */
        normalizedToDomain(position) {
            let view = this.getCurrentTransitionView();
            if (!(view instanceof ScatterView)) {
                throw "Can't map between domain and normalized coordinates without a view.";
            }
            return {
                x: view.x.expand(position.x),
                y: view.y.expand(position.y)
            };
        }
        /** Returns the domain point position for an X drawing position */
        drawingToDomainX(x) {
            return this.normalizedToDomainX(this.drawingToNormalizedX(x));
        }
        /** Returns the domain point position for a Y drawing position */
        drawingToDomainY(y) {
            return this.normalizedToDomainY(this.drawingToNormalizedY(y));
        }
        /** Returns the domain point position for a 2D drawing position */
        drawingToDomain(position) {
            return this.normalizedToDomain(this.drawingToNormalized(position));
        }
        /** Returns the current normalized X position of the given data point. */
        dataPointX(dataPoint) {
            if (this._currentTransition && this._currentTransition.isReady) {
                return this._currentTransition.getX(this._currentTransitionTime, dataPoint);
            }
            return this.getCurrentView().getX(dataPoint);
        }
        /** Returns the current normalized Y position of the given data point. */
        dataPointY(dataPoint) {
            if (this._currentTransition && this._currentTransition.isReady) {
                return this._currentTransition.getY(this._currentTransitionTime, dataPoint);
            }
            return this.getCurrentView().getY(dataPoint);
        }
        /**
         * Updates the last rendered dataset with the new view.
         */
        updateLastRender() {
            var _a;
            (_a = this._circles) === null || _a === void 0 ? void 0 : _a.call(this.updateCircles);
        }
        speed(value) {
            if (typeof value === 'number') {
                this._speed = value;
                this.emit('speedChange', value);
                return this;
            }
            return this._speed;
        }
        playing(value, backwards = false) {
            if (value !== undefined) {
                if (this._playing === value)
                    return this;
                this._playing = value;
                if (this._playing) {
                    this._lastFrameTime = Date.now();
                    this._playingBackwards = backwards;
                    this.playbackFrame();
                    this.emit('play');
                }
                else {
                    this._playingBackwards = false;
                    this.emit('pause');
                }
                return this;
            }
            return this._playing;
        }
        playingBackwards() {
            return this._playingBackwards;
        }
    }
    /**
     * Builds a scatterplot transition.
     */
    class ScatterplotTransitionBuilder {
        constructor(plot, type, params) {
            this.plot = plot;
            this.type = type;
            this.params = params;
            this.views = [];
        }
        toView(viewOrX, y, padding) {
            if (viewOrX instanceof ScatterView) {
                this.views.push(viewOrX);
            }
            else {
                if (!y)
                    throw new Error('Missing dimension Y');
                const xDim = viewOrX instanceof Dimension
                    ? viewOrX
                    : Dimension.fromData(viewOrX, this.plot.data(), padding);
                const yDim = y instanceof Dimension
                    ? y
                    : Dimension.fromData(y, this.plot.data(), padding);
                this.views.push(new ScatterView(xDim, yDim));
            }
            return this;
        }
        toX(x, padding) {
            const lastView = this.views[this.views.length - 1] || this.plot.view();
            const xDim = x instanceof Dimension ? x : Dimension.fromData(x, this.plot.data(), padding);
            this.views.push(new ScatterView(xDim, lastView.y));
            return this;
        }
        toY(y, padding) {
            const lastView = this.views[this.views.length - 1] || this.plot.view();
            const yDim = y instanceof Dimension ? y : Dimension.fromData(y, this.plot.data(), padding);
            this.views.push(new ScatterView(lastView.x, yDim));
            return this;
        }
        /** Adds several new stages transitioning to each of the given views. */
        toViews(views) {
            this.views.push(...views);
            return this;
        }
        /**
         * Builds and prepares the transition.
         * When done, the transition will be loaded into the owner scatterplot.
         */
        async build() {
            // typescript doesn't like this assignment for some reason
            // @ts-ignore
            this.params = this.params || {};
            // automatically provide data to transitions
            // @ts-ignore
            this.params.data = this.plot.data();
            const transition = this.plot.closestView().transitionTo(this.type, this.params, ...this.views);
            await transition.prepare();
            return this.plot.transition(transition);
        }
    }
    /**
     * Creates a new scatterplot.
     */
    function scatterplot() {
        return new Scatterplot();
    }

    const icons = {
        play: 'M6,3L22,12L6,21',
        pause: 'M4,3L10,3L10,21L4,21Z M14,3L20,3L20,21L14,21Z',
        snapLeft: 'M20,3L8,12L20,21Z M3,3L8,3L8,21L3,21Z',
        snapRight: 'M4,3L16,12L4,21Z M16,3L21,3L21,21L16,21Z',
    };
    /**
     * A slider control for scatterplot transitions.
     */
    class TimelineSlider {
        constructor() {
            this._interactive = false;
            this._playBackwards = false;
            this.plotTransitionDidChange = () => {
                var _a;
                const transition = (_a = this._plot) === null || _a === void 0 ? void 0 : _a.transition();
                if (transition) {
                    // has a transition
                    this._node.style('opacity', '1');
                    const viewCount = transition.hasMeaningfulIntermediates ? transition.views.length : 2;
                    this.renderSliderTicks(viewCount);
                    this._interactive = true;
                }
                else {
                    this._node.style('opacity', '0.5');
                    this.renderSliderTicks(0);
                    this._interactive = false;
                }
            };
            this.plotTransitionDidUpdateTime = () => {
                var _a;
                const thumbPos = ((_a = this._plot) === null || _a === void 0 ? void 0 : _a.transitionTime()) || 0;
                this._node
                    .select('.d3st-slider-thumb')
                    .style('left', `calc(calc(calc(100% - 20px) * ${thumbPos}) + 10px)`);
            };
            this.plotStartedPlaying = () => {
                this._playButtonIcon.attr('d', icons.pause);
                this.updatePlayBackwardsDisplay();
            };
            this.plotStoppedPlaying = () => {
                this._playButtonIcon.attr('d', icons.play);
                this.updatePlayBackwardsDisplay();
            };
            this.plotSpeedDidChange = () => {
                this.renderSpeed();
            };
            this.onThumbPointerDown = (e) => {
                if (!this._plot || !this._interactive)
                    return;
                e.preventDefault();
                const plot = this._plot;
                const sliderTrack = this._node.select('.d3st-slider-track').node();
                const thumb = this._node.select('.d3st-slider-thumb').node();
                thumb.setPointerCapture(e.pointerId);
                const sliderTrackRect = sliderTrack.getBoundingClientRect();
                const startPos = (e.clientX - sliderTrackRect.x) / sliderTrackRect.width;
                const startTime = plot.transitionTime();
                const onMove = (e) => {
                    e.preventDefault();
                    const newPos = (e.clientX - sliderTrackRect.x) / sliderTrackRect.width;
                    plot.transitionTime(startTime + (newPos - startPos));
                    this.snapToClosestViewIfWithinTolerance(3 / sliderTrackRect.width);
                    plot.updateLastRender();
                };
                const onUp = (e) => {
                    e.preventDefault();
                    thumb.releasePointerCapture(e.pointerId);
                    thumb.removeEventListener('pointermove', onMove);
                    thumb.removeEventListener('pointerup', onUp);
                };
                thumb.addEventListener('pointermove', onMove);
                thumb.addEventListener('pointerup', onUp);
            };
            this.speedPointerDblClickTime = 0;
            this.onSpeedPointerDown = (e) => {
                if (!this._plot)
                    return;
                e.preventDefault();
                const plot = this._plot;
                const speedSlider = this._node.select('.d3st-slider-speed').node();
                speedSlider.setPointerCapture(e.pointerId);
                const trackRect = speedSlider.getBoundingClientRect();
                const startPosScreen = e.clientX;
                const startPos = (e.clientX - trackRect.x) / trackRect.width;
                const startSpeed = plot.speed();
                let didMove = false;
                const onMove = (e) => {
                    e.preventDefault();
                    const newPos = (e.clientX - trackRect.x) / trackRect.width;
                    plot.speed(Math.max(0, startSpeed + (newPos - startPos) * 2));
                    if (Math.abs(e.clientX - startPosScreen) > 2) {
                        didMove = true;
                    }
                };
                const onUp = (e) => {
                    e.preventDefault();
                    speedSlider.releasePointerCapture(e.pointerId);
                    speedSlider.removeEventListener('pointermove', onMove);
                    speedSlider.removeEventListener('pointerup', onUp);
                    if (!didMove) {
                        const prevDownTime = this.speedPointerDblClickTime;
                        const thisDownTime = this.speedPointerDblClickTime = Date.now();
                        if (thisDownTime - prevDownTime < 400) {
                            plot.speed(1); // reset on double-click
                        }
                    }
                    else {
                        this.speedPointerDblClickTime = 0;
                    }
                };
                speedSlider.addEventListener('pointermove', onMove);
                speedSlider.addEventListener('pointerup', onUp);
            };
            this.togglePlayback = () => {
                const plot = this._plot;
                if (!plot)
                    return;
                if (plot.playing()) {
                    plot.playing(false);
                }
                else {
                    let didRewind = false;
                    if (!this._playBackwards && plot.transitionTime() === 1) {
                        // rewind
                        plot.transitionTime(0);
                        didRewind = true;
                    }
                    if (this._playBackwards && plot.transitionTime() === 0) {
                        // rewind (backwards)
                        plot.transitionTime(1);
                        didRewind = true;
                    }
                    if (didRewind) {
                        // show initial image for a bit
                        plot.updateLastRender();
                        this.plotStartedPlaying(); // pretend we're already playing
                        setTimeout(() => {
                            plot.playing(true, this._playBackwards);
                        }, 300);
                    }
                    else {
                        plot.playing(true, this._playBackwards);
                    }
                }
            };
            /** Snaps time to the previous view in the transition. */
            this.snapToPrevView = () => {
                const plot = this._plot;
                const transition = plot === null || plot === void 0 ? void 0 : plot.transition();
                if (!plot || !transition)
                    return;
                const transitionCount = transition.hasMeaningfulIntermediates ? transition.views.length - 1 : 1;
                const viewTime = plot.transitionTime() * transitionCount;
                const newTime = Math.floor(viewTime - 1e-9) / transitionCount;
                plot.transitionTime(newTime);
                plot.updateLastRender();
            };
            /** Snaps time to the next view in the transition. */
            this.snapToNextView = () => {
                const plot = this._plot;
                const transition = plot === null || plot === void 0 ? void 0 : plot.transition();
                if (!plot || !transition)
                    return;
                const transitionCount = transition.hasMeaningfulIntermediates ? transition.views.length - 1 : 1;
                const viewTime = plot.transitionTime() * transitionCount;
                const newTime = Math.ceil(viewTime + 1e-9) / transitionCount;
                plot.transitionTime(newTime);
                plot.updateLastRender();
            };
            const slider = d3Selection.create('div')
                .attr('class', 'd3st-timeline-slider')
                .style('display', 'flex')
                .style('position', 'relative')
                .style('align-items', 'center');
            const sliderButtons = slider.append('div')
                .attr('class', 'd3st-slider-buttons')
                .style('display', 'flex')
                .style('align-items', 'center')
                .style('flex-shrink', '0');
            const createButton = (button) => {
                button
                    .attr('class', 'd3st-slider-button')
                    .attr('type', 'button')
                    .style('width', '32px')
                    .style('height', '32px')
                    .style('border', 'none')
                    .style('padding', '0')
                    .style('box-sizing', 'border-box')
                    .style('display', 'inline-flex')
                    .style('justify-content', 'center')
                    .style('align-items', 'center')
                    .style('background', 'none')
                    .style('color', 'inherit')
                    .on('pointerdown', () => button.style('opacity', '0.5'))
                    .on('pointerup', () => button.style('opacity', ''));
            };
            sliderButtons.append('button')
                .call(createButton)
                .on('click', this.snapToPrevView)
                .append('svg')
                .attr('width', '24')
                .attr('height', '24')
                .append('path')
                .attr('fill', 'currentColor')
                .attr('d', icons.snapLeft);
            this._playButtonSvg = sliderButtons.append('button')
                .call(createButton)
                .on('click', this.togglePlayback)
                .append('svg')
                .style('transition', 'all 0.3s cubic-bezier(0.4, 0.3, 0, 1.5)')
                .attr('width', '24')
                .attr('height', '24');
            this._playButtonIcon = this._playButtonSvg
                .append('path')
                .attr('fill', 'currentColor')
                .attr('d', icons.play);
            window.addEventListener('keydown', e => {
                this.playBackwards(e.altKey);
            });
            window.addEventListener('keyup', e => {
                this.playBackwards(e.altKey);
            });
            sliderButtons.append('button')
                .call(createButton)
                .on('click', this.snapToNextView)
                .append('svg')
                .attr('width', '24')
                .attr('height', '24')
                .append('path')
                .attr('fill', 'currentColor')
                .attr('d', icons.snapRight);
            const sliderTrack = slider.append('div')
                .attr('class', 'd3st-slider-track')
                .style('position', 'relative')
                .style('flex', '1')
                .style('height', '20px');
            sliderTrack.append('div')
                .attr('class', 'd3st-slider-rail')
                .style('position', 'absolute')
                .style('top', '50%')
                .style('left', '10px')
                .style('right', '10px')
                .style('margin-top', '-1px')
                .style('height', '2px')
                .style('background', 'currentColor');
            sliderTrack.append('div')
                .attr('class', 'd3st-slider-ticks');
            sliderTrack.append('div')
                .attr('class', 'd3st-slider-thumb')
                .style('position', 'absolute')
                .style('width', '20px')
                .style('height', '20px')
                .style('margin-left', '-10px')
                .style('border-radius', '10px')
                .style('background', 'currentColor')
                .on('pointerdown', this.onThumbPointerDown);
            const speedSlider = slider.append('div')
                .attr('class', 'd3st-slider-speed')
                .style('position', 'relative')
                .style('width', '100px')
                .style('height', '22px')
                .style('background', 'rgba(0, 0, 0, 0.1)')
                .style('clip-path', 'polygon(0 80%, 100% 0, 100% 100%, 0 100%)')
                .style('cursor', 'ew-resize')
                .on('pointerdown', this.onSpeedPointerDown);
            speedSlider.append('div')
                .attr('class', 'd3st-slider-speed-value')
                .style('position', 'absolute')
                .style('width', '100%')
                .style('height', '100%')
                .style('transform-origin', '0 0')
                .style('background', 'rgba(0, 0, 0, 0.2)');
            speedSlider.append('div')
                .attr('class', 'd3st-slider-speed-label')
                .style('position', 'absolute')
                .style('right', '8px')
                .style('bottom', '2px')
                .style('pointer-events', 'none')
                .style('font', '10px sans-serif');
            this._node = slider;
        }
        renderSliderTicks(viewCount) {
            const sliderTicks = [];
            for (let i = 0; i < viewCount; i++)
                sliderTicks.push(i / (viewCount - 1));
            this._node.select('.d3st-slider-ticks')
                .selectAll('.d3st-slider-tick')
                .data(sliderTicks)
                .style('left', d => `calc(calc(${d} * calc(100% - 20px)) + 10px)`)
                .call(sel => sel.exit().remove())
                .enter()
                .append('div')
                .attr('class', 'd3st-slider-tick')
                .style('position', 'absolute')
                .style('width', '2px')
                .style('height', '18px')
                .style('left', d => `calc(calc(${d} * calc(100% - 20px)) + 10px)`)
                .style('margin-left', '-1px')
                .style('background', 'currentColor');
        }
        renderSpeed() {
            if (!this._plot)
                return;
            const speed = this._plot.speed();
            this._node.select('.d3st-slider-speed-value')
                .style('transform', `scaleX(${speed / 2})`);
            this._node.select('.d3st-slider-speed-label')
                .text(`speed: ${Math.round(speed * 100) / 100}/s`);
        }
        /**
         * Connects this slider to a scatterplot.
         * Will disconnect from any previously connected scatterplot, if applicable.
         * @param plot the scatterplot
         */
        connect(plot) {
            this.disconnect();
            this._plot = plot;
            this._plot.on('transitionChange', this.plotTransitionDidChange);
            this._plot.on('play', this.plotStartedPlaying);
            this._plot.on('pause', this.plotStoppedPlaying);
            this._plot.on('transitionTimeUpdate', this.plotTransitionDidUpdateTime);
            this._plot.on('speedChange', this.plotSpeedDidChange);
            this.plotTransitionDidChange();
            this.plotTransitionDidUpdateTime();
            this.plotSpeedDidChange();
            return this;
        }
        /** Disconnects this slider from any currently connected scatterplot. */
        disconnect() {
            if (this._plot) {
                this._plot.removeListener('transitionChange', this.plotTransitionDidChange);
                this._plot.removeListener('transitionTimeUpdate', this.plotTransitionDidUpdateTime);
                this._plot.removeListener('play', this.plotStartedPlaying);
                this._plot.removeListener('pause', this.plotStoppedPlaying);
                this._plot.removeListener('speedChange', this.plotSpeedDidChange);
                this._plot = undefined;
            }
            return this;
        }
        /** Returns this slider's node. */
        node() {
            return this._node.node();
        }
        updatePlayBackwardsDisplay() {
            const plot = this._plot;
            if (!plot)
                return;
            if (plot.playing() ? plot.playingBackwards() : this._playBackwards) {
                this._playButtonSvg.style('transform', 'rotate(-180deg)');
            }
            else {
                this._playButtonSvg.style('transform', '');
            }
        }
        playBackwards(value) {
            if (value !== undefined) {
                this._playBackwards = value;
                this.updatePlayBackwardsDisplay();
                return this;
            }
            return this._playBackwards;
        }
        /** Snaps time to the closest view if time is within the given tolernace. */
        snapToClosestViewIfWithinTolerance(tolerance) {
            const plot = this._plot;
            const transition = plot === null || plot === void 0 ? void 0 : plot.transition();
            if (!plot || !transition)
                return;
            const transitionCount = transition.hasMeaningfulIntermediates ? transition.views.length - 1 : 1;
            const viewTime = plot.transitionTime() * transitionCount;
            const closestView = Math.round(viewTime);
            if (Math.abs(viewTime - closestView) <= tolerance * transitionCount) {
                plot.transitionTime(closestView / transitionCount);
                plot.updateLastRender();
            }
        }
    }
    function timelineSlider() {
        return new TimelineSlider();
    }

    var global$1 = (typeof global !== "undefined" ? global :
      typeof self !== "undefined" ? self :
      typeof window !== "undefined" ? window : {});

    var lookup = [];
    var revLookup = [];
    var Arr = typeof Uint8Array !== 'undefined' ? Uint8Array : Array;
    var inited = false;
    function init () {
      inited = true;
      var code = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/';
      for (var i = 0, len = code.length; i < len; ++i) {
        lookup[i] = code[i];
        revLookup[code.charCodeAt(i)] = i;
      }

      revLookup['-'.charCodeAt(0)] = 62;
      revLookup['_'.charCodeAt(0)] = 63;
    }

    function toByteArray (b64) {
      if (!inited) {
        init();
      }
      var i, j, l, tmp, placeHolders, arr;
      var len = b64.length;

      if (len % 4 > 0) {
        throw new Error('Invalid string. Length must be a multiple of 4')
      }

      // the number of equal signs (place holders)
      // if there are two placeholders, than the two characters before it
      // represent one byte
      // if there is only one, then the three characters before it represent 2 bytes
      // this is just a cheap hack to not do indexOf twice
      placeHolders = b64[len - 2] === '=' ? 2 : b64[len - 1] === '=' ? 1 : 0;

      // base64 is 4/3 + up to two characters of the original data
      arr = new Arr(len * 3 / 4 - placeHolders);

      // if there are placeholders, only get up to the last complete 4 chars
      l = placeHolders > 0 ? len - 4 : len;

      var L = 0;

      for (i = 0, j = 0; i < l; i += 4, j += 3) {
        tmp = (revLookup[b64.charCodeAt(i)] << 18) | (revLookup[b64.charCodeAt(i + 1)] << 12) | (revLookup[b64.charCodeAt(i + 2)] << 6) | revLookup[b64.charCodeAt(i + 3)];
        arr[L++] = (tmp >> 16) & 0xFF;
        arr[L++] = (tmp >> 8) & 0xFF;
        arr[L++] = tmp & 0xFF;
      }

      if (placeHolders === 2) {
        tmp = (revLookup[b64.charCodeAt(i)] << 2) | (revLookup[b64.charCodeAt(i + 1)] >> 4);
        arr[L++] = tmp & 0xFF;
      } else if (placeHolders === 1) {
        tmp = (revLookup[b64.charCodeAt(i)] << 10) | (revLookup[b64.charCodeAt(i + 1)] << 4) | (revLookup[b64.charCodeAt(i + 2)] >> 2);
        arr[L++] = (tmp >> 8) & 0xFF;
        arr[L++] = tmp & 0xFF;
      }

      return arr
    }

    function tripletToBase64 (num) {
      return lookup[num >> 18 & 0x3F] + lookup[num >> 12 & 0x3F] + lookup[num >> 6 & 0x3F] + lookup[num & 0x3F]
    }

    function encodeChunk (uint8, start, end) {
      var tmp;
      var output = [];
      for (var i = start; i < end; i += 3) {
        tmp = (uint8[i] << 16) + (uint8[i + 1] << 8) + (uint8[i + 2]);
        output.push(tripletToBase64(tmp));
      }
      return output.join('')
    }

    function fromByteArray (uint8) {
      if (!inited) {
        init();
      }
      var tmp;
      var len = uint8.length;
      var extraBytes = len % 3; // if we have 1 byte left, pad 2 bytes
      var output = '';
      var parts = [];
      var maxChunkLength = 16383; // must be multiple of 3

      // go through the array every three bytes, we'll deal with trailing stuff later
      for (var i = 0, len2 = len - extraBytes; i < len2; i += maxChunkLength) {
        parts.push(encodeChunk(uint8, i, (i + maxChunkLength) > len2 ? len2 : (i + maxChunkLength)));
      }

      // pad the end with zeros, but make sure to not forget the extra bytes
      if (extraBytes === 1) {
        tmp = uint8[len - 1];
        output += lookup[tmp >> 2];
        output += lookup[(tmp << 4) & 0x3F];
        output += '==';
      } else if (extraBytes === 2) {
        tmp = (uint8[len - 2] << 8) + (uint8[len - 1]);
        output += lookup[tmp >> 10];
        output += lookup[(tmp >> 4) & 0x3F];
        output += lookup[(tmp << 2) & 0x3F];
        output += '=';
      }

      parts.push(output);

      return parts.join('')
    }

    function read (buffer, offset, isLE, mLen, nBytes) {
      var e, m;
      var eLen = nBytes * 8 - mLen - 1;
      var eMax = (1 << eLen) - 1;
      var eBias = eMax >> 1;
      var nBits = -7;
      var i = isLE ? (nBytes - 1) : 0;
      var d = isLE ? -1 : 1;
      var s = buffer[offset + i];

      i += d;

      e = s & ((1 << (-nBits)) - 1);
      s >>= (-nBits);
      nBits += eLen;
      for (; nBits > 0; e = e * 256 + buffer[offset + i], i += d, nBits -= 8) {}

      m = e & ((1 << (-nBits)) - 1);
      e >>= (-nBits);
      nBits += mLen;
      for (; nBits > 0; m = m * 256 + buffer[offset + i], i += d, nBits -= 8) {}

      if (e === 0) {
        e = 1 - eBias;
      } else if (e === eMax) {
        return m ? NaN : ((s ? -1 : 1) * Infinity)
      } else {
        m = m + Math.pow(2, mLen);
        e = e - eBias;
      }
      return (s ? -1 : 1) * m * Math.pow(2, e - mLen)
    }

    function write (buffer, value, offset, isLE, mLen, nBytes) {
      var e, m, c;
      var eLen = nBytes * 8 - mLen - 1;
      var eMax = (1 << eLen) - 1;
      var eBias = eMax >> 1;
      var rt = (mLen === 23 ? Math.pow(2, -24) - Math.pow(2, -77) : 0);
      var i = isLE ? 0 : (nBytes - 1);
      var d = isLE ? 1 : -1;
      var s = value < 0 || (value === 0 && 1 / value < 0) ? 1 : 0;

      value = Math.abs(value);

      if (isNaN(value) || value === Infinity) {
        m = isNaN(value) ? 1 : 0;
        e = eMax;
      } else {
        e = Math.floor(Math.log(value) / Math.LN2);
        if (value * (c = Math.pow(2, -e)) < 1) {
          e--;
          c *= 2;
        }
        if (e + eBias >= 1) {
          value += rt / c;
        } else {
          value += rt * Math.pow(2, 1 - eBias);
        }
        if (value * c >= 2) {
          e++;
          c /= 2;
        }

        if (e + eBias >= eMax) {
          m = 0;
          e = eMax;
        } else if (e + eBias >= 1) {
          m = (value * c - 1) * Math.pow(2, mLen);
          e = e + eBias;
        } else {
          m = value * Math.pow(2, eBias - 1) * Math.pow(2, mLen);
          e = 0;
        }
      }

      for (; mLen >= 8; buffer[offset + i] = m & 0xff, i += d, m /= 256, mLen -= 8) {}

      e = (e << mLen) | m;
      eLen += mLen;
      for (; eLen > 0; buffer[offset + i] = e & 0xff, i += d, e /= 256, eLen -= 8) {}

      buffer[offset + i - d] |= s * 128;
    }

    var toString = {}.toString;

    var isArray$1 = Array.isArray || function (arr) {
      return toString.call(arr) == '[object Array]';
    };

    /*!
     * The buffer module from node.js, for the browser.
     *
     * @author   Feross Aboukhadijeh <feross@feross.org> <http://feross.org>
     * @license  MIT
     */

    var INSPECT_MAX_BYTES = 50;

    /**
     * If `Buffer.TYPED_ARRAY_SUPPORT`:
     *   === true    Use Uint8Array implementation (fastest)
     *   === false   Use Object implementation (most compatible, even IE6)
     *
     * Browsers that support typed arrays are IE 10+, Firefox 4+, Chrome 7+, Safari 5.1+,
     * Opera 11.6+, iOS 4.2+.
     *
     * Due to various browser bugs, sometimes the Object implementation will be used even
     * when the browser supports typed arrays.
     *
     * Note:
     *
     *   - Firefox 4-29 lacks support for adding new properties to `Uint8Array` instances,
     *     See: https://bugzilla.mozilla.org/show_bug.cgi?id=695438.
     *
     *   - Chrome 9-10 is missing the `TypedArray.prototype.subarray` function.
     *
     *   - IE10 has a broken `TypedArray.prototype.subarray` function which returns arrays of
     *     incorrect length in some situations.

     * We detect these buggy browsers and set `Buffer.TYPED_ARRAY_SUPPORT` to `false` so they
     * get the Object implementation, which is slower but behaves correctly.
     */
    Buffer$1.TYPED_ARRAY_SUPPORT = global$1.TYPED_ARRAY_SUPPORT !== undefined
      ? global$1.TYPED_ARRAY_SUPPORT
      : true;

    function kMaxLength () {
      return Buffer$1.TYPED_ARRAY_SUPPORT
        ? 0x7fffffff
        : 0x3fffffff
    }

    function createBuffer (that, length) {
      if (kMaxLength() < length) {
        throw new RangeError('Invalid typed array length')
      }
      if (Buffer$1.TYPED_ARRAY_SUPPORT) {
        // Return an augmented `Uint8Array` instance, for best performance
        that = new Uint8Array(length);
        that.__proto__ = Buffer$1.prototype;
      } else {
        // Fallback: Return an object instance of the Buffer class
        if (that === null) {
          that = new Buffer$1(length);
        }
        that.length = length;
      }

      return that
    }

    /**
     * The Buffer constructor returns instances of `Uint8Array` that have their
     * prototype changed to `Buffer.prototype`. Furthermore, `Buffer` is a subclass of
     * `Uint8Array`, so the returned instances will have all the node `Buffer` methods
     * and the `Uint8Array` methods. Square bracket notation works as expected -- it
     * returns a single octet.
     *
     * The `Uint8Array` prototype remains unmodified.
     */

    function Buffer$1 (arg, encodingOrOffset, length) {
      if (!Buffer$1.TYPED_ARRAY_SUPPORT && !(this instanceof Buffer$1)) {
        return new Buffer$1(arg, encodingOrOffset, length)
      }

      // Common case.
      if (typeof arg === 'number') {
        if (typeof encodingOrOffset === 'string') {
          throw new Error(
            'If encoding is specified then the first argument must be a string'
          )
        }
        return allocUnsafe(this, arg)
      }
      return from(this, arg, encodingOrOffset, length)
    }

    Buffer$1.poolSize = 8192; // not used by this implementation

    // TODO: Legacy, not needed anymore. Remove in next major version.
    Buffer$1._augment = function (arr) {
      arr.__proto__ = Buffer$1.prototype;
      return arr
    };

    function from (that, value, encodingOrOffset, length) {
      if (typeof value === 'number') {
        throw new TypeError('"value" argument must not be a number')
      }

      if (typeof ArrayBuffer !== 'undefined' && value instanceof ArrayBuffer) {
        return fromArrayBuffer(that, value, encodingOrOffset, length)
      }

      if (typeof value === 'string') {
        return fromString(that, value, encodingOrOffset)
      }

      return fromObject(that, value)
    }

    /**
     * Functionally equivalent to Buffer(arg, encoding) but throws a TypeError
     * if value is a number.
     * Buffer.from(str[, encoding])
     * Buffer.from(array)
     * Buffer.from(buffer)
     * Buffer.from(arrayBuffer[, byteOffset[, length]])
     **/
    Buffer$1.from = function (value, encodingOrOffset, length) {
      return from(null, value, encodingOrOffset, length)
    };

    if (Buffer$1.TYPED_ARRAY_SUPPORT) {
      Buffer$1.prototype.__proto__ = Uint8Array.prototype;
      Buffer$1.__proto__ = Uint8Array;
    }

    function assertSize (size) {
      if (typeof size !== 'number') {
        throw new TypeError('"size" argument must be a number')
      } else if (size < 0) {
        throw new RangeError('"size" argument must not be negative')
      }
    }

    function alloc (that, size, fill, encoding) {
      assertSize(size);
      if (size <= 0) {
        return createBuffer(that, size)
      }
      if (fill !== undefined) {
        // Only pay attention to encoding if it's a string. This
        // prevents accidentally sending in a number that would
        // be interpretted as a start offset.
        return typeof encoding === 'string'
          ? createBuffer(that, size).fill(fill, encoding)
          : createBuffer(that, size).fill(fill)
      }
      return createBuffer(that, size)
    }

    /**
     * Creates a new filled Buffer instance.
     * alloc(size[, fill[, encoding]])
     **/
    Buffer$1.alloc = function (size, fill, encoding) {
      return alloc(null, size, fill, encoding)
    };

    function allocUnsafe (that, size) {
      assertSize(size);
      that = createBuffer(that, size < 0 ? 0 : checked(size) | 0);
      if (!Buffer$1.TYPED_ARRAY_SUPPORT) {
        for (var i = 0; i < size; ++i) {
          that[i] = 0;
        }
      }
      return that
    }

    /**
     * Equivalent to Buffer(num), by default creates a non-zero-filled Buffer instance.
     * */
    Buffer$1.allocUnsafe = function (size) {
      return allocUnsafe(null, size)
    };
    /**
     * Equivalent to SlowBuffer(num), by default creates a non-zero-filled Buffer instance.
     */
    Buffer$1.allocUnsafeSlow = function (size) {
      return allocUnsafe(null, size)
    };

    function fromString (that, string, encoding) {
      if (typeof encoding !== 'string' || encoding === '') {
        encoding = 'utf8';
      }

      if (!Buffer$1.isEncoding(encoding)) {
        throw new TypeError('"encoding" must be a valid string encoding')
      }

      var length = byteLength(string, encoding) | 0;
      that = createBuffer(that, length);

      var actual = that.write(string, encoding);

      if (actual !== length) {
        // Writing a hex string, for example, that contains invalid characters will
        // cause everything after the first invalid character to be ignored. (e.g.
        // 'abxxcd' will be treated as 'ab')
        that = that.slice(0, actual);
      }

      return that
    }

    function fromArrayLike (that, array) {
      var length = array.length < 0 ? 0 : checked(array.length) | 0;
      that = createBuffer(that, length);
      for (var i = 0; i < length; i += 1) {
        that[i] = array[i] & 255;
      }
      return that
    }

    function fromArrayBuffer (that, array, byteOffset, length) {
      array.byteLength; // this throws if `array` is not a valid ArrayBuffer

      if (byteOffset < 0 || array.byteLength < byteOffset) {
        throw new RangeError('\'offset\' is out of bounds')
      }

      if (array.byteLength < byteOffset + (length || 0)) {
        throw new RangeError('\'length\' is out of bounds')
      }

      if (byteOffset === undefined && length === undefined) {
        array = new Uint8Array(array);
      } else if (length === undefined) {
        array = new Uint8Array(array, byteOffset);
      } else {
        array = new Uint8Array(array, byteOffset, length);
      }

      if (Buffer$1.TYPED_ARRAY_SUPPORT) {
        // Return an augmented `Uint8Array` instance, for best performance
        that = array;
        that.__proto__ = Buffer$1.prototype;
      } else {
        // Fallback: Return an object instance of the Buffer class
        that = fromArrayLike(that, array);
      }
      return that
    }

    function fromObject (that, obj) {
      if (internalIsBuffer(obj)) {
        var len = checked(obj.length) | 0;
        that = createBuffer(that, len);

        if (that.length === 0) {
          return that
        }

        obj.copy(that, 0, 0, len);
        return that
      }

      if (obj) {
        if ((typeof ArrayBuffer !== 'undefined' &&
            obj.buffer instanceof ArrayBuffer) || 'length' in obj) {
          if (typeof obj.length !== 'number' || isnan(obj.length)) {
            return createBuffer(that, 0)
          }
          return fromArrayLike(that, obj)
        }

        if (obj.type === 'Buffer' && isArray$1(obj.data)) {
          return fromArrayLike(that, obj.data)
        }
      }

      throw new TypeError('First argument must be a string, Buffer, ArrayBuffer, Array, or array-like object.')
    }

    function checked (length) {
      // Note: cannot use `length < kMaxLength()` here because that fails when
      // length is NaN (which is otherwise coerced to zero.)
      if (length >= kMaxLength()) {
        throw new RangeError('Attempt to allocate Buffer larger than maximum ' +
                             'size: 0x' + kMaxLength().toString(16) + ' bytes')
      }
      return length | 0
    }
    Buffer$1.isBuffer = isBuffer$1;
    function internalIsBuffer (b) {
      return !!(b != null && b._isBuffer)
    }

    Buffer$1.compare = function compare (a, b) {
      if (!internalIsBuffer(a) || !internalIsBuffer(b)) {
        throw new TypeError('Arguments must be Buffers')
      }

      if (a === b) return 0

      var x = a.length;
      var y = b.length;

      for (var i = 0, len = Math.min(x, y); i < len; ++i) {
        if (a[i] !== b[i]) {
          x = a[i];
          y = b[i];
          break
        }
      }

      if (x < y) return -1
      if (y < x) return 1
      return 0
    };

    Buffer$1.isEncoding = function isEncoding (encoding) {
      switch (String(encoding).toLowerCase()) {
        case 'hex':
        case 'utf8':
        case 'utf-8':
        case 'ascii':
        case 'latin1':
        case 'binary':
        case 'base64':
        case 'ucs2':
        case 'ucs-2':
        case 'utf16le':
        case 'utf-16le':
          return true
        default:
          return false
      }
    };

    Buffer$1.concat = function concat (list, length) {
      if (!isArray$1(list)) {
        throw new TypeError('"list" argument must be an Array of Buffers')
      }

      if (list.length === 0) {
        return Buffer$1.alloc(0)
      }

      var i;
      if (length === undefined) {
        length = 0;
        for (i = 0; i < list.length; ++i) {
          length += list[i].length;
        }
      }

      var buffer = Buffer$1.allocUnsafe(length);
      var pos = 0;
      for (i = 0; i < list.length; ++i) {
        var buf = list[i];
        if (!internalIsBuffer(buf)) {
          throw new TypeError('"list" argument must be an Array of Buffers')
        }
        buf.copy(buffer, pos);
        pos += buf.length;
      }
      return buffer
    };

    function byteLength (string, encoding) {
      if (internalIsBuffer(string)) {
        return string.length
      }
      if (typeof ArrayBuffer !== 'undefined' && typeof ArrayBuffer.isView === 'function' &&
          (ArrayBuffer.isView(string) || string instanceof ArrayBuffer)) {
        return string.byteLength
      }
      if (typeof string !== 'string') {
        string = '' + string;
      }

      var len = string.length;
      if (len === 0) return 0

      // Use a for loop to avoid recursion
      var loweredCase = false;
      for (;;) {
        switch (encoding) {
          case 'ascii':
          case 'latin1':
          case 'binary':
            return len
          case 'utf8':
          case 'utf-8':
          case undefined:
            return utf8ToBytes(string).length
          case 'ucs2':
          case 'ucs-2':
          case 'utf16le':
          case 'utf-16le':
            return len * 2
          case 'hex':
            return len >>> 1
          case 'base64':
            return base64ToBytes(string).length
          default:
            if (loweredCase) return utf8ToBytes(string).length // assume utf8
            encoding = ('' + encoding).toLowerCase();
            loweredCase = true;
        }
      }
    }
    Buffer$1.byteLength = byteLength;

    function slowToString (encoding, start, end) {
      var loweredCase = false;

      // No need to verify that "this.length <= MAX_UINT32" since it's a read-only
      // property of a typed array.

      // This behaves neither like String nor Uint8Array in that we set start/end
      // to their upper/lower bounds if the value passed is out of range.
      // undefined is handled specially as per ECMA-262 6th Edition,
      // Section 13.3.3.7 Runtime Semantics: KeyedBindingInitialization.
      if (start === undefined || start < 0) {
        start = 0;
      }
      // Return early if start > this.length. Done here to prevent potential uint32
      // coercion fail below.
      if (start > this.length) {
        return ''
      }

      if (end === undefined || end > this.length) {
        end = this.length;
      }

      if (end <= 0) {
        return ''
      }

      // Force coersion to uint32. This will also coerce falsey/NaN values to 0.
      end >>>= 0;
      start >>>= 0;

      if (end <= start) {
        return ''
      }

      if (!encoding) encoding = 'utf8';

      while (true) {
        switch (encoding) {
          case 'hex':
            return hexSlice(this, start, end)

          case 'utf8':
          case 'utf-8':
            return utf8Slice(this, start, end)

          case 'ascii':
            return asciiSlice(this, start, end)

          case 'latin1':
          case 'binary':
            return latin1Slice(this, start, end)

          case 'base64':
            return base64Slice(this, start, end)

          case 'ucs2':
          case 'ucs-2':
          case 'utf16le':
          case 'utf-16le':
            return utf16leSlice(this, start, end)

          default:
            if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)
            encoding = (encoding + '').toLowerCase();
            loweredCase = true;
        }
      }
    }

    // The property is used by `Buffer.isBuffer` and `is-buffer` (in Safari 5-7) to detect
    // Buffer instances.
    Buffer$1.prototype._isBuffer = true;

    function swap (b, n, m) {
      var i = b[n];
      b[n] = b[m];
      b[m] = i;
    }

    Buffer$1.prototype.swap16 = function swap16 () {
      var len = this.length;
      if (len % 2 !== 0) {
        throw new RangeError('Buffer size must be a multiple of 16-bits')
      }
      for (var i = 0; i < len; i += 2) {
        swap(this, i, i + 1);
      }
      return this
    };

    Buffer$1.prototype.swap32 = function swap32 () {
      var len = this.length;
      if (len % 4 !== 0) {
        throw new RangeError('Buffer size must be a multiple of 32-bits')
      }
      for (var i = 0; i < len; i += 4) {
        swap(this, i, i + 3);
        swap(this, i + 1, i + 2);
      }
      return this
    };

    Buffer$1.prototype.swap64 = function swap64 () {
      var len = this.length;
      if (len % 8 !== 0) {
        throw new RangeError('Buffer size must be a multiple of 64-bits')
      }
      for (var i = 0; i < len; i += 8) {
        swap(this, i, i + 7);
        swap(this, i + 1, i + 6);
        swap(this, i + 2, i + 5);
        swap(this, i + 3, i + 4);
      }
      return this
    };

    Buffer$1.prototype.toString = function toString () {
      var length = this.length | 0;
      if (length === 0) return ''
      if (arguments.length === 0) return utf8Slice(this, 0, length)
      return slowToString.apply(this, arguments)
    };

    Buffer$1.prototype.equals = function equals (b) {
      if (!internalIsBuffer(b)) throw new TypeError('Argument must be a Buffer')
      if (this === b) return true
      return Buffer$1.compare(this, b) === 0
    };

    Buffer$1.prototype.inspect = function inspect () {
      var str = '';
      var max = INSPECT_MAX_BYTES;
      if (this.length > 0) {
        str = this.toString('hex', 0, max).match(/.{2}/g).join(' ');
        if (this.length > max) str += ' ... ';
      }
      return '<Buffer ' + str + '>'
    };

    Buffer$1.prototype.compare = function compare (target, start, end, thisStart, thisEnd) {
      if (!internalIsBuffer(target)) {
        throw new TypeError('Argument must be a Buffer')
      }

      if (start === undefined) {
        start = 0;
      }
      if (end === undefined) {
        end = target ? target.length : 0;
      }
      if (thisStart === undefined) {
        thisStart = 0;
      }
      if (thisEnd === undefined) {
        thisEnd = this.length;
      }

      if (start < 0 || end > target.length || thisStart < 0 || thisEnd > this.length) {
        throw new RangeError('out of range index')
      }

      if (thisStart >= thisEnd && start >= end) {
        return 0
      }
      if (thisStart >= thisEnd) {
        return -1
      }
      if (start >= end) {
        return 1
      }

      start >>>= 0;
      end >>>= 0;
      thisStart >>>= 0;
      thisEnd >>>= 0;

      if (this === target) return 0

      var x = thisEnd - thisStart;
      var y = end - start;
      var len = Math.min(x, y);

      var thisCopy = this.slice(thisStart, thisEnd);
      var targetCopy = target.slice(start, end);

      for (var i = 0; i < len; ++i) {
        if (thisCopy[i] !== targetCopy[i]) {
          x = thisCopy[i];
          y = targetCopy[i];
          break
        }
      }

      if (x < y) return -1
      if (y < x) return 1
      return 0
    };

    // Finds either the first index of `val` in `buffer` at offset >= `byteOffset`,
    // OR the last index of `val` in `buffer` at offset <= `byteOffset`.
    //
    // Arguments:
    // - buffer - a Buffer to search
    // - val - a string, Buffer, or number
    // - byteOffset - an index into `buffer`; will be clamped to an int32
    // - encoding - an optional encoding, relevant is val is a string
    // - dir - true for indexOf, false for lastIndexOf
    function bidirectionalIndexOf (buffer, val, byteOffset, encoding, dir) {
      // Empty buffer means no match
      if (buffer.length === 0) return -1

      // Normalize byteOffset
      if (typeof byteOffset === 'string') {
        encoding = byteOffset;
        byteOffset = 0;
      } else if (byteOffset > 0x7fffffff) {
        byteOffset = 0x7fffffff;
      } else if (byteOffset < -0x80000000) {
        byteOffset = -0x80000000;
      }
      byteOffset = +byteOffset;  // Coerce to Number.
      if (isNaN(byteOffset)) {
        // byteOffset: it it's undefined, null, NaN, "foo", etc, search whole buffer
        byteOffset = dir ? 0 : (buffer.length - 1);
      }

      // Normalize byteOffset: negative offsets start from the end of the buffer
      if (byteOffset < 0) byteOffset = buffer.length + byteOffset;
      if (byteOffset >= buffer.length) {
        if (dir) return -1
        else byteOffset = buffer.length - 1;
      } else if (byteOffset < 0) {
        if (dir) byteOffset = 0;
        else return -1
      }

      // Normalize val
      if (typeof val === 'string') {
        val = Buffer$1.from(val, encoding);
      }

      // Finally, search either indexOf (if dir is true) or lastIndexOf
      if (internalIsBuffer(val)) {
        // Special case: looking for empty string/buffer always fails
        if (val.length === 0) {
          return -1
        }
        return arrayIndexOf(buffer, val, byteOffset, encoding, dir)
      } else if (typeof val === 'number') {
        val = val & 0xFF; // Search for a byte value [0-255]
        if (Buffer$1.TYPED_ARRAY_SUPPORT &&
            typeof Uint8Array.prototype.indexOf === 'function') {
          if (dir) {
            return Uint8Array.prototype.indexOf.call(buffer, val, byteOffset)
          } else {
            return Uint8Array.prototype.lastIndexOf.call(buffer, val, byteOffset)
          }
        }
        return arrayIndexOf(buffer, [ val ], byteOffset, encoding, dir)
      }

      throw new TypeError('val must be string, number or Buffer')
    }

    function arrayIndexOf (arr, val, byteOffset, encoding, dir) {
      var indexSize = 1;
      var arrLength = arr.length;
      var valLength = val.length;

      if (encoding !== undefined) {
        encoding = String(encoding).toLowerCase();
        if (encoding === 'ucs2' || encoding === 'ucs-2' ||
            encoding === 'utf16le' || encoding === 'utf-16le') {
          if (arr.length < 2 || val.length < 2) {
            return -1
          }
          indexSize = 2;
          arrLength /= 2;
          valLength /= 2;
          byteOffset /= 2;
        }
      }

      function read (buf, i) {
        if (indexSize === 1) {
          return buf[i]
        } else {
          return buf.readUInt16BE(i * indexSize)
        }
      }

      var i;
      if (dir) {
        var foundIndex = -1;
        for (i = byteOffset; i < arrLength; i++) {
          if (read(arr, i) === read(val, foundIndex === -1 ? 0 : i - foundIndex)) {
            if (foundIndex === -1) foundIndex = i;
            if (i - foundIndex + 1 === valLength) return foundIndex * indexSize
          } else {
            if (foundIndex !== -1) i -= i - foundIndex;
            foundIndex = -1;
          }
        }
      } else {
        if (byteOffset + valLength > arrLength) byteOffset = arrLength - valLength;
        for (i = byteOffset; i >= 0; i--) {
          var found = true;
          for (var j = 0; j < valLength; j++) {
            if (read(arr, i + j) !== read(val, j)) {
              found = false;
              break
            }
          }
          if (found) return i
        }
      }

      return -1
    }

    Buffer$1.prototype.includes = function includes (val, byteOffset, encoding) {
      return this.indexOf(val, byteOffset, encoding) !== -1
    };

    Buffer$1.prototype.indexOf = function indexOf (val, byteOffset, encoding) {
      return bidirectionalIndexOf(this, val, byteOffset, encoding, true)
    };

    Buffer$1.prototype.lastIndexOf = function lastIndexOf (val, byteOffset, encoding) {
      return bidirectionalIndexOf(this, val, byteOffset, encoding, false)
    };

    function hexWrite (buf, string, offset, length) {
      offset = Number(offset) || 0;
      var remaining = buf.length - offset;
      if (!length) {
        length = remaining;
      } else {
        length = Number(length);
        if (length > remaining) {
          length = remaining;
        }
      }

      // must be an even number of digits
      var strLen = string.length;
      if (strLen % 2 !== 0) throw new TypeError('Invalid hex string')

      if (length > strLen / 2) {
        length = strLen / 2;
      }
      for (var i = 0; i < length; ++i) {
        var parsed = parseInt(string.substr(i * 2, 2), 16);
        if (isNaN(parsed)) return i
        buf[offset + i] = parsed;
      }
      return i
    }

    function utf8Write (buf, string, offset, length) {
      return blitBuffer(utf8ToBytes(string, buf.length - offset), buf, offset, length)
    }

    function asciiWrite (buf, string, offset, length) {
      return blitBuffer(asciiToBytes(string), buf, offset, length)
    }

    function latin1Write (buf, string, offset, length) {
      return asciiWrite(buf, string, offset, length)
    }

    function base64Write (buf, string, offset, length) {
      return blitBuffer(base64ToBytes(string), buf, offset, length)
    }

    function ucs2Write (buf, string, offset, length) {
      return blitBuffer(utf16leToBytes(string, buf.length - offset), buf, offset, length)
    }

    Buffer$1.prototype.write = function write (string, offset, length, encoding) {
      // Buffer#write(string)
      if (offset === undefined) {
        encoding = 'utf8';
        length = this.length;
        offset = 0;
      // Buffer#write(string, encoding)
      } else if (length === undefined && typeof offset === 'string') {
        encoding = offset;
        length = this.length;
        offset = 0;
      // Buffer#write(string, offset[, length][, encoding])
      } else if (isFinite(offset)) {
        offset = offset | 0;
        if (isFinite(length)) {
          length = length | 0;
          if (encoding === undefined) encoding = 'utf8';
        } else {
          encoding = length;
          length = undefined;
        }
      // legacy write(string, encoding, offset, length) - remove in v0.13
      } else {
        throw new Error(
          'Buffer.write(string, encoding, offset[, length]) is no longer supported'
        )
      }

      var remaining = this.length - offset;
      if (length === undefined || length > remaining) length = remaining;

      if ((string.length > 0 && (length < 0 || offset < 0)) || offset > this.length) {
        throw new RangeError('Attempt to write outside buffer bounds')
      }

      if (!encoding) encoding = 'utf8';

      var loweredCase = false;
      for (;;) {
        switch (encoding) {
          case 'hex':
            return hexWrite(this, string, offset, length)

          case 'utf8':
          case 'utf-8':
            return utf8Write(this, string, offset, length)

          case 'ascii':
            return asciiWrite(this, string, offset, length)

          case 'latin1':
          case 'binary':
            return latin1Write(this, string, offset, length)

          case 'base64':
            // Warning: maxLength not taken into account in base64Write
            return base64Write(this, string, offset, length)

          case 'ucs2':
          case 'ucs-2':
          case 'utf16le':
          case 'utf-16le':
            return ucs2Write(this, string, offset, length)

          default:
            if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)
            encoding = ('' + encoding).toLowerCase();
            loweredCase = true;
        }
      }
    };

    Buffer$1.prototype.toJSON = function toJSON () {
      return {
        type: 'Buffer',
        data: Array.prototype.slice.call(this._arr || this, 0)
      }
    };

    function base64Slice (buf, start, end) {
      if (start === 0 && end === buf.length) {
        return fromByteArray(buf)
      } else {
        return fromByteArray(buf.slice(start, end))
      }
    }

    function utf8Slice (buf, start, end) {
      end = Math.min(buf.length, end);
      var res = [];

      var i = start;
      while (i < end) {
        var firstByte = buf[i];
        var codePoint = null;
        var bytesPerSequence = (firstByte > 0xEF) ? 4
          : (firstByte > 0xDF) ? 3
          : (firstByte > 0xBF) ? 2
          : 1;

        if (i + bytesPerSequence <= end) {
          var secondByte, thirdByte, fourthByte, tempCodePoint;

          switch (bytesPerSequence) {
            case 1:
              if (firstByte < 0x80) {
                codePoint = firstByte;
              }
              break
            case 2:
              secondByte = buf[i + 1];
              if ((secondByte & 0xC0) === 0x80) {
                tempCodePoint = (firstByte & 0x1F) << 0x6 | (secondByte & 0x3F);
                if (tempCodePoint > 0x7F) {
                  codePoint = tempCodePoint;
                }
              }
              break
            case 3:
              secondByte = buf[i + 1];
              thirdByte = buf[i + 2];
              if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80) {
                tempCodePoint = (firstByte & 0xF) << 0xC | (secondByte & 0x3F) << 0x6 | (thirdByte & 0x3F);
                if (tempCodePoint > 0x7FF && (tempCodePoint < 0xD800 || tempCodePoint > 0xDFFF)) {
                  codePoint = tempCodePoint;
                }
              }
              break
            case 4:
              secondByte = buf[i + 1];
              thirdByte = buf[i + 2];
              fourthByte = buf[i + 3];
              if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80 && (fourthByte & 0xC0) === 0x80) {
                tempCodePoint = (firstByte & 0xF) << 0x12 | (secondByte & 0x3F) << 0xC | (thirdByte & 0x3F) << 0x6 | (fourthByte & 0x3F);
                if (tempCodePoint > 0xFFFF && tempCodePoint < 0x110000) {
                  codePoint = tempCodePoint;
                }
              }
          }
        }

        if (codePoint === null) {
          // we did not generate a valid codePoint so insert a
          // replacement char (U+FFFD) and advance only 1 byte
          codePoint = 0xFFFD;
          bytesPerSequence = 1;
        } else if (codePoint > 0xFFFF) {
          // encode to utf16 (surrogate pair dance)
          codePoint -= 0x10000;
          res.push(codePoint >>> 10 & 0x3FF | 0xD800);
          codePoint = 0xDC00 | codePoint & 0x3FF;
        }

        res.push(codePoint);
        i += bytesPerSequence;
      }

      return decodeCodePointsArray(res)
    }

    // Based on http://stackoverflow.com/a/22747272/680742, the browser with
    // the lowest limit is Chrome, with 0x10000 args.
    // We go 1 magnitude less, for safety
    var MAX_ARGUMENTS_LENGTH = 0x1000;

    function decodeCodePointsArray (codePoints) {
      var len = codePoints.length;
      if (len <= MAX_ARGUMENTS_LENGTH) {
        return String.fromCharCode.apply(String, codePoints) // avoid extra slice()
      }

      // Decode in chunks to avoid "call stack size exceeded".
      var res = '';
      var i = 0;
      while (i < len) {
        res += String.fromCharCode.apply(
          String,
          codePoints.slice(i, i += MAX_ARGUMENTS_LENGTH)
        );
      }
      return res
    }

    function asciiSlice (buf, start, end) {
      var ret = '';
      end = Math.min(buf.length, end);

      for (var i = start; i < end; ++i) {
        ret += String.fromCharCode(buf[i] & 0x7F);
      }
      return ret
    }

    function latin1Slice (buf, start, end) {
      var ret = '';
      end = Math.min(buf.length, end);

      for (var i = start; i < end; ++i) {
        ret += String.fromCharCode(buf[i]);
      }
      return ret
    }

    function hexSlice (buf, start, end) {
      var len = buf.length;

      if (!start || start < 0) start = 0;
      if (!end || end < 0 || end > len) end = len;

      var out = '';
      for (var i = start; i < end; ++i) {
        out += toHex(buf[i]);
      }
      return out
    }

    function utf16leSlice (buf, start, end) {
      var bytes = buf.slice(start, end);
      var res = '';
      for (var i = 0; i < bytes.length; i += 2) {
        res += String.fromCharCode(bytes[i] + bytes[i + 1] * 256);
      }
      return res
    }

    Buffer$1.prototype.slice = function slice (start, end) {
      var len = this.length;
      start = ~~start;
      end = end === undefined ? len : ~~end;

      if (start < 0) {
        start += len;
        if (start < 0) start = 0;
      } else if (start > len) {
        start = len;
      }

      if (end < 0) {
        end += len;
        if (end < 0) end = 0;
      } else if (end > len) {
        end = len;
      }

      if (end < start) end = start;

      var newBuf;
      if (Buffer$1.TYPED_ARRAY_SUPPORT) {
        newBuf = this.subarray(start, end);
        newBuf.__proto__ = Buffer$1.prototype;
      } else {
        var sliceLen = end - start;
        newBuf = new Buffer$1(sliceLen, undefined);
        for (var i = 0; i < sliceLen; ++i) {
          newBuf[i] = this[i + start];
        }
      }

      return newBuf
    };

    /*
     * Need to make sure that buffer isn't trying to write out of bounds.
     */
    function checkOffset (offset, ext, length) {
      if ((offset % 1) !== 0 || offset < 0) throw new RangeError('offset is not uint')
      if (offset + ext > length) throw new RangeError('Trying to access beyond buffer length')
    }

    Buffer$1.prototype.readUIntLE = function readUIntLE (offset, byteLength, noAssert) {
      offset = offset | 0;
      byteLength = byteLength | 0;
      if (!noAssert) checkOffset(offset, byteLength, this.length);

      var val = this[offset];
      var mul = 1;
      var i = 0;
      while (++i < byteLength && (mul *= 0x100)) {
        val += this[offset + i] * mul;
      }

      return val
    };

    Buffer$1.prototype.readUIntBE = function readUIntBE (offset, byteLength, noAssert) {
      offset = offset | 0;
      byteLength = byteLength | 0;
      if (!noAssert) {
        checkOffset(offset, byteLength, this.length);
      }

      var val = this[offset + --byteLength];
      var mul = 1;
      while (byteLength > 0 && (mul *= 0x100)) {
        val += this[offset + --byteLength] * mul;
      }

      return val
    };

    Buffer$1.prototype.readUInt8 = function readUInt8 (offset, noAssert) {
      if (!noAssert) checkOffset(offset, 1, this.length);
      return this[offset]
    };

    Buffer$1.prototype.readUInt16LE = function readUInt16LE (offset, noAssert) {
      if (!noAssert) checkOffset(offset, 2, this.length);
      return this[offset] | (this[offset + 1] << 8)
    };

    Buffer$1.prototype.readUInt16BE = function readUInt16BE (offset, noAssert) {
      if (!noAssert) checkOffset(offset, 2, this.length);
      return (this[offset] << 8) | this[offset + 1]
    };

    Buffer$1.prototype.readUInt32LE = function readUInt32LE (offset, noAssert) {
      if (!noAssert) checkOffset(offset, 4, this.length);

      return ((this[offset]) |
          (this[offset + 1] << 8) |
          (this[offset + 2] << 16)) +
          (this[offset + 3] * 0x1000000)
    };

    Buffer$1.prototype.readUInt32BE = function readUInt32BE (offset, noAssert) {
      if (!noAssert) checkOffset(offset, 4, this.length);

      return (this[offset] * 0x1000000) +
        ((this[offset + 1] << 16) |
        (this[offset + 2] << 8) |
        this[offset + 3])
    };

    Buffer$1.prototype.readIntLE = function readIntLE (offset, byteLength, noAssert) {
      offset = offset | 0;
      byteLength = byteLength | 0;
      if (!noAssert) checkOffset(offset, byteLength, this.length);

      var val = this[offset];
      var mul = 1;
      var i = 0;
      while (++i < byteLength && (mul *= 0x100)) {
        val += this[offset + i] * mul;
      }
      mul *= 0x80;

      if (val >= mul) val -= Math.pow(2, 8 * byteLength);

      return val
    };

    Buffer$1.prototype.readIntBE = function readIntBE (offset, byteLength, noAssert) {
      offset = offset | 0;
      byteLength = byteLength | 0;
      if (!noAssert) checkOffset(offset, byteLength, this.length);

      var i = byteLength;
      var mul = 1;
      var val = this[offset + --i];
      while (i > 0 && (mul *= 0x100)) {
        val += this[offset + --i] * mul;
      }
      mul *= 0x80;

      if (val >= mul) val -= Math.pow(2, 8 * byteLength);

      return val
    };

    Buffer$1.prototype.readInt8 = function readInt8 (offset, noAssert) {
      if (!noAssert) checkOffset(offset, 1, this.length);
      if (!(this[offset] & 0x80)) return (this[offset])
      return ((0xff - this[offset] + 1) * -1)
    };

    Buffer$1.prototype.readInt16LE = function readInt16LE (offset, noAssert) {
      if (!noAssert) checkOffset(offset, 2, this.length);
      var val = this[offset] | (this[offset + 1] << 8);
      return (val & 0x8000) ? val | 0xFFFF0000 : val
    };

    Buffer$1.prototype.readInt16BE = function readInt16BE (offset, noAssert) {
      if (!noAssert) checkOffset(offset, 2, this.length);
      var val = this[offset + 1] | (this[offset] << 8);
      return (val & 0x8000) ? val | 0xFFFF0000 : val
    };

    Buffer$1.prototype.readInt32LE = function readInt32LE (offset, noAssert) {
      if (!noAssert) checkOffset(offset, 4, this.length);

      return (this[offset]) |
        (this[offset + 1] << 8) |
        (this[offset + 2] << 16) |
        (this[offset + 3] << 24)
    };

    Buffer$1.prototype.readInt32BE = function readInt32BE (offset, noAssert) {
      if (!noAssert) checkOffset(offset, 4, this.length);

      return (this[offset] << 24) |
        (this[offset + 1] << 16) |
        (this[offset + 2] << 8) |
        (this[offset + 3])
    };

    Buffer$1.prototype.readFloatLE = function readFloatLE (offset, noAssert) {
      if (!noAssert) checkOffset(offset, 4, this.length);
      return read(this, offset, true, 23, 4)
    };

    Buffer$1.prototype.readFloatBE = function readFloatBE (offset, noAssert) {
      if (!noAssert) checkOffset(offset, 4, this.length);
      return read(this, offset, false, 23, 4)
    };

    Buffer$1.prototype.readDoubleLE = function readDoubleLE (offset, noAssert) {
      if (!noAssert) checkOffset(offset, 8, this.length);
      return read(this, offset, true, 52, 8)
    };

    Buffer$1.prototype.readDoubleBE = function readDoubleBE (offset, noAssert) {
      if (!noAssert) checkOffset(offset, 8, this.length);
      return read(this, offset, false, 52, 8)
    };

    function checkInt (buf, value, offset, ext, max, min) {
      if (!internalIsBuffer(buf)) throw new TypeError('"buffer" argument must be a Buffer instance')
      if (value > max || value < min) throw new RangeError('"value" argument is out of bounds')
      if (offset + ext > buf.length) throw new RangeError('Index out of range')
    }

    Buffer$1.prototype.writeUIntLE = function writeUIntLE (value, offset, byteLength, noAssert) {
      value = +value;
      offset = offset | 0;
      byteLength = byteLength | 0;
      if (!noAssert) {
        var maxBytes = Math.pow(2, 8 * byteLength) - 1;
        checkInt(this, value, offset, byteLength, maxBytes, 0);
      }

      var mul = 1;
      var i = 0;
      this[offset] = value & 0xFF;
      while (++i < byteLength && (mul *= 0x100)) {
        this[offset + i] = (value / mul) & 0xFF;
      }

      return offset + byteLength
    };

    Buffer$1.prototype.writeUIntBE = function writeUIntBE (value, offset, byteLength, noAssert) {
      value = +value;
      offset = offset | 0;
      byteLength = byteLength | 0;
      if (!noAssert) {
        var maxBytes = Math.pow(2, 8 * byteLength) - 1;
        checkInt(this, value, offset, byteLength, maxBytes, 0);
      }

      var i = byteLength - 1;
      var mul = 1;
      this[offset + i] = value & 0xFF;
      while (--i >= 0 && (mul *= 0x100)) {
        this[offset + i] = (value / mul) & 0xFF;
      }

      return offset + byteLength
    };

    Buffer$1.prototype.writeUInt8 = function writeUInt8 (value, offset, noAssert) {
      value = +value;
      offset = offset | 0;
      if (!noAssert) checkInt(this, value, offset, 1, 0xff, 0);
      if (!Buffer$1.TYPED_ARRAY_SUPPORT) value = Math.floor(value);
      this[offset] = (value & 0xff);
      return offset + 1
    };

    function objectWriteUInt16 (buf, value, offset, littleEndian) {
      if (value < 0) value = 0xffff + value + 1;
      for (var i = 0, j = Math.min(buf.length - offset, 2); i < j; ++i) {
        buf[offset + i] = (value & (0xff << (8 * (littleEndian ? i : 1 - i)))) >>>
          (littleEndian ? i : 1 - i) * 8;
      }
    }

    Buffer$1.prototype.writeUInt16LE = function writeUInt16LE (value, offset, noAssert) {
      value = +value;
      offset = offset | 0;
      if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0);
      if (Buffer$1.TYPED_ARRAY_SUPPORT) {
        this[offset] = (value & 0xff);
        this[offset + 1] = (value >>> 8);
      } else {
        objectWriteUInt16(this, value, offset, true);
      }
      return offset + 2
    };

    Buffer$1.prototype.writeUInt16BE = function writeUInt16BE (value, offset, noAssert) {
      value = +value;
      offset = offset | 0;
      if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0);
      if (Buffer$1.TYPED_ARRAY_SUPPORT) {
        this[offset] = (value >>> 8);
        this[offset + 1] = (value & 0xff);
      } else {
        objectWriteUInt16(this, value, offset, false);
      }
      return offset + 2
    };

    function objectWriteUInt32 (buf, value, offset, littleEndian) {
      if (value < 0) value = 0xffffffff + value + 1;
      for (var i = 0, j = Math.min(buf.length - offset, 4); i < j; ++i) {
        buf[offset + i] = (value >>> (littleEndian ? i : 3 - i) * 8) & 0xff;
      }
    }

    Buffer$1.prototype.writeUInt32LE = function writeUInt32LE (value, offset, noAssert) {
      value = +value;
      offset = offset | 0;
      if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0);
      if (Buffer$1.TYPED_ARRAY_SUPPORT) {
        this[offset + 3] = (value >>> 24);
        this[offset + 2] = (value >>> 16);
        this[offset + 1] = (value >>> 8);
        this[offset] = (value & 0xff);
      } else {
        objectWriteUInt32(this, value, offset, true);
      }
      return offset + 4
    };

    Buffer$1.prototype.writeUInt32BE = function writeUInt32BE (value, offset, noAssert) {
      value = +value;
      offset = offset | 0;
      if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0);
      if (Buffer$1.TYPED_ARRAY_SUPPORT) {
        this[offset] = (value >>> 24);
        this[offset + 1] = (value >>> 16);
        this[offset + 2] = (value >>> 8);
        this[offset + 3] = (value & 0xff);
      } else {
        objectWriteUInt32(this, value, offset, false);
      }
      return offset + 4
    };

    Buffer$1.prototype.writeIntLE = function writeIntLE (value, offset, byteLength, noAssert) {
      value = +value;
      offset = offset | 0;
      if (!noAssert) {
        var limit = Math.pow(2, 8 * byteLength - 1);

        checkInt(this, value, offset, byteLength, limit - 1, -limit);
      }

      var i = 0;
      var mul = 1;
      var sub = 0;
      this[offset] = value & 0xFF;
      while (++i < byteLength && (mul *= 0x100)) {
        if (value < 0 && sub === 0 && this[offset + i - 1] !== 0) {
          sub = 1;
        }
        this[offset + i] = ((value / mul) >> 0) - sub & 0xFF;
      }

      return offset + byteLength
    };

    Buffer$1.prototype.writeIntBE = function writeIntBE (value, offset, byteLength, noAssert) {
      value = +value;
      offset = offset | 0;
      if (!noAssert) {
        var limit = Math.pow(2, 8 * byteLength - 1);

        checkInt(this, value, offset, byteLength, limit - 1, -limit);
      }

      var i = byteLength - 1;
      var mul = 1;
      var sub = 0;
      this[offset + i] = value & 0xFF;
      while (--i >= 0 && (mul *= 0x100)) {
        if (value < 0 && sub === 0 && this[offset + i + 1] !== 0) {
          sub = 1;
        }
        this[offset + i] = ((value / mul) >> 0) - sub & 0xFF;
      }

      return offset + byteLength
    };

    Buffer$1.prototype.writeInt8 = function writeInt8 (value, offset, noAssert) {
      value = +value;
      offset = offset | 0;
      if (!noAssert) checkInt(this, value, offset, 1, 0x7f, -0x80);
      if (!Buffer$1.TYPED_ARRAY_SUPPORT) value = Math.floor(value);
      if (value < 0) value = 0xff + value + 1;
      this[offset] = (value & 0xff);
      return offset + 1
    };

    Buffer$1.prototype.writeInt16LE = function writeInt16LE (value, offset, noAssert) {
      value = +value;
      offset = offset | 0;
      if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000);
      if (Buffer$1.TYPED_ARRAY_SUPPORT) {
        this[offset] = (value & 0xff);
        this[offset + 1] = (value >>> 8);
      } else {
        objectWriteUInt16(this, value, offset, true);
      }
      return offset + 2
    };

    Buffer$1.prototype.writeInt16BE = function writeInt16BE (value, offset, noAssert) {
      value = +value;
      offset = offset | 0;
      if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000);
      if (Buffer$1.TYPED_ARRAY_SUPPORT) {
        this[offset] = (value >>> 8);
        this[offset + 1] = (value & 0xff);
      } else {
        objectWriteUInt16(this, value, offset, false);
      }
      return offset + 2
    };

    Buffer$1.prototype.writeInt32LE = function writeInt32LE (value, offset, noAssert) {
      value = +value;
      offset = offset | 0;
      if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000);
      if (Buffer$1.TYPED_ARRAY_SUPPORT) {
        this[offset] = (value & 0xff);
        this[offset + 1] = (value >>> 8);
        this[offset + 2] = (value >>> 16);
        this[offset + 3] = (value >>> 24);
      } else {
        objectWriteUInt32(this, value, offset, true);
      }
      return offset + 4
    };

    Buffer$1.prototype.writeInt32BE = function writeInt32BE (value, offset, noAssert) {
      value = +value;
      offset = offset | 0;
      if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000);
      if (value < 0) value = 0xffffffff + value + 1;
      if (Buffer$1.TYPED_ARRAY_SUPPORT) {
        this[offset] = (value >>> 24);
        this[offset + 1] = (value >>> 16);
        this[offset + 2] = (value >>> 8);
        this[offset + 3] = (value & 0xff);
      } else {
        objectWriteUInt32(this, value, offset, false);
      }
      return offset + 4
    };

    function checkIEEE754 (buf, value, offset, ext, max, min) {
      if (offset + ext > buf.length) throw new RangeError('Index out of range')
      if (offset < 0) throw new RangeError('Index out of range')
    }

    function writeFloat (buf, value, offset, littleEndian, noAssert) {
      if (!noAssert) {
        checkIEEE754(buf, value, offset, 4);
      }
      write(buf, value, offset, littleEndian, 23, 4);
      return offset + 4
    }

    Buffer$1.prototype.writeFloatLE = function writeFloatLE (value, offset, noAssert) {
      return writeFloat(this, value, offset, true, noAssert)
    };

    Buffer$1.prototype.writeFloatBE = function writeFloatBE (value, offset, noAssert) {
      return writeFloat(this, value, offset, false, noAssert)
    };

    function writeDouble (buf, value, offset, littleEndian, noAssert) {
      if (!noAssert) {
        checkIEEE754(buf, value, offset, 8);
      }
      write(buf, value, offset, littleEndian, 52, 8);
      return offset + 8
    }

    Buffer$1.prototype.writeDoubleLE = function writeDoubleLE (value, offset, noAssert) {
      return writeDouble(this, value, offset, true, noAssert)
    };

    Buffer$1.prototype.writeDoubleBE = function writeDoubleBE (value, offset, noAssert) {
      return writeDouble(this, value, offset, false, noAssert)
    };

    // copy(targetBuffer, targetStart=0, sourceStart=0, sourceEnd=buffer.length)
    Buffer$1.prototype.copy = function copy (target, targetStart, start, end) {
      if (!start) start = 0;
      if (!end && end !== 0) end = this.length;
      if (targetStart >= target.length) targetStart = target.length;
      if (!targetStart) targetStart = 0;
      if (end > 0 && end < start) end = start;

      // Copy 0 bytes; we're done
      if (end === start) return 0
      if (target.length === 0 || this.length === 0) return 0

      // Fatal error conditions
      if (targetStart < 0) {
        throw new RangeError('targetStart out of bounds')
      }
      if (start < 0 || start >= this.length) throw new RangeError('sourceStart out of bounds')
      if (end < 0) throw new RangeError('sourceEnd out of bounds')

      // Are we oob?
      if (end > this.length) end = this.length;
      if (target.length - targetStart < end - start) {
        end = target.length - targetStart + start;
      }

      var len = end - start;
      var i;

      if (this === target && start < targetStart && targetStart < end) {
        // descending copy from end
        for (i = len - 1; i >= 0; --i) {
          target[i + targetStart] = this[i + start];
        }
      } else if (len < 1000 || !Buffer$1.TYPED_ARRAY_SUPPORT) {
        // ascending copy from start
        for (i = 0; i < len; ++i) {
          target[i + targetStart] = this[i + start];
        }
      } else {
        Uint8Array.prototype.set.call(
          target,
          this.subarray(start, start + len),
          targetStart
        );
      }

      return len
    };

    // Usage:
    //    buffer.fill(number[, offset[, end]])
    //    buffer.fill(buffer[, offset[, end]])
    //    buffer.fill(string[, offset[, end]][, encoding])
    Buffer$1.prototype.fill = function fill (val, start, end, encoding) {
      // Handle string cases:
      if (typeof val === 'string') {
        if (typeof start === 'string') {
          encoding = start;
          start = 0;
          end = this.length;
        } else if (typeof end === 'string') {
          encoding = end;
          end = this.length;
        }
        if (val.length === 1) {
          var code = val.charCodeAt(0);
          if (code < 256) {
            val = code;
          }
        }
        if (encoding !== undefined && typeof encoding !== 'string') {
          throw new TypeError('encoding must be a string')
        }
        if (typeof encoding === 'string' && !Buffer$1.isEncoding(encoding)) {
          throw new TypeError('Unknown encoding: ' + encoding)
        }
      } else if (typeof val === 'number') {
        val = val & 255;
      }

      // Invalid ranges are not set to a default, so can range check early.
      if (start < 0 || this.length < start || this.length < end) {
        throw new RangeError('Out of range index')
      }

      if (end <= start) {
        return this
      }

      start = start >>> 0;
      end = end === undefined ? this.length : end >>> 0;

      if (!val) val = 0;

      var i;
      if (typeof val === 'number') {
        for (i = start; i < end; ++i) {
          this[i] = val;
        }
      } else {
        var bytes = internalIsBuffer(val)
          ? val
          : utf8ToBytes(new Buffer$1(val, encoding).toString());
        var len = bytes.length;
        for (i = 0; i < end - start; ++i) {
          this[i + start] = bytes[i % len];
        }
      }

      return this
    };

    // HELPER FUNCTIONS
    // ================

    var INVALID_BASE64_RE = /[^+\/0-9A-Za-z-_]/g;

    function base64clean (str) {
      // Node strips out invalid characters like \n and \t from the string, base64-js does not
      str = stringtrim(str).replace(INVALID_BASE64_RE, '');
      // Node converts strings with length < 2 to ''
      if (str.length < 2) return ''
      // Node allows for non-padded base64 strings (missing trailing ===), base64-js does not
      while (str.length % 4 !== 0) {
        str = str + '=';
      }
      return str
    }

    function stringtrim (str) {
      if (str.trim) return str.trim()
      return str.replace(/^\s+|\s+$/g, '')
    }

    function toHex (n) {
      if (n < 16) return '0' + n.toString(16)
      return n.toString(16)
    }

    function utf8ToBytes (string, units) {
      units = units || Infinity;
      var codePoint;
      var length = string.length;
      var leadSurrogate = null;
      var bytes = [];

      for (var i = 0; i < length; ++i) {
        codePoint = string.charCodeAt(i);

        // is surrogate component
        if (codePoint > 0xD7FF && codePoint < 0xE000) {
          // last char was a lead
          if (!leadSurrogate) {
            // no lead yet
            if (codePoint > 0xDBFF) {
              // unexpected trail
              if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD);
              continue
            } else if (i + 1 === length) {
              // unpaired lead
              if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD);
              continue
            }

            // valid lead
            leadSurrogate = codePoint;

            continue
          }

          // 2 leads in a row
          if (codePoint < 0xDC00) {
            if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD);
            leadSurrogate = codePoint;
            continue
          }

          // valid surrogate pair
          codePoint = (leadSurrogate - 0xD800 << 10 | codePoint - 0xDC00) + 0x10000;
        } else if (leadSurrogate) {
          // valid bmp char, but last char was a lead
          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD);
        }

        leadSurrogate = null;

        // encode utf8
        if (codePoint < 0x80) {
          if ((units -= 1) < 0) break
          bytes.push(codePoint);
        } else if (codePoint < 0x800) {
          if ((units -= 2) < 0) break
          bytes.push(
            codePoint >> 0x6 | 0xC0,
            codePoint & 0x3F | 0x80
          );
        } else if (codePoint < 0x10000) {
          if ((units -= 3) < 0) break
          bytes.push(
            codePoint >> 0xC | 0xE0,
            codePoint >> 0x6 & 0x3F | 0x80,
            codePoint & 0x3F | 0x80
          );
        } else if (codePoint < 0x110000) {
          if ((units -= 4) < 0) break
          bytes.push(
            codePoint >> 0x12 | 0xF0,
            codePoint >> 0xC & 0x3F | 0x80,
            codePoint >> 0x6 & 0x3F | 0x80,
            codePoint & 0x3F | 0x80
          );
        } else {
          throw new Error('Invalid code point')
        }
      }

      return bytes
    }

    function asciiToBytes (str) {
      var byteArray = [];
      for (var i = 0; i < str.length; ++i) {
        // Node's code seems to be doing this and not & 0x7F..
        byteArray.push(str.charCodeAt(i) & 0xFF);
      }
      return byteArray
    }

    function utf16leToBytes (str, units) {
      var c, hi, lo;
      var byteArray = [];
      for (var i = 0; i < str.length; ++i) {
        if ((units -= 2) < 0) break

        c = str.charCodeAt(i);
        hi = c >> 8;
        lo = c % 256;
        byteArray.push(lo);
        byteArray.push(hi);
      }

      return byteArray
    }


    function base64ToBytes (str) {
      return toByteArray(base64clean(str))
    }

    function blitBuffer (src, dst, offset, length) {
      for (var i = 0; i < length; ++i) {
        if ((i + offset >= dst.length) || (i >= src.length)) break
        dst[i + offset] = src[i];
      }
      return i
    }

    function isnan (val) {
      return val !== val // eslint-disable-line no-self-compare
    }


    // the following is from is-buffer, also by Feross Aboukhadijeh and with same lisence
    // The _isBuffer check is for Safari 5-7 support, because it's missing
    // Object.prototype.constructor. Remove this eventually
    function isBuffer$1(obj) {
      return obj != null && (!!obj._isBuffer || isFastBuffer(obj) || isSlowBuffer(obj))
    }

    function isFastBuffer (obj) {
      return !!obj.constructor && typeof obj.constructor.isBuffer === 'function' && obj.constructor.isBuffer(obj)
    }

    // For Node v0.10 support. Remove this eventually.
    function isSlowBuffer (obj) {
      return typeof obj.readFloatLE === 'function' && typeof obj.slice === 'function' && isFastBuffer(obj.slice(0, 0))
    }

    // shim for using process in browser
    // based off https://github.com/defunctzombie/node-process/blob/master/browser.js

    function defaultSetTimout() {
        throw new Error('setTimeout has not been defined');
    }
    function defaultClearTimeout () {
        throw new Error('clearTimeout has not been defined');
    }
    var cachedSetTimeout = defaultSetTimout;
    var cachedClearTimeout = defaultClearTimeout;
    if (typeof global$1.setTimeout === 'function') {
        cachedSetTimeout = setTimeout;
    }
    if (typeof global$1.clearTimeout === 'function') {
        cachedClearTimeout = clearTimeout;
    }

    function runTimeout(fun) {
        if (cachedSetTimeout === setTimeout) {
            //normal enviroments in sane situations
            return setTimeout(fun, 0);
        }
        // if setTimeout wasn't available but was latter defined
        if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {
            cachedSetTimeout = setTimeout;
            return setTimeout(fun, 0);
        }
        try {
            // when when somebody has screwed with setTimeout but no I.E. maddness
            return cachedSetTimeout(fun, 0);
        } catch(e){
            try {
                // When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally
                return cachedSetTimeout.call(null, fun, 0);
            } catch(e){
                // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error
                return cachedSetTimeout.call(this, fun, 0);
            }
        }


    }
    function runClearTimeout(marker) {
        if (cachedClearTimeout === clearTimeout) {
            //normal enviroments in sane situations
            return clearTimeout(marker);
        }
        // if clearTimeout wasn't available but was latter defined
        if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {
            cachedClearTimeout = clearTimeout;
            return clearTimeout(marker);
        }
        try {
            // when when somebody has screwed with setTimeout but no I.E. maddness
            return cachedClearTimeout(marker);
        } catch (e){
            try {
                // When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally
                return cachedClearTimeout.call(null, marker);
            } catch (e){
                // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.
                // Some versions of I.E. have different rules for clearTimeout vs setTimeout
                return cachedClearTimeout.call(this, marker);
            }
        }



    }
    var queue = [];
    var draining = false;
    var currentQueue;
    var queueIndex = -1;

    function cleanUpNextTick() {
        if (!draining || !currentQueue) {
            return;
        }
        draining = false;
        if (currentQueue.length) {
            queue = currentQueue.concat(queue);
        } else {
            queueIndex = -1;
        }
        if (queue.length) {
            drainQueue();
        }
    }

    function drainQueue() {
        if (draining) {
            return;
        }
        var timeout = runTimeout(cleanUpNextTick);
        draining = true;

        var len = queue.length;
        while(len) {
            currentQueue = queue;
            queue = [];
            while (++queueIndex < len) {
                if (currentQueue) {
                    currentQueue[queueIndex].run();
                }
            }
            queueIndex = -1;
            len = queue.length;
        }
        currentQueue = null;
        draining = false;
        runClearTimeout(timeout);
    }
    function nextTick(fun) {
        var args = new Array(arguments.length - 1);
        if (arguments.length > 1) {
            for (var i = 1; i < arguments.length; i++) {
                args[i - 1] = arguments[i];
            }
        }
        queue.push(new Item(fun, args));
        if (queue.length === 1 && !draining) {
            runTimeout(drainQueue);
        }
    }
    // v8 likes predictible objects
    function Item(fun, array) {
        this.fun = fun;
        this.array = array;
    }
    Item.prototype.run = function () {
        this.fun.apply(null, this.array);
    };
    var title = 'browser';
    var platform = 'browser';
    var browser = true;
    var env = {};
    var argv = [];
    var version = ''; // empty string to avoid regexp issues
    var versions = {};
    var release = {};
    var config = {};

    function noop() {}

    var on = noop;
    var addListener = noop;
    var once = noop;
    var off = noop;
    var removeListener = noop;
    var removeAllListeners = noop;
    var emit = noop;

    function binding(name) {
        throw new Error('process.binding is not supported');
    }

    function cwd () { return '/' }
    function chdir (dir) {
        throw new Error('process.chdir is not supported');
    }function umask() { return 0; }

    // from https://github.com/kumavis/browser-process-hrtime/blob/master/index.js
    var performance = global$1.performance || {};
    var performanceNow =
      performance.now        ||
      performance.mozNow     ||
      performance.msNow      ||
      performance.oNow       ||
      performance.webkitNow  ||
      function(){ return (new Date()).getTime() };

    // generate timestamp or delta
    // see http://nodejs.org/api/process.html#process_process_hrtime
    function hrtime(previousTimestamp){
      var clocktime = performanceNow.call(performance)*1e-3;
      var seconds = Math.floor(clocktime);
      var nanoseconds = Math.floor((clocktime%1)*1e9);
      if (previousTimestamp) {
        seconds = seconds - previousTimestamp[0];
        nanoseconds = nanoseconds - previousTimestamp[1];
        if (nanoseconds<0) {
          seconds--;
          nanoseconds += 1e9;
        }
      }
      return [seconds,nanoseconds]
    }

    var startTime = new Date();
    function uptime() {
      var currentTime = new Date();
      var dif = currentTime - startTime;
      return dif / 1000;
    }

    var browser$1 = {
      nextTick: nextTick,
      title: title,
      browser: browser,
      env: env,
      argv: argv,
      version: version,
      versions: versions,
      on: on,
      addListener: addListener,
      once: once,
      off: off,
      removeListener: removeListener,
      removeAllListeners: removeAllListeners,
      emit: emit,
      binding: binding,
      cwd: cwd,
      chdir: chdir,
      umask: umask,
      hrtime: hrtime,
      platform: platform,
      release: release,
      config: config,
      uptime: uptime
    };

    var inherits;
    if (typeof Object.create === 'function'){
      inherits = function inherits(ctor, superCtor) {
        // implementation from standard node.js 'util' module
        ctor.super_ = superCtor;
        ctor.prototype = Object.create(superCtor.prototype, {
          constructor: {
            value: ctor,
            enumerable: false,
            writable: true,
            configurable: true
          }
        });
      };
    } else {
      inherits = function inherits(ctor, superCtor) {
        ctor.super_ = superCtor;
        var TempCtor = function () {};
        TempCtor.prototype = superCtor.prototype;
        ctor.prototype = new TempCtor();
        ctor.prototype.constructor = ctor;
      };
    }
    var inherits$1 = inherits;

    var formatRegExp = /%[sdj%]/g;
    function format(f) {
      if (!isString(f)) {
        var objects = [];
        for (var i = 0; i < arguments.length; i++) {
          objects.push(inspect(arguments[i]));
        }
        return objects.join(' ');
      }

      var i = 1;
      var args = arguments;
      var len = args.length;
      var str = String(f).replace(formatRegExp, function(x) {
        if (x === '%%') return '%';
        if (i >= len) return x;
        switch (x) {
          case '%s': return String(args[i++]);
          case '%d': return Number(args[i++]);
          case '%j':
            try {
              return JSON.stringify(args[i++]);
            } catch (_) {
              return '[Circular]';
            }
          default:
            return x;
        }
      });
      for (var x = args[i]; i < len; x = args[++i]) {
        if (isNull(x) || !isObject$2(x)) {
          str += ' ' + x;
        } else {
          str += ' ' + inspect(x);
        }
      }
      return str;
    }

    // Mark that a method should not be used.
    // Returns a modified function which warns once by default.
    // If --no-deprecation is set, then it is a no-op.
    function deprecate(fn, msg) {
      // Allow for deprecating things in the process of starting up.
      if (isUndefined(global$1.process)) {
        return function() {
          return deprecate(fn, msg).apply(this, arguments);
        };
      }

      if (browser$1.noDeprecation === true) {
        return fn;
      }

      var warned = false;
      function deprecated() {
        if (!warned) {
          {
            console.error(msg);
          }
          warned = true;
        }
        return fn.apply(this, arguments);
      }

      return deprecated;
    }

    var debugs = {};
    var debugEnviron;
    function debuglog(set) {
      if (isUndefined(debugEnviron))
        debugEnviron = browser$1.env.NODE_DEBUG || '';
      set = set.toUpperCase();
      if (!debugs[set]) {
        if (new RegExp('\\b' + set + '\\b', 'i').test(debugEnviron)) {
          var pid = 0;
          debugs[set] = function() {
            var msg = format.apply(null, arguments);
            console.error('%s %d: %s', set, pid, msg);
          };
        } else {
          debugs[set] = function() {};
        }
      }
      return debugs[set];
    }

    /**
     * Echos the value of a value. Trys to print the value out
     * in the best way possible given the different types.
     *
     * @param {Object} obj The object to print out.
     * @param {Object} opts Optional options object that alters the output.
     */
    /* legacy: obj, showHidden, depth, colors*/
    function inspect(obj, opts) {
      // default options
      var ctx = {
        seen: [],
        stylize: stylizeNoColor
      };
      // legacy...
      if (arguments.length >= 3) ctx.depth = arguments[2];
      if (arguments.length >= 4) ctx.colors = arguments[3];
      if (isBoolean(opts)) {
        // legacy...
        ctx.showHidden = opts;
      } else if (opts) {
        // got an "options" object
        _extend(ctx, opts);
      }
      // set default options
      if (isUndefined(ctx.showHidden)) ctx.showHidden = false;
      if (isUndefined(ctx.depth)) ctx.depth = 2;
      if (isUndefined(ctx.colors)) ctx.colors = false;
      if (isUndefined(ctx.customInspect)) ctx.customInspect = true;
      if (ctx.colors) ctx.stylize = stylizeWithColor;
      return formatValue(ctx, obj, ctx.depth);
    }

    // http://en.wikipedia.org/wiki/ANSI_escape_code#graphics
    inspect.colors = {
      'bold' : [1, 22],
      'italic' : [3, 23],
      'underline' : [4, 24],
      'inverse' : [7, 27],
      'white' : [37, 39],
      'grey' : [90, 39],
      'black' : [30, 39],
      'blue' : [34, 39],
      'cyan' : [36, 39],
      'green' : [32, 39],
      'magenta' : [35, 39],
      'red' : [31, 39],
      'yellow' : [33, 39]
    };

    // Don't use 'blue' not visible on cmd.exe
    inspect.styles = {
      'special': 'cyan',
      'number': 'yellow',
      'boolean': 'yellow',
      'undefined': 'grey',
      'null': 'bold',
      'string': 'green',
      'date': 'magenta',
      // "name": intentionally not styling
      'regexp': 'red'
    };


    function stylizeWithColor(str, styleType) {
      var style = inspect.styles[styleType];

      if (style) {
        return '\u001b[' + inspect.colors[style][0] + 'm' + str +
               '\u001b[' + inspect.colors[style][1] + 'm';
      } else {
        return str;
      }
    }


    function stylizeNoColor(str, styleType) {
      return str;
    }


    function arrayToHash(array) {
      var hash = {};

      array.forEach(function(val, idx) {
        hash[val] = true;
      });

      return hash;
    }


    function formatValue(ctx, value, recurseTimes) {
      // Provide a hook for user-specified inspect functions.
      // Check that value is an object with an inspect function on it
      if (ctx.customInspect &&
          value &&
          isFunction(value.inspect) &&
          // Filter out the util module, it's inspect function is special
          value.inspect !== inspect &&
          // Also filter out any prototype objects using the circular check.
          !(value.constructor && value.constructor.prototype === value)) {
        var ret = value.inspect(recurseTimes, ctx);
        if (!isString(ret)) {
          ret = formatValue(ctx, ret, recurseTimes);
        }
        return ret;
      }

      // Primitive types cannot have properties
      var primitive = formatPrimitive(ctx, value);
      if (primitive) {
        return primitive;
      }

      // Look up the keys of the object.
      var keys = Object.keys(value);
      var visibleKeys = arrayToHash(keys);

      if (ctx.showHidden) {
        keys = Object.getOwnPropertyNames(value);
      }

      // IE doesn't make error fields non-enumerable
      // http://msdn.microsoft.com/en-us/library/ie/dww52sbt(v=vs.94).aspx
      if (isError(value)
          && (keys.indexOf('message') >= 0 || keys.indexOf('description') >= 0)) {
        return formatError(value);
      }

      // Some type of object without properties can be shortcutted.
      if (keys.length === 0) {
        if (isFunction(value)) {
          var name = value.name ? ': ' + value.name : '';
          return ctx.stylize('[Function' + name + ']', 'special');
        }
        if (isRegExp(value)) {
          return ctx.stylize(RegExp.prototype.toString.call(value), 'regexp');
        }
        if (isDate(value)) {
          return ctx.stylize(Date.prototype.toString.call(value), 'date');
        }
        if (isError(value)) {
          return formatError(value);
        }
      }

      var base = '', array = false, braces = ['{', '}'];

      // Make Array say that they are Array
      if (isArray(value)) {
        array = true;
        braces = ['[', ']'];
      }

      // Make functions say that they are functions
      if (isFunction(value)) {
        var n = value.name ? ': ' + value.name : '';
        base = ' [Function' + n + ']';
      }

      // Make RegExps say that they are RegExps
      if (isRegExp(value)) {
        base = ' ' + RegExp.prototype.toString.call(value);
      }

      // Make dates with properties first say the date
      if (isDate(value)) {
        base = ' ' + Date.prototype.toUTCString.call(value);
      }

      // Make error with message first say the error
      if (isError(value)) {
        base = ' ' + formatError(value);
      }

      if (keys.length === 0 && (!array || value.length == 0)) {
        return braces[0] + base + braces[1];
      }

      if (recurseTimes < 0) {
        if (isRegExp(value)) {
          return ctx.stylize(RegExp.prototype.toString.call(value), 'regexp');
        } else {
          return ctx.stylize('[Object]', 'special');
        }
      }

      ctx.seen.push(value);

      var output;
      if (array) {
        output = formatArray(ctx, value, recurseTimes, visibleKeys, keys);
      } else {
        output = keys.map(function(key) {
          return formatProperty(ctx, value, recurseTimes, visibleKeys, key, array);
        });
      }

      ctx.seen.pop();

      return reduceToSingleString(output, base, braces);
    }


    function formatPrimitive(ctx, value) {
      if (isUndefined(value))
        return ctx.stylize('undefined', 'undefined');
      if (isString(value)) {
        var simple = '\'' + JSON.stringify(value).replace(/^"|"$/g, '')
                                                 .replace(/'/g, "\\'")
                                                 .replace(/\\"/g, '"') + '\'';
        return ctx.stylize(simple, 'string');
      }
      if (isNumber(value))
        return ctx.stylize('' + value, 'number');
      if (isBoolean(value))
        return ctx.stylize('' + value, 'boolean');
      // For some reason typeof null is "object", so special case here.
      if (isNull(value))
        return ctx.stylize('null', 'null');
    }


    function formatError(value) {
      return '[' + Error.prototype.toString.call(value) + ']';
    }


    function formatArray(ctx, value, recurseTimes, visibleKeys, keys) {
      var output = [];
      for (var i = 0, l = value.length; i < l; ++i) {
        if (hasOwnProperty(value, String(i))) {
          output.push(formatProperty(ctx, value, recurseTimes, visibleKeys,
              String(i), true));
        } else {
          output.push('');
        }
      }
      keys.forEach(function(key) {
        if (!key.match(/^\d+$/)) {
          output.push(formatProperty(ctx, value, recurseTimes, visibleKeys,
              key, true));
        }
      });
      return output;
    }


    function formatProperty(ctx, value, recurseTimes, visibleKeys, key, array) {
      var name, str, desc;
      desc = Object.getOwnPropertyDescriptor(value, key) || { value: value[key] };
      if (desc.get) {
        if (desc.set) {
          str = ctx.stylize('[Getter/Setter]', 'special');
        } else {
          str = ctx.stylize('[Getter]', 'special');
        }
      } else {
        if (desc.set) {
          str = ctx.stylize('[Setter]', 'special');
        }
      }
      if (!hasOwnProperty(visibleKeys, key)) {
        name = '[' + key + ']';
      }
      if (!str) {
        if (ctx.seen.indexOf(desc.value) < 0) {
          if (isNull(recurseTimes)) {
            str = formatValue(ctx, desc.value, null);
          } else {
            str = formatValue(ctx, desc.value, recurseTimes - 1);
          }
          if (str.indexOf('\n') > -1) {
            if (array) {
              str = str.split('\n').map(function(line) {
                return '  ' + line;
              }).join('\n').substr(2);
            } else {
              str = '\n' + str.split('\n').map(function(line) {
                return '   ' + line;
              }).join('\n');
            }
          }
        } else {
          str = ctx.stylize('[Circular]', 'special');
        }
      }
      if (isUndefined(name)) {
        if (array && key.match(/^\d+$/)) {
          return str;
        }
        name = JSON.stringify('' + key);
        if (name.match(/^"([a-zA-Z_][a-zA-Z_0-9]*)"$/)) {
          name = name.substr(1, name.length - 2);
          name = ctx.stylize(name, 'name');
        } else {
          name = name.replace(/'/g, "\\'")
                     .replace(/\\"/g, '"')
                     .replace(/(^"|"$)/g, "'");
          name = ctx.stylize(name, 'string');
        }
      }

      return name + ': ' + str;
    }


    function reduceToSingleString(output, base, braces) {
      var length = output.reduce(function(prev, cur) {
        if (cur.indexOf('\n') >= 0) ;
        return prev + cur.replace(/\u001b\[\d\d?m/g, '').length + 1;
      }, 0);

      if (length > 60) {
        return braces[0] +
               (base === '' ? '' : base + '\n ') +
               ' ' +
               output.join(',\n  ') +
               ' ' +
               braces[1];
      }

      return braces[0] + base + ' ' + output.join(', ') + ' ' + braces[1];
    }


    // NOTE: These type checking functions intentionally don't use `instanceof`
    // because it is fragile and can be easily faked with `Object.create()`.
    function isArray(ar) {
      return Array.isArray(ar);
    }

    function isBoolean(arg) {
      return typeof arg === 'boolean';
    }

    function isNull(arg) {
      return arg === null;
    }

    function isNullOrUndefined(arg) {
      return arg == null;
    }

    function isNumber(arg) {
      return typeof arg === 'number';
    }

    function isString(arg) {
      return typeof arg === 'string';
    }

    function isSymbol$1(arg) {
      return typeof arg === 'symbol';
    }

    function isUndefined(arg) {
      return arg === void 0;
    }

    function isRegExp(re) {
      return isObject$2(re) && objectToString(re) === '[object RegExp]';
    }

    function isObject$2(arg) {
      return typeof arg === 'object' && arg !== null;
    }

    function isDate(d) {
      return isObject$2(d) && objectToString(d) === '[object Date]';
    }

    function isError(e) {
      return isObject$2(e) &&
          (objectToString(e) === '[object Error]' || e instanceof Error);
    }

    function isFunction(arg) {
      return typeof arg === 'function';
    }

    function isPrimitive(arg) {
      return arg === null ||
             typeof arg === 'boolean' ||
             typeof arg === 'number' ||
             typeof arg === 'string' ||
             typeof arg === 'symbol' ||  // ES6 symbol
             typeof arg === 'undefined';
    }

    function isBuffer(maybeBuf) {
      return Buffer$1.isBuffer(maybeBuf);
    }

    function objectToString(o) {
      return Object.prototype.toString.call(o);
    }


    function pad(n) {
      return n < 10 ? '0' + n.toString(10) : n.toString(10);
    }


    var months = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep',
                  'Oct', 'Nov', 'Dec'];

    // 26 Feb 16:19:34
    function timestamp() {
      var d = new Date();
      var time = [pad(d.getHours()),
                  pad(d.getMinutes()),
                  pad(d.getSeconds())].join(':');
      return [d.getDate(), months[d.getMonth()], time].join(' ');
    }


    // log is just a thin wrapper to console.log that prepends a timestamp
    function log() {
      console.log('%s - %s', timestamp(), format.apply(null, arguments));
    }

    function _extend(origin, add) {
      // Don't do anything if add isn't an object
      if (!add || !isObject$2(add)) return origin;

      var keys = Object.keys(add);
      var i = keys.length;
      while (i--) {
        origin[keys[i]] = add[keys[i]];
      }
      return origin;
    }
    function hasOwnProperty(obj, prop) {
      return Object.prototype.hasOwnProperty.call(obj, prop);
    }

    var util = {
      inherits: inherits$1,
      _extend: _extend,
      log: log,
      isBuffer: isBuffer,
      isPrimitive: isPrimitive,
      isFunction: isFunction,
      isError: isError,
      isDate: isDate,
      isObject: isObject$2,
      isRegExp: isRegExp,
      isUndefined: isUndefined,
      isSymbol: isSymbol$1,
      isString: isString,
      isNumber: isNumber,
      isNullOrUndefined: isNullOrUndefined,
      isNull: isNull,
      isBoolean: isBoolean,
      isArray: isArray,
      inspect: inspect,
      deprecate: deprecate,
      format: format,
      debuglog: debuglog
    };

    function BufferList() {
      this.head = null;
      this.tail = null;
      this.length = 0;
    }

    BufferList.prototype.push = function (v) {
      var entry = { data: v, next: null };
      if (this.length > 0) this.tail.next = entry;else this.head = entry;
      this.tail = entry;
      ++this.length;
    };

    BufferList.prototype.unshift = function (v) {
      var entry = { data: v, next: this.head };
      if (this.length === 0) this.tail = entry;
      this.head = entry;
      ++this.length;
    };

    BufferList.prototype.shift = function () {
      if (this.length === 0) return;
      var ret = this.head.data;
      if (this.length === 1) this.head = this.tail = null;else this.head = this.head.next;
      --this.length;
      return ret;
    };

    BufferList.prototype.clear = function () {
      this.head = this.tail = null;
      this.length = 0;
    };

    BufferList.prototype.join = function (s) {
      if (this.length === 0) return '';
      var p = this.head;
      var ret = '' + p.data;
      while (p = p.next) {
        ret += s + p.data;
      }return ret;
    };

    BufferList.prototype.concat = function (n) {
      if (this.length === 0) return Buffer$1.alloc(0);
      if (this.length === 1) return this.head.data;
      var ret = Buffer$1.allocUnsafe(n >>> 0);
      var p = this.head;
      var i = 0;
      while (p) {
        p.data.copy(ret, i);
        i += p.data.length;
        p = p.next;
      }
      return ret;
    };

    // Copyright Joyent, Inc. and other Node contributors.
    var isBufferEncoding = Buffer$1.isEncoding
      || function(encoding) {
           switch (encoding && encoding.toLowerCase()) {
             case 'hex': case 'utf8': case 'utf-8': case 'ascii': case 'binary': case 'base64': case 'ucs2': case 'ucs-2': case 'utf16le': case 'utf-16le': case 'raw': return true;
             default: return false;
           }
         };


    function assertEncoding(encoding) {
      if (encoding && !isBufferEncoding(encoding)) {
        throw new Error('Unknown encoding: ' + encoding);
      }
    }

    // StringDecoder provides an interface for efficiently splitting a series of
    // buffers into a series of JS strings without breaking apart multi-byte
    // characters. CESU-8 is handled as part of the UTF-8 encoding.
    //
    // @TODO Handling all encodings inside a single object makes it very difficult
    // to reason about this code, so it should be split up in the future.
    // @TODO There should be a utf8-strict encoding that rejects invalid UTF-8 code
    // points as used by CESU-8.
    function StringDecoder(encoding) {
      this.encoding = (encoding || 'utf8').toLowerCase().replace(/[-_]/, '');
      assertEncoding(encoding);
      switch (this.encoding) {
        case 'utf8':
          // CESU-8 represents each of Surrogate Pair by 3-bytes
          this.surrogateSize = 3;
          break;
        case 'ucs2':
        case 'utf16le':
          // UTF-16 represents each of Surrogate Pair by 2-bytes
          this.surrogateSize = 2;
          this.detectIncompleteChar = utf16DetectIncompleteChar;
          break;
        case 'base64':
          // Base-64 stores 3 bytes in 4 chars, and pads the remainder.
          this.surrogateSize = 3;
          this.detectIncompleteChar = base64DetectIncompleteChar;
          break;
        default:
          this.write = passThroughWrite;
          return;
      }

      // Enough space to store all bytes of a single character. UTF-8 needs 4
      // bytes, but CESU-8 may require up to 6 (3 bytes per surrogate).
      this.charBuffer = new Buffer$1(6);
      // Number of bytes received for the current incomplete multi-byte character.
      this.charReceived = 0;
      // Number of bytes expected for the current incomplete multi-byte character.
      this.charLength = 0;
    }

    // write decodes the given buffer and returns it as JS string that is
    // guaranteed to not contain any partial multi-byte characters. Any partial
    // character found at the end of the buffer is buffered up, and will be
    // returned when calling write again with the remaining bytes.
    //
    // Note: Converting a Buffer containing an orphan surrogate to a String
    // currently works, but converting a String to a Buffer (via `new Buffer`, or
    // Buffer#write) will replace incomplete surrogates with the unicode
    // replacement character. See https://codereview.chromium.org/121173009/ .
    StringDecoder.prototype.write = function(buffer) {
      var charStr = '';
      // if our last write ended with an incomplete multibyte character
      while (this.charLength) {
        // determine how many remaining bytes this buffer has to offer for this char
        var available = (buffer.length >= this.charLength - this.charReceived) ?
            this.charLength - this.charReceived :
            buffer.length;

        // add the new bytes to the char buffer
        buffer.copy(this.charBuffer, this.charReceived, 0, available);
        this.charReceived += available;

        if (this.charReceived < this.charLength) {
          // still not enough chars in this buffer? wait for more ...
          return '';
        }

        // remove bytes belonging to the current character from the buffer
        buffer = buffer.slice(available, buffer.length);

        // get the character that was split
        charStr = this.charBuffer.slice(0, this.charLength).toString(this.encoding);

        // CESU-8: lead surrogate (D800-DBFF) is also the incomplete character
        var charCode = charStr.charCodeAt(charStr.length - 1);
        if (charCode >= 0xD800 && charCode <= 0xDBFF) {
          this.charLength += this.surrogateSize;
          charStr = '';
          continue;
        }
        this.charReceived = this.charLength = 0;

        // if there are no more bytes in this buffer, just emit our char
        if (buffer.length === 0) {
          return charStr;
        }
        break;
      }

      // determine and set charLength / charReceived
      this.detectIncompleteChar(buffer);

      var end = buffer.length;
      if (this.charLength) {
        // buffer the incomplete character bytes we got
        buffer.copy(this.charBuffer, 0, buffer.length - this.charReceived, end);
        end -= this.charReceived;
      }

      charStr += buffer.toString(this.encoding, 0, end);

      var end = charStr.length - 1;
      var charCode = charStr.charCodeAt(end);
      // CESU-8: lead surrogate (D800-DBFF) is also the incomplete character
      if (charCode >= 0xD800 && charCode <= 0xDBFF) {
        var size = this.surrogateSize;
        this.charLength += size;
        this.charReceived += size;
        this.charBuffer.copy(this.charBuffer, size, 0, size);
        buffer.copy(this.charBuffer, 0, 0, size);
        return charStr.substring(0, end);
      }

      // or just emit the charStr
      return charStr;
    };

    // detectIncompleteChar determines if there is an incomplete UTF-8 character at
    // the end of the given buffer. If so, it sets this.charLength to the byte
    // length that character, and sets this.charReceived to the number of bytes
    // that are available for this character.
    StringDecoder.prototype.detectIncompleteChar = function(buffer) {
      // determine how many bytes we have to check at the end of this buffer
      var i = (buffer.length >= 3) ? 3 : buffer.length;

      // Figure out if one of the last i bytes of our buffer announces an
      // incomplete char.
      for (; i > 0; i--) {
        var c = buffer[buffer.length - i];

        // See http://en.wikipedia.org/wiki/UTF-8#Description

        // 110XXXXX
        if (i == 1 && c >> 5 == 0x06) {
          this.charLength = 2;
          break;
        }

        // 1110XXXX
        if (i <= 2 && c >> 4 == 0x0E) {
          this.charLength = 3;
          break;
        }

        // 11110XXX
        if (i <= 3 && c >> 3 == 0x1E) {
          this.charLength = 4;
          break;
        }
      }
      this.charReceived = i;
    };

    StringDecoder.prototype.end = function(buffer) {
      var res = '';
      if (buffer && buffer.length)
        res = this.write(buffer);

      if (this.charReceived) {
        var cr = this.charReceived;
        var buf = this.charBuffer;
        var enc = this.encoding;
        res += buf.slice(0, cr).toString(enc);
      }

      return res;
    };

    function passThroughWrite(buffer) {
      return buffer.toString(this.encoding);
    }

    function utf16DetectIncompleteChar(buffer) {
      this.charReceived = buffer.length % 2;
      this.charLength = this.charReceived ? 2 : 0;
    }

    function base64DetectIncompleteChar(buffer) {
      this.charReceived = buffer.length % 3;
      this.charLength = this.charReceived ? 3 : 0;
    }

    Readable.ReadableState = ReadableState;

    var debug = debuglog('stream');
    inherits$1(Readable, EventEmitter);

    function prependListener(emitter, event, fn) {
      // Sadly this is not cacheable as some libraries bundle their own
      // event emitter implementation with them.
      if (typeof emitter.prependListener === 'function') {
        return emitter.prependListener(event, fn);
      } else {
        // This is a hack to make sure that our error handler is attached before any
        // userland ones.  NEVER DO THIS. This is here only because this code needs
        // to continue to work with older versions of Node.js that do not include
        // the prependListener() method. The goal is to eventually remove this hack.
        if (!emitter._events || !emitter._events[event])
          emitter.on(event, fn);
        else if (Array.isArray(emitter._events[event]))
          emitter._events[event].unshift(fn);
        else
          emitter._events[event] = [fn, emitter._events[event]];
      }
    }
    function listenerCount (emitter, type) {
      return emitter.listeners(type).length;
    }
    function ReadableState(options, stream) {

      options = options || {};

      // object stream flag. Used to make read(n) ignore n and to
      // make all the buffer merging and length checks go away
      this.objectMode = !!options.objectMode;

      if (stream instanceof Duplex) this.objectMode = this.objectMode || !!options.readableObjectMode;

      // the point at which it stops calling _read() to fill the buffer
      // Note: 0 is a valid value, means "don't call _read preemptively ever"
      var hwm = options.highWaterMark;
      var defaultHwm = this.objectMode ? 16 : 16 * 1024;
      this.highWaterMark = hwm || hwm === 0 ? hwm : defaultHwm;

      // cast to ints.
      this.highWaterMark = ~ ~this.highWaterMark;

      // A linked list is used to store data chunks instead of an array because the
      // linked list can remove elements from the beginning faster than
      // array.shift()
      this.buffer = new BufferList();
      this.length = 0;
      this.pipes = null;
      this.pipesCount = 0;
      this.flowing = null;
      this.ended = false;
      this.endEmitted = false;
      this.reading = false;

      // a flag to be able to tell if the onwrite cb is called immediately,
      // or on a later tick.  We set this to true at first, because any
      // actions that shouldn't happen until "later" should generally also
      // not happen before the first write call.
      this.sync = true;

      // whenever we return null, then we set a flag to say
      // that we're awaiting a 'readable' event emission.
      this.needReadable = false;
      this.emittedReadable = false;
      this.readableListening = false;
      this.resumeScheduled = false;

      // Crypto is kind of old and crusty.  Historically, its default string
      // encoding is 'binary' so we have to make this configurable.
      // Everything else in the universe uses 'utf8', though.
      this.defaultEncoding = options.defaultEncoding || 'utf8';

      // when piping, we only care about 'readable' events that happen
      // after read()ing all the bytes and not getting any pushback.
      this.ranOut = false;

      // the number of writers that are awaiting a drain event in .pipe()s
      this.awaitDrain = 0;

      // if true, a maybeReadMore has been scheduled
      this.readingMore = false;

      this.decoder = null;
      this.encoding = null;
      if (options.encoding) {
        this.decoder = new StringDecoder(options.encoding);
        this.encoding = options.encoding;
      }
    }
    function Readable(options) {

      if (!(this instanceof Readable)) return new Readable(options);

      this._readableState = new ReadableState(options, this);

      // legacy
      this.readable = true;

      if (options && typeof options.read === 'function') this._read = options.read;

      EventEmitter.call(this);
    }

    // Manually shove something into the read() buffer.
    // This returns true if the highWaterMark has not been hit yet,
    // similar to how Writable.write() returns true if you should
    // write() some more.
    Readable.prototype.push = function (chunk, encoding) {
      var state = this._readableState;

      if (!state.objectMode && typeof chunk === 'string') {
        encoding = encoding || state.defaultEncoding;
        if (encoding !== state.encoding) {
          chunk = Buffer$1.from(chunk, encoding);
          encoding = '';
        }
      }

      return readableAddChunk(this, state, chunk, encoding, false);
    };

    // Unshift should *always* be something directly out of read()
    Readable.prototype.unshift = function (chunk) {
      var state = this._readableState;
      return readableAddChunk(this, state, chunk, '', true);
    };

    Readable.prototype.isPaused = function () {
      return this._readableState.flowing === false;
    };

    function readableAddChunk(stream, state, chunk, encoding, addToFront) {
      var er = chunkInvalid(state, chunk);
      if (er) {
        stream.emit('error', er);
      } else if (chunk === null) {
        state.reading = false;
        onEofChunk(stream, state);
      } else if (state.objectMode || chunk && chunk.length > 0) {
        if (state.ended && !addToFront) {
          var e = new Error('stream.push() after EOF');
          stream.emit('error', e);
        } else if (state.endEmitted && addToFront) {
          var _e = new Error('stream.unshift() after end event');
          stream.emit('error', _e);
        } else {
          var skipAdd;
          if (state.decoder && !addToFront && !encoding) {
            chunk = state.decoder.write(chunk);
            skipAdd = !state.objectMode && chunk.length === 0;
          }

          if (!addToFront) state.reading = false;

          // Don't add to the buffer if we've decoded to an empty string chunk and
          // we're not in object mode
          if (!skipAdd) {
            // if we want the data now, just emit it.
            if (state.flowing && state.length === 0 && !state.sync) {
              stream.emit('data', chunk);
              stream.read(0);
            } else {
              // update the buffer info.
              state.length += state.objectMode ? 1 : chunk.length;
              if (addToFront) state.buffer.unshift(chunk);else state.buffer.push(chunk);

              if (state.needReadable) emitReadable(stream);
            }
          }

          maybeReadMore(stream, state);
        }
      } else if (!addToFront) {
        state.reading = false;
      }

      return needMoreData(state);
    }

    // if it's past the high water mark, we can push in some more.
    // Also, if we have no data yet, we can stand some
    // more bytes.  This is to work around cases where hwm=0,
    // such as the repl.  Also, if the push() triggered a
    // readable event, and the user called read(largeNumber) such that
    // needReadable was set, then we ought to push more, so that another
    // 'readable' event will be triggered.
    function needMoreData(state) {
      return !state.ended && (state.needReadable || state.length < state.highWaterMark || state.length === 0);
    }

    // backwards compatibility.
    Readable.prototype.setEncoding = function (enc) {
      this._readableState.decoder = new StringDecoder(enc);
      this._readableState.encoding = enc;
      return this;
    };

    // Don't raise the hwm > 8MB
    var MAX_HWM = 0x800000;
    function computeNewHighWaterMark(n) {
      if (n >= MAX_HWM) {
        n = MAX_HWM;
      } else {
        // Get the next highest power of 2 to prevent increasing hwm excessively in
        // tiny amounts
        n--;
        n |= n >>> 1;
        n |= n >>> 2;
        n |= n >>> 4;
        n |= n >>> 8;
        n |= n >>> 16;
        n++;
      }
      return n;
    }

    // This function is designed to be inlinable, so please take care when making
    // changes to the function body.
    function howMuchToRead(n, state) {
      if (n <= 0 || state.length === 0 && state.ended) return 0;
      if (state.objectMode) return 1;
      if (n !== n) {
        // Only flow one buffer at a time
        if (state.flowing && state.length) return state.buffer.head.data.length;else return state.length;
      }
      // If we're asking for more than the current hwm, then raise the hwm.
      if (n > state.highWaterMark) state.highWaterMark = computeNewHighWaterMark(n);
      if (n <= state.length) return n;
      // Don't have enough
      if (!state.ended) {
        state.needReadable = true;
        return 0;
      }
      return state.length;
    }

    // you can override either this method, or the async _read(n) below.
    Readable.prototype.read = function (n) {
      debug('read', n);
      n = parseInt(n, 10);
      var state = this._readableState;
      var nOrig = n;

      if (n !== 0) state.emittedReadable = false;

      // if we're doing read(0) to trigger a readable event, but we
      // already have a bunch of data in the buffer, then just trigger
      // the 'readable' event and move on.
      if (n === 0 && state.needReadable && (state.length >= state.highWaterMark || state.ended)) {
        debug('read: emitReadable', state.length, state.ended);
        if (state.length === 0 && state.ended) endReadable(this);else emitReadable(this);
        return null;
      }

      n = howMuchToRead(n, state);

      // if we've ended, and we're now clear, then finish it up.
      if (n === 0 && state.ended) {
        if (state.length === 0) endReadable(this);
        return null;
      }

      // All the actual chunk generation logic needs to be
      // *below* the call to _read.  The reason is that in certain
      // synthetic stream cases, such as passthrough streams, _read
      // may be a completely synchronous operation which may change
      // the state of the read buffer, providing enough data when
      // before there was *not* enough.
      //
      // So, the steps are:
      // 1. Figure out what the state of things will be after we do
      // a read from the buffer.
      //
      // 2. If that resulting state will trigger a _read, then call _read.
      // Note that this may be asynchronous, or synchronous.  Yes, it is
      // deeply ugly to write APIs this way, but that still doesn't mean
      // that the Readable class should behave improperly, as streams are
      // designed to be sync/async agnostic.
      // Take note if the _read call is sync or async (ie, if the read call
      // has returned yet), so that we know whether or not it's safe to emit
      // 'readable' etc.
      //
      // 3. Actually pull the requested chunks out of the buffer and return.

      // if we need a readable event, then we need to do some reading.
      var doRead = state.needReadable;
      debug('need readable', doRead);

      // if we currently have less than the highWaterMark, then also read some
      if (state.length === 0 || state.length - n < state.highWaterMark) {
        doRead = true;
        debug('length less than watermark', doRead);
      }

      // however, if we've ended, then there's no point, and if we're already
      // reading, then it's unnecessary.
      if (state.ended || state.reading) {
        doRead = false;
        debug('reading or ended', doRead);
      } else if (doRead) {
        debug('do read');
        state.reading = true;
        state.sync = true;
        // if the length is currently zero, then we *need* a readable event.
        if (state.length === 0) state.needReadable = true;
        // call internal read method
        this._read(state.highWaterMark);
        state.sync = false;
        // If _read pushed data synchronously, then `reading` will be false,
        // and we need to re-evaluate how much data we can return to the user.
        if (!state.reading) n = howMuchToRead(nOrig, state);
      }

      var ret;
      if (n > 0) ret = fromList(n, state);else ret = null;

      if (ret === null) {
        state.needReadable = true;
        n = 0;
      } else {
        state.length -= n;
      }

      if (state.length === 0) {
        // If we have nothing in the buffer, then we want to know
        // as soon as we *do* get something into the buffer.
        if (!state.ended) state.needReadable = true;

        // If we tried to read() past the EOF, then emit end on the next tick.
        if (nOrig !== n && state.ended) endReadable(this);
      }

      if (ret !== null) this.emit('data', ret);

      return ret;
    };

    function chunkInvalid(state, chunk) {
      var er = null;
      if (!Buffer$1.isBuffer(chunk) && typeof chunk !== 'string' && chunk !== null && chunk !== undefined && !state.objectMode) {
        er = new TypeError('Invalid non-string/buffer chunk');
      }
      return er;
    }

    function onEofChunk(stream, state) {
      if (state.ended) return;
      if (state.decoder) {
        var chunk = state.decoder.end();
        if (chunk && chunk.length) {
          state.buffer.push(chunk);
          state.length += state.objectMode ? 1 : chunk.length;
        }
      }
      state.ended = true;

      // emit 'readable' now to make sure it gets picked up.
      emitReadable(stream);
    }

    // Don't emit readable right away in sync mode, because this can trigger
    // another read() call => stack overflow.  This way, it might trigger
    // a nextTick recursion warning, but that's not so bad.
    function emitReadable(stream) {
      var state = stream._readableState;
      state.needReadable = false;
      if (!state.emittedReadable) {
        debug('emitReadable', state.flowing);
        state.emittedReadable = true;
        if (state.sync) nextTick(emitReadable_, stream);else emitReadable_(stream);
      }
    }

    function emitReadable_(stream) {
      debug('emit readable');
      stream.emit('readable');
      flow(stream);
    }

    // at this point, the user has presumably seen the 'readable' event,
    // and called read() to consume some data.  that may have triggered
    // in turn another _read(n) call, in which case reading = true if
    // it's in progress.
    // However, if we're not ended, or reading, and the length < hwm,
    // then go ahead and try to read some more preemptively.
    function maybeReadMore(stream, state) {
      if (!state.readingMore) {
        state.readingMore = true;
        nextTick(maybeReadMore_, stream, state);
      }
    }

    function maybeReadMore_(stream, state) {
      var len = state.length;
      while (!state.reading && !state.flowing && !state.ended && state.length < state.highWaterMark) {
        debug('maybeReadMore read 0');
        stream.read(0);
        if (len === state.length)
          // didn't get any data, stop spinning.
          break;else len = state.length;
      }
      state.readingMore = false;
    }

    // abstract method.  to be overridden in specific implementation classes.
    // call cb(er, data) where data is <= n in length.
    // for virtual (non-string, non-buffer) streams, "length" is somewhat
    // arbitrary, and perhaps not very meaningful.
    Readable.prototype._read = function (n) {
      this.emit('error', new Error('not implemented'));
    };

    Readable.prototype.pipe = function (dest, pipeOpts) {
      var src = this;
      var state = this._readableState;

      switch (state.pipesCount) {
        case 0:
          state.pipes = dest;
          break;
        case 1:
          state.pipes = [state.pipes, dest];
          break;
        default:
          state.pipes.push(dest);
          break;
      }
      state.pipesCount += 1;
      debug('pipe count=%d opts=%j', state.pipesCount, pipeOpts);

      var doEnd = (!pipeOpts || pipeOpts.end !== false);

      var endFn = doEnd ? onend : cleanup;
      if (state.endEmitted) nextTick(endFn);else src.once('end', endFn);

      dest.on('unpipe', onunpipe);
      function onunpipe(readable) {
        debug('onunpipe');
        if (readable === src) {
          cleanup();
        }
      }

      function onend() {
        debug('onend');
        dest.end();
      }

      // when the dest drains, it reduces the awaitDrain counter
      // on the source.  This would be more elegant with a .once()
      // handler in flow(), but adding and removing repeatedly is
      // too slow.
      var ondrain = pipeOnDrain(src);
      dest.on('drain', ondrain);

      var cleanedUp = false;
      function cleanup() {
        debug('cleanup');
        // cleanup event handlers once the pipe is broken
        dest.removeListener('close', onclose);
        dest.removeListener('finish', onfinish);
        dest.removeListener('drain', ondrain);
        dest.removeListener('error', onerror);
        dest.removeListener('unpipe', onunpipe);
        src.removeListener('end', onend);
        src.removeListener('end', cleanup);
        src.removeListener('data', ondata);

        cleanedUp = true;

        // if the reader is waiting for a drain event from this
        // specific writer, then it would cause it to never start
        // flowing again.
        // So, if this is awaiting a drain, then we just call it now.
        // If we don't know, then assume that we are waiting for one.
        if (state.awaitDrain && (!dest._writableState || dest._writableState.needDrain)) ondrain();
      }

      // If the user pushes more data while we're writing to dest then we'll end up
      // in ondata again. However, we only want to increase awaitDrain once because
      // dest will only emit one 'drain' event for the multiple writes.
      // => Introduce a guard on increasing awaitDrain.
      var increasedAwaitDrain = false;
      src.on('data', ondata);
      function ondata(chunk) {
        debug('ondata');
        increasedAwaitDrain = false;
        var ret = dest.write(chunk);
        if (false === ret && !increasedAwaitDrain) {
          // If the user unpiped during `dest.write()`, it is possible
          // to get stuck in a permanently paused state if that write
          // also returned false.
          // => Check whether `dest` is still a piping destination.
          if ((state.pipesCount === 1 && state.pipes === dest || state.pipesCount > 1 && indexOf(state.pipes, dest) !== -1) && !cleanedUp) {
            debug('false write response, pause', src._readableState.awaitDrain);
            src._readableState.awaitDrain++;
            increasedAwaitDrain = true;
          }
          src.pause();
        }
      }

      // if the dest has an error, then stop piping into it.
      // however, don't suppress the throwing behavior for this.
      function onerror(er) {
        debug('onerror', er);
        unpipe();
        dest.removeListener('error', onerror);
        if (listenerCount(dest, 'error') === 0) dest.emit('error', er);
      }

      // Make sure our error handler is attached before userland ones.
      prependListener(dest, 'error', onerror);

      // Both close and finish should trigger unpipe, but only once.
      function onclose() {
        dest.removeListener('finish', onfinish);
        unpipe();
      }
      dest.once('close', onclose);
      function onfinish() {
        debug('onfinish');
        dest.removeListener('close', onclose);
        unpipe();
      }
      dest.once('finish', onfinish);

      function unpipe() {
        debug('unpipe');
        src.unpipe(dest);
      }

      // tell the dest that it's being piped to
      dest.emit('pipe', src);

      // start the flow if it hasn't been started already.
      if (!state.flowing) {
        debug('pipe resume');
        src.resume();
      }

      return dest;
    };

    function pipeOnDrain(src) {
      return function () {
        var state = src._readableState;
        debug('pipeOnDrain', state.awaitDrain);
        if (state.awaitDrain) state.awaitDrain--;
        if (state.awaitDrain === 0 && src.listeners('data').length) {
          state.flowing = true;
          flow(src);
        }
      };
    }

    Readable.prototype.unpipe = function (dest) {
      var state = this._readableState;

      // if we're not piping anywhere, then do nothing.
      if (state.pipesCount === 0) return this;

      // just one destination.  most common case.
      if (state.pipesCount === 1) {
        // passed in one, but it's not the right one.
        if (dest && dest !== state.pipes) return this;

        if (!dest) dest = state.pipes;

        // got a match.
        state.pipes = null;
        state.pipesCount = 0;
        state.flowing = false;
        if (dest) dest.emit('unpipe', this);
        return this;
      }

      // slow case. multiple pipe destinations.

      if (!dest) {
        // remove all.
        var dests = state.pipes;
        var len = state.pipesCount;
        state.pipes = null;
        state.pipesCount = 0;
        state.flowing = false;

        for (var _i = 0; _i < len; _i++) {
          dests[_i].emit('unpipe', this);
        }return this;
      }

      // try to find the right one.
      var i = indexOf(state.pipes, dest);
      if (i === -1) return this;

      state.pipes.splice(i, 1);
      state.pipesCount -= 1;
      if (state.pipesCount === 1) state.pipes = state.pipes[0];

      dest.emit('unpipe', this);

      return this;
    };

    // set up data events if they are asked for
    // Ensure readable listeners eventually get something
    Readable.prototype.on = function (ev, fn) {
      var res = EventEmitter.prototype.on.call(this, ev, fn);

      if (ev === 'data') {
        // Start flowing on next tick if stream isn't explicitly paused
        if (this._readableState.flowing !== false) this.resume();
      } else if (ev === 'readable') {
        var state = this._readableState;
        if (!state.endEmitted && !state.readableListening) {
          state.readableListening = state.needReadable = true;
          state.emittedReadable = false;
          if (!state.reading) {
            nextTick(nReadingNextTick, this);
          } else if (state.length) {
            emitReadable(this);
          }
        }
      }

      return res;
    };
    Readable.prototype.addListener = Readable.prototype.on;

    function nReadingNextTick(self) {
      debug('readable nexttick read 0');
      self.read(0);
    }

    // pause() and resume() are remnants of the legacy readable stream API
    // If the user uses them, then switch into old mode.
    Readable.prototype.resume = function () {
      var state = this._readableState;
      if (!state.flowing) {
        debug('resume');
        state.flowing = true;
        resume(this, state);
      }
      return this;
    };

    function resume(stream, state) {
      if (!state.resumeScheduled) {
        state.resumeScheduled = true;
        nextTick(resume_, stream, state);
      }
    }

    function resume_(stream, state) {
      if (!state.reading) {
        debug('resume read 0');
        stream.read(0);
      }

      state.resumeScheduled = false;
      state.awaitDrain = 0;
      stream.emit('resume');
      flow(stream);
      if (state.flowing && !state.reading) stream.read(0);
    }

    Readable.prototype.pause = function () {
      debug('call pause flowing=%j', this._readableState.flowing);
      if (false !== this._readableState.flowing) {
        debug('pause');
        this._readableState.flowing = false;
        this.emit('pause');
      }
      return this;
    };

    function flow(stream) {
      var state = stream._readableState;
      debug('flow', state.flowing);
      while (state.flowing && stream.read() !== null) {}
    }

    // wrap an old-style stream as the async data source.
    // This is *not* part of the readable stream interface.
    // It is an ugly unfortunate mess of history.
    Readable.prototype.wrap = function (stream) {
      var state = this._readableState;
      var paused = false;

      var self = this;
      stream.on('end', function () {
        debug('wrapped end');
        if (state.decoder && !state.ended) {
          var chunk = state.decoder.end();
          if (chunk && chunk.length) self.push(chunk);
        }

        self.push(null);
      });

      stream.on('data', function (chunk) {
        debug('wrapped data');
        if (state.decoder) chunk = state.decoder.write(chunk);

        // don't skip over falsy values in objectMode
        if (state.objectMode && (chunk === null || chunk === undefined)) return;else if (!state.objectMode && (!chunk || !chunk.length)) return;

        var ret = self.push(chunk);
        if (!ret) {
          paused = true;
          stream.pause();
        }
      });

      // proxy all the other methods.
      // important when wrapping filters and duplexes.
      for (var i in stream) {
        if (this[i] === undefined && typeof stream[i] === 'function') {
          this[i] = function (method) {
            return function () {
              return stream[method].apply(stream, arguments);
            };
          }(i);
        }
      }

      // proxy certain important events.
      var events = ['error', 'close', 'destroy', 'pause', 'resume'];
      forEach(events, function (ev) {
        stream.on(ev, self.emit.bind(self, ev));
      });

      // when we try to consume some more bytes, simply unpause the
      // underlying stream.
      self._read = function (n) {
        debug('wrapped _read', n);
        if (paused) {
          paused = false;
          stream.resume();
        }
      };

      return self;
    };

    // exposed for testing purposes only.
    Readable._fromList = fromList;

    // Pluck off n bytes from an array of buffers.
    // Length is the combined lengths of all the buffers in the list.
    // This function is designed to be inlinable, so please take care when making
    // changes to the function body.
    function fromList(n, state) {
      // nothing buffered
      if (state.length === 0) return null;

      var ret;
      if (state.objectMode) ret = state.buffer.shift();else if (!n || n >= state.length) {
        // read it all, truncate the list
        if (state.decoder) ret = state.buffer.join('');else if (state.buffer.length === 1) ret = state.buffer.head.data;else ret = state.buffer.concat(state.length);
        state.buffer.clear();
      } else {
        // read part of list
        ret = fromListPartial(n, state.buffer, state.decoder);
      }

      return ret;
    }

    // Extracts only enough buffered data to satisfy the amount requested.
    // This function is designed to be inlinable, so please take care when making
    // changes to the function body.
    function fromListPartial(n, list, hasStrings) {
      var ret;
      if (n < list.head.data.length) {
        // slice is the same for buffers and strings
        ret = list.head.data.slice(0, n);
        list.head.data = list.head.data.slice(n);
      } else if (n === list.head.data.length) {
        // first chunk is a perfect match
        ret = list.shift();
      } else {
        // result spans more than one buffer
        ret = hasStrings ? copyFromBufferString(n, list) : copyFromBuffer(n, list);
      }
      return ret;
    }

    // Copies a specified amount of characters from the list of buffered data
    // chunks.
    // This function is designed to be inlinable, so please take care when making
    // changes to the function body.
    function copyFromBufferString(n, list) {
      var p = list.head;
      var c = 1;
      var ret = p.data;
      n -= ret.length;
      while (p = p.next) {
        var str = p.data;
        var nb = n > str.length ? str.length : n;
        if (nb === str.length) ret += str;else ret += str.slice(0, n);
        n -= nb;
        if (n === 0) {
          if (nb === str.length) {
            ++c;
            if (p.next) list.head = p.next;else list.head = list.tail = null;
          } else {
            list.head = p;
            p.data = str.slice(nb);
          }
          break;
        }
        ++c;
      }
      list.length -= c;
      return ret;
    }

    // Copies a specified amount of bytes from the list of buffered data chunks.
    // This function is designed to be inlinable, so please take care when making
    // changes to the function body.
    function copyFromBuffer(n, list) {
      var ret = Buffer$1.allocUnsafe(n);
      var p = list.head;
      var c = 1;
      p.data.copy(ret);
      n -= p.data.length;
      while (p = p.next) {
        var buf = p.data;
        var nb = n > buf.length ? buf.length : n;
        buf.copy(ret, ret.length - n, 0, nb);
        n -= nb;
        if (n === 0) {
          if (nb === buf.length) {
            ++c;
            if (p.next) list.head = p.next;else list.head = list.tail = null;
          } else {
            list.head = p;
            p.data = buf.slice(nb);
          }
          break;
        }
        ++c;
      }
      list.length -= c;
      return ret;
    }

    function endReadable(stream) {
      var state = stream._readableState;

      // If we get here before consuming all the bytes, then that is a
      // bug in node.  Should never happen.
      if (state.length > 0) throw new Error('"endReadable()" called on non-empty stream');

      if (!state.endEmitted) {
        state.ended = true;
        nextTick(endReadableNT, state, stream);
      }
    }

    function endReadableNT(state, stream) {
      // Check that we didn't get one last unshift.
      if (!state.endEmitted && state.length === 0) {
        state.endEmitted = true;
        stream.readable = false;
        stream.emit('end');
      }
    }

    function forEach(xs, f) {
      for (var i = 0, l = xs.length; i < l; i++) {
        f(xs[i], i);
      }
    }

    function indexOf(xs, x) {
      for (var i = 0, l = xs.length; i < l; i++) {
        if (xs[i] === x) return i;
      }
      return -1;
    }

    // A bit simpler than readable streams.
    Writable.WritableState = WritableState;
    inherits$1(Writable, EventEmitter);

    function nop() {}

    function WriteReq(chunk, encoding, cb) {
      this.chunk = chunk;
      this.encoding = encoding;
      this.callback = cb;
      this.next = null;
    }

    function WritableState(options, stream) {
      Object.defineProperty(this, 'buffer', {
        get: deprecate(function () {
          return this.getBuffer();
        }, '_writableState.buffer is deprecated. Use _writableState.getBuffer ' + 'instead.')
      });
      options = options || {};

      // object stream flag to indicate whether or not this stream
      // contains buffers or objects.
      this.objectMode = !!options.objectMode;

      if (stream instanceof Duplex) this.objectMode = this.objectMode || !!options.writableObjectMode;

      // the point at which write() starts returning false
      // Note: 0 is a valid value, means that we always return false if
      // the entire buffer is not flushed immediately on write()
      var hwm = options.highWaterMark;
      var defaultHwm = this.objectMode ? 16 : 16 * 1024;
      this.highWaterMark = hwm || hwm === 0 ? hwm : defaultHwm;

      // cast to ints.
      this.highWaterMark = ~ ~this.highWaterMark;

      this.needDrain = false;
      // at the start of calling end()
      this.ending = false;
      // when end() has been called, and returned
      this.ended = false;
      // when 'finish' is emitted
      this.finished = false;

      // should we decode strings into buffers before passing to _write?
      // this is here so that some node-core streams can optimize string
      // handling at a lower level.
      var noDecode = options.decodeStrings === false;
      this.decodeStrings = !noDecode;

      // Crypto is kind of old and crusty.  Historically, its default string
      // encoding is 'binary' so we have to make this configurable.
      // Everything else in the universe uses 'utf8', though.
      this.defaultEncoding = options.defaultEncoding || 'utf8';

      // not an actual buffer we keep track of, but a measurement
      // of how much we're waiting to get pushed to some underlying
      // socket or file.
      this.length = 0;

      // a flag to see when we're in the middle of a write.
      this.writing = false;

      // when true all writes will be buffered until .uncork() call
      this.corked = 0;

      // a flag to be able to tell if the onwrite cb is called immediately,
      // or on a later tick.  We set this to true at first, because any
      // actions that shouldn't happen until "later" should generally also
      // not happen before the first write call.
      this.sync = true;

      // a flag to know if we're processing previously buffered items, which
      // may call the _write() callback in the same tick, so that we don't
      // end up in an overlapped onwrite situation.
      this.bufferProcessing = false;

      // the callback that's passed to _write(chunk,cb)
      this.onwrite = function (er) {
        onwrite(stream, er);
      };

      // the callback that the user supplies to write(chunk,encoding,cb)
      this.writecb = null;

      // the amount that is being written when _write is called.
      this.writelen = 0;

      this.bufferedRequest = null;
      this.lastBufferedRequest = null;

      // number of pending user-supplied write callbacks
      // this must be 0 before 'finish' can be emitted
      this.pendingcb = 0;

      // emit prefinish if the only thing we're waiting for is _write cbs
      // This is relevant for synchronous Transform streams
      this.prefinished = false;

      // True if the error was already emitted and should not be thrown again
      this.errorEmitted = false;

      // count buffered requests
      this.bufferedRequestCount = 0;

      // allocate the first CorkedRequest, there is always
      // one allocated and free to use, and we maintain at most two
      this.corkedRequestsFree = new CorkedRequest(this);
    }

    WritableState.prototype.getBuffer = function writableStateGetBuffer() {
      var current = this.bufferedRequest;
      var out = [];
      while (current) {
        out.push(current);
        current = current.next;
      }
      return out;
    };
    function Writable(options) {

      // Writable ctor is applied to Duplexes, though they're not
      // instanceof Writable, they're instanceof Readable.
      if (!(this instanceof Writable) && !(this instanceof Duplex)) return new Writable(options);

      this._writableState = new WritableState(options, this);

      // legacy.
      this.writable = true;

      if (options) {
        if (typeof options.write === 'function') this._write = options.write;

        if (typeof options.writev === 'function') this._writev = options.writev;
      }

      EventEmitter.call(this);
    }

    // Otherwise people can pipe Writable streams, which is just wrong.
    Writable.prototype.pipe = function () {
      this.emit('error', new Error('Cannot pipe, not readable'));
    };

    function writeAfterEnd(stream, cb) {
      var er = new Error('write after end');
      // TODO: defer error events consistently everywhere, not just the cb
      stream.emit('error', er);
      nextTick(cb, er);
    }

    // If we get something that is not a buffer, string, null, or undefined,
    // and we're not in objectMode, then that's an error.
    // Otherwise stream chunks are all considered to be of length=1, and the
    // watermarks determine how many objects to keep in the buffer, rather than
    // how many bytes or characters.
    function validChunk(stream, state, chunk, cb) {
      var valid = true;
      var er = false;
      // Always throw error if a null is written
      // if we are not in object mode then throw
      // if it is not a buffer, string, or undefined.
      if (chunk === null) {
        er = new TypeError('May not write null values to stream');
      } else if (!Buffer$1.isBuffer(chunk) && typeof chunk !== 'string' && chunk !== undefined && !state.objectMode) {
        er = new TypeError('Invalid non-string/buffer chunk');
      }
      if (er) {
        stream.emit('error', er);
        nextTick(cb, er);
        valid = false;
      }
      return valid;
    }

    Writable.prototype.write = function (chunk, encoding, cb) {
      var state = this._writableState;
      var ret = false;

      if (typeof encoding === 'function') {
        cb = encoding;
        encoding = null;
      }

      if (Buffer$1.isBuffer(chunk)) encoding = 'buffer';else if (!encoding) encoding = state.defaultEncoding;

      if (typeof cb !== 'function') cb = nop;

      if (state.ended) writeAfterEnd(this, cb);else if (validChunk(this, state, chunk, cb)) {
        state.pendingcb++;
        ret = writeOrBuffer(this, state, chunk, encoding, cb);
      }

      return ret;
    };

    Writable.prototype.cork = function () {
      var state = this._writableState;

      state.corked++;
    };

    Writable.prototype.uncork = function () {
      var state = this._writableState;

      if (state.corked) {
        state.corked--;

        if (!state.writing && !state.corked && !state.finished && !state.bufferProcessing && state.bufferedRequest) clearBuffer(this, state);
      }
    };

    Writable.prototype.setDefaultEncoding = function setDefaultEncoding(encoding) {
      // node::ParseEncoding() requires lower case.
      if (typeof encoding === 'string') encoding = encoding.toLowerCase();
      if (!(['hex', 'utf8', 'utf-8', 'ascii', 'binary', 'base64', 'ucs2', 'ucs-2', 'utf16le', 'utf-16le', 'raw'].indexOf((encoding + '').toLowerCase()) > -1)) throw new TypeError('Unknown encoding: ' + encoding);
      this._writableState.defaultEncoding = encoding;
      return this;
    };

    function decodeChunk(state, chunk, encoding) {
      if (!state.objectMode && state.decodeStrings !== false && typeof chunk === 'string') {
        chunk = Buffer$1.from(chunk, encoding);
      }
      return chunk;
    }

    // if we're already writing something, then just put this
    // in the queue, and wait our turn.  Otherwise, call _write
    // If we return false, then we need a drain event, so set that flag.
    function writeOrBuffer(stream, state, chunk, encoding, cb) {
      chunk = decodeChunk(state, chunk, encoding);

      if (Buffer$1.isBuffer(chunk)) encoding = 'buffer';
      var len = state.objectMode ? 1 : chunk.length;

      state.length += len;

      var ret = state.length < state.highWaterMark;
      // we must ensure that previous needDrain will not be reset to false.
      if (!ret) state.needDrain = true;

      if (state.writing || state.corked) {
        var last = state.lastBufferedRequest;
        state.lastBufferedRequest = new WriteReq(chunk, encoding, cb);
        if (last) {
          last.next = state.lastBufferedRequest;
        } else {
          state.bufferedRequest = state.lastBufferedRequest;
        }
        state.bufferedRequestCount += 1;
      } else {
        doWrite(stream, state, false, len, chunk, encoding, cb);
      }

      return ret;
    }

    function doWrite(stream, state, writev, len, chunk, encoding, cb) {
      state.writelen = len;
      state.writecb = cb;
      state.writing = true;
      state.sync = true;
      if (writev) stream._writev(chunk, state.onwrite);else stream._write(chunk, encoding, state.onwrite);
      state.sync = false;
    }

    function onwriteError(stream, state, sync, er, cb) {
      --state.pendingcb;
      if (sync) nextTick(cb, er);else cb(er);

      stream._writableState.errorEmitted = true;
      stream.emit('error', er);
    }

    function onwriteStateUpdate(state) {
      state.writing = false;
      state.writecb = null;
      state.length -= state.writelen;
      state.writelen = 0;
    }

    function onwrite(stream, er) {
      var state = stream._writableState;
      var sync = state.sync;
      var cb = state.writecb;

      onwriteStateUpdate(state);

      if (er) onwriteError(stream, state, sync, er, cb);else {
        // Check if we're actually ready to finish, but don't emit yet
        var finished = needFinish(state);

        if (!finished && !state.corked && !state.bufferProcessing && state.bufferedRequest) {
          clearBuffer(stream, state);
        }

        if (sync) {
          /*<replacement>*/
            nextTick(afterWrite, stream, state, finished, cb);
          /*</replacement>*/
        } else {
            afterWrite(stream, state, finished, cb);
          }
      }
    }

    function afterWrite(stream, state, finished, cb) {
      if (!finished) onwriteDrain(stream, state);
      state.pendingcb--;
      cb();
      finishMaybe(stream, state);
    }

    // Must force callback to be called on nextTick, so that we don't
    // emit 'drain' before the write() consumer gets the 'false' return
    // value, and has a chance to attach a 'drain' listener.
    function onwriteDrain(stream, state) {
      if (state.length === 0 && state.needDrain) {
        state.needDrain = false;
        stream.emit('drain');
      }
    }

    // if there's something in the buffer waiting, then process it
    function clearBuffer(stream, state) {
      state.bufferProcessing = true;
      var entry = state.bufferedRequest;

      if (stream._writev && entry && entry.next) {
        // Fast case, write everything using _writev()
        var l = state.bufferedRequestCount;
        var buffer = new Array(l);
        var holder = state.corkedRequestsFree;
        holder.entry = entry;

        var count = 0;
        while (entry) {
          buffer[count] = entry;
          entry = entry.next;
          count += 1;
        }

        doWrite(stream, state, true, state.length, buffer, '', holder.finish);

        // doWrite is almost always async, defer these to save a bit of time
        // as the hot path ends with doWrite
        state.pendingcb++;
        state.lastBufferedRequest = null;
        if (holder.next) {
          state.corkedRequestsFree = holder.next;
          holder.next = null;
        } else {
          state.corkedRequestsFree = new CorkedRequest(state);
        }
      } else {
        // Slow case, write chunks one-by-one
        while (entry) {
          var chunk = entry.chunk;
          var encoding = entry.encoding;
          var cb = entry.callback;
          var len = state.objectMode ? 1 : chunk.length;

          doWrite(stream, state, false, len, chunk, encoding, cb);
          entry = entry.next;
          // if we didn't call the onwrite immediately, then
          // it means that we need to wait until it does.
          // also, that means that the chunk and cb are currently
          // being processed, so move the buffer counter past them.
          if (state.writing) {
            break;
          }
        }

        if (entry === null) state.lastBufferedRequest = null;
      }

      state.bufferedRequestCount = 0;
      state.bufferedRequest = entry;
      state.bufferProcessing = false;
    }

    Writable.prototype._write = function (chunk, encoding, cb) {
      cb(new Error('not implemented'));
    };

    Writable.prototype._writev = null;

    Writable.prototype.end = function (chunk, encoding, cb) {
      var state = this._writableState;

      if (typeof chunk === 'function') {
        cb = chunk;
        chunk = null;
        encoding = null;
      } else if (typeof encoding === 'function') {
        cb = encoding;
        encoding = null;
      }

      if (chunk !== null && chunk !== undefined) this.write(chunk, encoding);

      // .end() fully uncorks
      if (state.corked) {
        state.corked = 1;
        this.uncork();
      }

      // ignore unnecessary end() calls.
      if (!state.ending && !state.finished) endWritable(this, state, cb);
    };

    function needFinish(state) {
      return state.ending && state.length === 0 && state.bufferedRequest === null && !state.finished && !state.writing;
    }

    function prefinish(stream, state) {
      if (!state.prefinished) {
        state.prefinished = true;
        stream.emit('prefinish');
      }
    }

    function finishMaybe(stream, state) {
      var need = needFinish(state);
      if (need) {
        if (state.pendingcb === 0) {
          prefinish(stream, state);
          state.finished = true;
          stream.emit('finish');
        } else {
          prefinish(stream, state);
        }
      }
      return need;
    }

    function endWritable(stream, state, cb) {
      state.ending = true;
      finishMaybe(stream, state);
      if (cb) {
        if (state.finished) nextTick(cb);else stream.once('finish', cb);
      }
      state.ended = true;
      stream.writable = false;
    }

    // It seems a linked list but it is not
    // there will be only 2 of these for each stream
    function CorkedRequest(state) {
      var _this = this;

      this.next = null;
      this.entry = null;

      this.finish = function (err) {
        var entry = _this.entry;
        _this.entry = null;
        while (entry) {
          var cb = entry.callback;
          state.pendingcb--;
          cb(err);
          entry = entry.next;
        }
        if (state.corkedRequestsFree) {
          state.corkedRequestsFree.next = _this;
        } else {
          state.corkedRequestsFree = _this;
        }
      };
    }

    inherits$1(Duplex, Readable);

    var keys = Object.keys(Writable.prototype);
    for (var v = 0; v < keys.length; v++) {
      var method = keys[v];
      if (!Duplex.prototype[method]) Duplex.prototype[method] = Writable.prototype[method];
    }
    function Duplex(options) {
      if (!(this instanceof Duplex)) return new Duplex(options);

      Readable.call(this, options);
      Writable.call(this, options);

      if (options && options.readable === false) this.readable = false;

      if (options && options.writable === false) this.writable = false;

      this.allowHalfOpen = true;
      if (options && options.allowHalfOpen === false) this.allowHalfOpen = false;

      this.once('end', onend);
    }

    // the no-half-open enforcer
    function onend() {
      // if we allow half-open state, or if the writable side ended,
      // then we're ok.
      if (this.allowHalfOpen || this._writableState.ended) return;

      // no more data can be written.
      // But allow more writes to happen in this tick.
      nextTick(onEndNT, this);
    }

    function onEndNT(self) {
      self.end();
    }

    // a transform stream is a readable/writable stream where you do
    inherits$1(Transform, Duplex);

    function TransformState(stream) {
      this.afterTransform = function (er, data) {
        return afterTransform(stream, er, data);
      };

      this.needTransform = false;
      this.transforming = false;
      this.writecb = null;
      this.writechunk = null;
      this.writeencoding = null;
    }

    function afterTransform(stream, er, data) {
      var ts = stream._transformState;
      ts.transforming = false;

      var cb = ts.writecb;

      if (!cb) return stream.emit('error', new Error('no writecb in Transform class'));

      ts.writechunk = null;
      ts.writecb = null;

      if (data !== null && data !== undefined) stream.push(data);

      cb(er);

      var rs = stream._readableState;
      rs.reading = false;
      if (rs.needReadable || rs.length < rs.highWaterMark) {
        stream._read(rs.highWaterMark);
      }
    }
    function Transform(options) {
      if (!(this instanceof Transform)) return new Transform(options);

      Duplex.call(this, options);

      this._transformState = new TransformState(this);

      // when the writable side finishes, then flush out anything remaining.
      var stream = this;

      // start out asking for a readable event once data is transformed.
      this._readableState.needReadable = true;

      // we have implemented the _read method, and done the other things
      // that Readable wants before the first _read call, so unset the
      // sync guard flag.
      this._readableState.sync = false;

      if (options) {
        if (typeof options.transform === 'function') this._transform = options.transform;

        if (typeof options.flush === 'function') this._flush = options.flush;
      }

      this.once('prefinish', function () {
        if (typeof this._flush === 'function') this._flush(function (er) {
          done(stream, er);
        });else done(stream);
      });
    }

    Transform.prototype.push = function (chunk, encoding) {
      this._transformState.needTransform = false;
      return Duplex.prototype.push.call(this, chunk, encoding);
    };

    // This is the part where you do stuff!
    // override this function in implementation classes.
    // 'chunk' is an input chunk.
    //
    // Call `push(newChunk)` to pass along transformed output
    // to the readable side.  You may call 'push' zero or more times.
    //
    // Call `cb(err)` when you are done with this chunk.  If you pass
    // an error, then that'll put the hurt on the whole operation.  If you
    // never call cb(), then you'll never get another chunk.
    Transform.prototype._transform = function (chunk, encoding, cb) {
      throw new Error('Not implemented');
    };

    Transform.prototype._write = function (chunk, encoding, cb) {
      var ts = this._transformState;
      ts.writecb = cb;
      ts.writechunk = chunk;
      ts.writeencoding = encoding;
      if (!ts.transforming) {
        var rs = this._readableState;
        if (ts.needTransform || rs.needReadable || rs.length < rs.highWaterMark) this._read(rs.highWaterMark);
      }
    };

    // Doesn't matter what the args are here.
    // _transform does all the work.
    // That we got here means that the readable side wants more data.
    Transform.prototype._read = function (n) {
      var ts = this._transformState;

      if (ts.writechunk !== null && ts.writecb && !ts.transforming) {
        ts.transforming = true;
        this._transform(ts.writechunk, ts.writeencoding, ts.afterTransform);
      } else {
        // mark that we need a transform, so that any data that comes in
        // will get processed, now that we've asked for it.
        ts.needTransform = true;
      }
    };

    function done(stream, er) {
      if (er) return stream.emit('error', er);

      // if there's nothing in the write buffer, then that means
      // that nothing more will ever be provided
      var ws = stream._writableState;
      var ts = stream._transformState;

      if (ws.length) throw new Error('Calling transform done when ws.length != 0');

      if (ts.transforming) throw new Error('Calling transform done when still transforming');

      return stream.push(null);
    }

    inherits$1(PassThrough, Transform);
    function PassThrough(options) {
      if (!(this instanceof PassThrough)) return new PassThrough(options);

      Transform.call(this, options);
    }

    PassThrough.prototype._transform = function (chunk, encoding, cb) {
      cb(null, chunk);
    };

    inherits$1(Stream, EventEmitter);
    Stream.Readable = Readable;
    Stream.Writable = Writable;
    Stream.Duplex = Duplex;
    Stream.Transform = Transform;
    Stream.PassThrough = PassThrough;

    // Backwards-compat with node 0.4.x
    Stream.Stream = Stream;

    // old-style streams.  Note that the pipe method (the only relevant
    // part of this class) is overridden in the Readable class.

    function Stream() {
      EventEmitter.call(this);
    }

    Stream.prototype.pipe = function(dest, options) {
      var source = this;

      function ondata(chunk) {
        if (dest.writable) {
          if (false === dest.write(chunk) && source.pause) {
            source.pause();
          }
        }
      }

      source.on('data', ondata);

      function ondrain() {
        if (source.readable && source.resume) {
          source.resume();
        }
      }

      dest.on('drain', ondrain);

      // If the 'end' option is not supplied, dest.end() will be called when
      // source gets the 'end' or 'close' events.  Only dest.end() once.
      if (!dest._isStdio && (!options || options.end !== false)) {
        source.on('end', onend);
        source.on('close', onclose);
      }

      var didOnEnd = false;
      function onend() {
        if (didOnEnd) return;
        didOnEnd = true;

        dest.end();
      }


      function onclose() {
        if (didOnEnd) return;
        didOnEnd = true;

        if (typeof dest.destroy === 'function') dest.destroy();
      }

      // don't leave dangling pipes when there are errors.
      function onerror(er) {
        cleanup();
        if (EventEmitter.listenerCount(this, 'error') === 0) {
          throw er; // Unhandled stream error in pipe.
        }
      }

      source.on('error', onerror);
      dest.on('error', onerror);

      // remove all the event listeners that were added.
      function cleanup() {
        source.removeListener('data', ondata);
        dest.removeListener('drain', ondrain);

        source.removeListener('end', onend);
        source.removeListener('close', onclose);

        source.removeListener('error', onerror);
        dest.removeListener('error', onerror);

        source.removeListener('end', cleanup);
        source.removeListener('close', cleanup);

        dest.removeListener('close', cleanup);
      }

      source.on('end', cleanup);
      source.on('close', cleanup);

      dest.on('close', cleanup);

      dest.emit('pipe', source);

      // Allow for unix-like usage: A.pipe(B).pipe(C)
      return dest;
    };

    const Generator = function(options = {}){
      // Convert Stream Readable options if underscored
      if(options.high_water_mark){
        options.highWaterMark = options.high_water_mark;
      }
      if(options.object_mode){
        options.objectMode = options.object_mode;
      }
      // Call parent constructor
      Stream.Readable.call(this, options);
      // Clone and camelize options
      this.options = {};
      for(const k in options){
        this.options[Generator.camelize(k)] = options[k];
      }
      // Normalize options
      const dft = {
        columns: 8,
        delimiter: ',',
        duration: null,
        encoding: null,
        end: null,
        eof: false,
        fixedSize: false,
        length: -1,
        maxWordLength: 16,
        rowDelimiter: '\n',
        seed: false,
        sleep: 0,
      };
      for(const k in dft){
        if(this.options[k] === undefined){
          this.options[k] = dft[k];
        }
      }
      // Default values
      if(this.options.eof === true){
        this.options.eof = this.options.rowDelimiter;
      }
      // State
      this._ = {
        start_time: this.options.duration ? Date.now() : null,
        fixed_size_buffer: '',
        count_written: 0,
        count_created: 0,
      };
      if(typeof this.options.columns === 'number'){
        this.options.columns = new Array(this.options.columns);
      }
      const accepted_header_types = Object.keys(Generator).filter((t) => (!['super_', 'camelize'].includes(t)));
      for(let i = 0; i < this.options.columns.length; i++){
        const v = this.options.columns[i] || 'ascii';
        if(typeof v === 'string'){
          if(!accepted_header_types.includes(v)){
            throw Error(`Invalid column type: got "${v}", default values are ${JSON.stringify(accepted_header_types)}`);
          }
          this.options.columns[i] = Generator[v];
        }
      }
      return this;
    };
    util.inherits(Generator, Stream.Readable);

    // Generate a random number between 0 and 1 with 2 decimals. The function is idempotent if it detect the "seed" option.
    Generator.prototype.random = function(){
      if(this.options.seed){
        return this.options.seed = this.options.seed * Math.PI * 100 % 100 / 100;
      }else {
        return Math.random();
      }
    };
    // Stop the generation.
    Generator.prototype.end = function(){
      this.push(null);
    };
    // Put new data into the read queue.
    Generator.prototype._read = function(size){
      // Already started
      const data = [];
      let length = this._.fixed_size_buffer.length;
      if(length !== 0){
        data.push(this._.fixed_size_buffer);
      }
      // eslint-disable-next-line
      while(true){
        // Time for some rest: flush first and stop later
        if((this._.count_created === this.options.length) || (this.options.end && Date.now() > this.options.end) || (this.options.duration && Date.now() > this._.start_time + this.options.duration)){
          // Flush
          if(data.length){
            if(this.options.objectMode){
              for(const record of data){
                this.__push(record);
              }
            }else {
              this.__push(data.join('') + (this.options.eof ? this.options.eof : ''));
            }
            this._.end = true;
          }else {
            this.push(null);
          }
          return;
        }
        // Create the record
        let record = [];
        let recordLength;
        this.options.columns.forEach((fn) => {
          record.push(fn(this));
        });
        // Obtain record length
        if(this.options.objectMode){
          recordLength = 0;
          // recordLength is currently equal to the number of columns
          // This is wrong and shall equal to 1 record only
          for(const column of record)
            recordLength += column.length;
        }else {
          // Stringify the record
          record = (this._.count_created === 0 ? '' : this.options.rowDelimiter)+record.join(this.options.delimiter);
          recordLength = record.length;
        }
        this._.count_created++;
        if(length + recordLength > size){
          if(this.options.objectMode){
            data.push(record);
            for(const record of data){
              this.__push(record);
            }
          }else {
            if(this.options.fixedSize){
              this._.fixed_size_buffer = record.substr(size - length);
              data.push(record.substr(0, size - length));
            }else {
              data.push(record);
            }
            this.__push(data.join(''));
          }
          return;
        }
        length += recordLength;
        data.push(record);
      }
    };
    // Put new data into the read queue.
    Generator.prototype.__push = function(record){
      const push = () => {
        this._.count_written++;
        this.push(record);
        if(this._.end === true){
          return this.push(null);
        }
      };
      this.options.sleep > 0 ? setTimeout(push, this.options.sleep) : push();
    };
    // Generate an ASCII value.
    Generator.ascii = function(gen){
      // Column
      const column = [];
      const nb_chars = Math.ceil(gen.random() * gen.options.maxWordLength);
      for(let i=0; i<nb_chars; i++){
        const char = Math.floor(gen.random() * 32);
        column.push(String.fromCharCode(char + (char < 16 ? 65 : 97 - 16)));
      }
      return column.join('');
    };
    // Generate an integer value.
    Generator.int = function(gen){
      return Math.floor(gen.random() * Math.pow(2, 52));
    };
    // Generate an boolean value.
    Generator.bool = function(gen){
      return Math.floor(gen.random() * 2);
    };
    // Camelize option properties
    Generator.camelize = function(str){
      return str.replace(/_([a-z])/gi, function(_, match){
        return match.toUpperCase();
      });
    };

    class ResizeableBuffer{
      constructor(size=100){
        this.size = size;
        this.length = 0;
        this.buf = Buffer$1.allocUnsafe(size);
      }
      prepend(val){
        if(Buffer$1.isBuffer(val)){
          const length = this.length + val.length;
          if(length >= this.size){
            this.resize();
            if(length >= this.size){
              throw Error('INVALID_BUFFER_STATE');
            }
          }
          const buf = this.buf;
          this.buf = Buffer$1.allocUnsafe(this.size);
          val.copy(this.buf, 0);
          buf.copy(this.buf, val.length);
          this.length += val.length;
        }else {
          const length = this.length++;
          if(length === this.size){
            this.resize();
          }
          const buf = this.clone();
          this.buf[0] = val;
          buf.copy(this.buf,1, 0, length);
        }
      }
      append(val){
        const length = this.length++;
        if(length === this.size){
          this.resize();
        }
        this.buf[length] = val;
      }
      clone(){
        return Buffer$1.from(this.buf.slice(0, this.length));
      }
      resize(){
        const length = this.length;
        this.size = this.size * 2;
        const buf = Buffer$1.allocUnsafe(this.size);
        this.buf.copy(buf,0, 0, length);
        this.buf = buf;
      }
      toString(encoding){
        if(encoding){
          return this.buf.slice(0, this.length).toString(encoding);
        }else {
          return Uint8Array.prototype.slice.call(this.buf.slice(0, this.length));
        }
      }
      toJSON(){
        return this.toString('utf8');
      }
      reset(){
        this.length = 0;
      }
    }

    // white space characters
    // https://en.wikipedia.org/wiki/Whitespace_character
    // https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Regular_Expressions/Character_Classes#Types
    // \f\n\r\t\v\u00a0\u1680\u2000-\u200a\u2028\u2029\u202f\u205f\u3000\ufeff
    const tab = 9;
    const nl = 10; // \n, 0x0A in hexadecimal, 10 in decimal
    const np = 12;
    const cr = 13; // \r, 0x0D in hexadécimal, 13 in decimal
    const space = 32;
    const boms = {
      // Note, the following are equals:
      // Buffer.from("\ufeff")
      // Buffer.from([239, 187, 191])
      // Buffer.from('EFBBBF', 'hex')
      'utf8': Buffer$1.from([239, 187, 191]),
      // Note, the following are equals:
      // Buffer.from "\ufeff", 'utf16le
      // Buffer.from([255, 254])
      'utf16le': Buffer$1.from([255, 254])
    };

    class CsvError$1 extends Error {
      constructor(code, message, options, ...contexts) {
        if(Array.isArray(message)) message = message.join(' ');
        super(message);
        if(Error.captureStackTrace !== undefined){
          Error.captureStackTrace(this, CsvError$1);
        }
        this.code = code;
        for(const context of contexts){
          for(const key in context){
            const value = context[key];
            this[key] = Buffer$1.isBuffer(value) ? value.toString(options.encoding) : value == null ? value : JSON.parse(JSON.stringify(value));
          }
        }
      }
    }

    const underscore$1 = function(str){
      return str.replace(/([A-Z])/g, function(_, match){
        return '_' + match.toLowerCase();
      });
    };

    const isObject$1 = function(obj){
      return (typeof obj === 'object' && obj !== null && !Array.isArray(obj));
    };

    const isRecordEmpty = function(record){
      return record.every((field) => field == null || field.toString && field.toString().trim() === '');
    };

    const normalizeColumnsArray = function(columns){
      const normalizedColumns = [];
      for(let i = 0, l = columns.length; i < l; i++){
        const column = columns[i];
        if(column === undefined || column === null || column === false){
          normalizedColumns[i] = { disabled: true };
        }else if(typeof column === 'string'){
          normalizedColumns[i] = { name: column };
        }else if(isObject$1(column)){
          if(typeof column.name !== 'string'){
            throw new CsvError$1('CSV_OPTION_COLUMNS_MISSING_NAME', [
              'Option columns missing name:',
              `property "name" is required at position ${i}`,
              'when column is an object literal'
            ]);
          }
          normalizedColumns[i] = column;
        }else {
          throw new CsvError$1('CSV_INVALID_COLUMN_DEFINITION', [
            'Invalid column definition:',
            'expect a string or a literal object,',
            `got ${JSON.stringify(column)} at position ${i}`
          ]);
        }
      }
      return normalizedColumns;
    };

    class Parser extends Transform {
      constructor(opts = {}){
        super({...{readableObjectMode: true}, ...opts, encoding: null});
        this.__originalOptions = opts;
        this.__normalizeOptions(opts);
      }
      __normalizeOptions(opts){
        const options = {};
        // Merge with user options
        for(const opt in opts){
          options[underscore$1(opt)] = opts[opt];
        }
        // Normalize option `encoding`
        // Note: defined first because other options depends on it
        // to convert chars/strings into buffers.
        if(options.encoding === undefined || options.encoding === true){
          options.encoding = 'utf8';
        }else if(options.encoding === null || options.encoding === false){
          options.encoding = null;
        }else if(typeof options.encoding !== 'string' && options.encoding !== null){
          throw new CsvError$1('CSV_INVALID_OPTION_ENCODING', [
            'Invalid option encoding:',
            'encoding must be a string or null to return a buffer,',
            `got ${JSON.stringify(options.encoding)}`
          ], options);
        }
        // Normalize option `bom`
        if(options.bom === undefined || options.bom === null || options.bom === false){
          options.bom = false;
        }else if(options.bom !== true){
          throw new CsvError$1('CSV_INVALID_OPTION_BOM', [
            'Invalid option bom:', 'bom must be true,',
            `got ${JSON.stringify(options.bom)}`
          ], options);
        }
        // Normalize option `cast`
        let fnCastField = null;
        if(options.cast === undefined || options.cast === null || options.cast === false || options.cast === ''){
          options.cast = undefined;
        }else if(typeof options.cast === 'function'){
          fnCastField = options.cast;
          options.cast = true;
        }else if(options.cast !== true){
          throw new CsvError$1('CSV_INVALID_OPTION_CAST', [
            'Invalid option cast:', 'cast must be true or a function,',
            `got ${JSON.stringify(options.cast)}`
          ], options);
        }
        // Normalize option `cast_date`
        if(options.cast_date === undefined || options.cast_date === null || options.cast_date === false || options.cast_date === ''){
          options.cast_date = false;
        }else if(options.cast_date === true){
          options.cast_date = function(value){
            const date = Date.parse(value);
            return !isNaN(date) ? new Date(date) : value;
          };
        }else {
          throw new CsvError$1('CSV_INVALID_OPTION_CAST_DATE', [
            'Invalid option cast_date:', 'cast_date must be true or a function,',
            `got ${JSON.stringify(options.cast_date)}`
          ], options);
        }
        // Normalize option `columns`
        let fnFirstLineToHeaders = null;
        if(options.columns === true){
          // Fields in the first line are converted as-is to columns
          fnFirstLineToHeaders = undefined;
        }else if(typeof options.columns === 'function'){
          fnFirstLineToHeaders = options.columns;
          options.columns = true;
        }else if(Array.isArray(options.columns)){
          options.columns = normalizeColumnsArray(options.columns);
        }else if(options.columns === undefined || options.columns === null || options.columns === false){
          options.columns = false;
        }else {
          throw new CsvError$1('CSV_INVALID_OPTION_COLUMNS', [
            'Invalid option columns:',
            'expect an array, a function or true,',
            `got ${JSON.stringify(options.columns)}`
          ], options);
        }
        // Normalize option `group_columns_by_name`
        if(options.group_columns_by_name === undefined || options.group_columns_by_name === null || options.group_columns_by_name === false){
          options.group_columns_by_name = false;
        }else if(options.group_columns_by_name !== true){
          throw new CsvError$1('CSV_INVALID_OPTION_GROUP_COLUMNS_BY_NAME', [
            'Invalid option group_columns_by_name:',
            'expect an boolean,',
            `got ${JSON.stringify(options.group_columns_by_name)}`
          ], options);
        }else if(options.columns === false){
          throw new CsvError$1('CSV_INVALID_OPTION_GROUP_COLUMNS_BY_NAME', [
            'Invalid option group_columns_by_name:',
            'the `columns` mode must be activated.'
          ], options);
        }
        // Normalize option `comment`
        if(options.comment === undefined || options.comment === null || options.comment === false || options.comment === ''){
          options.comment = null;
        }else {
          if(typeof options.comment === 'string'){
            options.comment = Buffer$1.from(options.comment, options.encoding);
          }
          if(!Buffer$1.isBuffer(options.comment)){
            throw new CsvError$1('CSV_INVALID_OPTION_COMMENT', [
              'Invalid option comment:',
              'comment must be a buffer or a string,',
              `got ${JSON.stringify(options.comment)}`
            ], options);
          }
        }
        // Normalize option `delimiter`
        const delimiter_json = JSON.stringify(options.delimiter);
        if(!Array.isArray(options.delimiter)) options.delimiter = [options.delimiter];
        if(options.delimiter.length === 0){
          throw new CsvError$1('CSV_INVALID_OPTION_DELIMITER', [
            'Invalid option delimiter:',
            'delimiter must be a non empty string or buffer or array of string|buffer,',
            `got ${delimiter_json}`
          ], options);
        }
        options.delimiter = options.delimiter.map(function(delimiter){
          if(delimiter === undefined || delimiter === null || delimiter === false){
            return Buffer$1.from(',', options.encoding);
          }
          if(typeof delimiter === 'string'){
            delimiter = Buffer$1.from(delimiter, options.encoding);
          }
          if(!Buffer$1.isBuffer(delimiter) || delimiter.length === 0){
            throw new CsvError$1('CSV_INVALID_OPTION_DELIMITER', [
              'Invalid option delimiter:',
              'delimiter must be a non empty string or buffer or array of string|buffer,',
              `got ${delimiter_json}`
            ], options);
          }
          return delimiter;
        });
        // Normalize option `escape`
        if(options.escape === undefined || options.escape === true){
          options.escape = Buffer$1.from('"', options.encoding);
        }else if(typeof options.escape === 'string'){
          options.escape = Buffer$1.from(options.escape, options.encoding);
        }else if (options.escape === null || options.escape === false){
          options.escape = null;
        }
        if(options.escape !== null){
          if(!Buffer$1.isBuffer(options.escape)){
            throw new Error(`Invalid Option: escape must be a buffer, a string or a boolean, got ${JSON.stringify(options.escape)}`);
          }
        }
        // Normalize option `from`
        if(options.from === undefined || options.from === null){
          options.from = 1;
        }else {
          if(typeof options.from === 'string' && /\d+/.test(options.from)){
            options.from = parseInt(options.from);
          }
          if(Number.isInteger(options.from)){
            if(options.from < 0){
              throw new Error(`Invalid Option: from must be a positive integer, got ${JSON.stringify(opts.from)}`);
            }
          }else {
            throw new Error(`Invalid Option: from must be an integer, got ${JSON.stringify(options.from)}`);
          }
        }
        // Normalize option `from_line`
        if(options.from_line === undefined || options.from_line === null){
          options.from_line = 1;
        }else {
          if(typeof options.from_line === 'string' && /\d+/.test(options.from_line)){
            options.from_line = parseInt(options.from_line);
          }
          if(Number.isInteger(options.from_line)){
            if(options.from_line <= 0){
              throw new Error(`Invalid Option: from_line must be a positive integer greater than 0, got ${JSON.stringify(opts.from_line)}`);
            }
          }else {
            throw new Error(`Invalid Option: from_line must be an integer, got ${JSON.stringify(opts.from_line)}`);
          }
        }
        // Normalize options `ignore_last_delimiters`
        if(options.ignore_last_delimiters === undefined || options.ignore_last_delimiters === null){
          options.ignore_last_delimiters = false;
        }else if(typeof options.ignore_last_delimiters === 'number'){
          options.ignore_last_delimiters = Math.floor(options.ignore_last_delimiters);
          if(options.ignore_last_delimiters === 0){
            options.ignore_last_delimiters = false;
          }
        }else if(typeof options.ignore_last_delimiters !== 'boolean'){
          throw new CsvError$1('CSV_INVALID_OPTION_IGNORE_LAST_DELIMITERS', [
            'Invalid option `ignore_last_delimiters`:',
            'the value must be a boolean value or an integer,',
            `got ${JSON.stringify(options.ignore_last_delimiters)}`
          ], options);
        }
        if(options.ignore_last_delimiters === true && options.columns === false){
          throw new CsvError$1('CSV_IGNORE_LAST_DELIMITERS_REQUIRES_COLUMNS', [
            'The option `ignore_last_delimiters`',
            'requires the activation of the `columns` option'
          ], options);
        }
        // Normalize option `info`
        if(options.info === undefined || options.info === null || options.info === false){
          options.info = false;
        }else if(options.info !== true){
          throw new Error(`Invalid Option: info must be true, got ${JSON.stringify(options.info)}`);
        }
        // Normalize option `max_record_size`
        if(options.max_record_size === undefined || options.max_record_size === null || options.max_record_size === false){
          options.max_record_size = 0;
        }else if(Number.isInteger(options.max_record_size) && options.max_record_size >= 0);else if(typeof options.max_record_size === 'string' && /\d+/.test(options.max_record_size)){
          options.max_record_size = parseInt(options.max_record_size);
        }else {
          throw new Error(`Invalid Option: max_record_size must be a positive integer, got ${JSON.stringify(options.max_record_size)}`);
        }
        // Normalize option `objname`
        if(options.objname === undefined || options.objname === null || options.objname === false){
          options.objname = undefined;
        }else if(Buffer$1.isBuffer(options.objname)){
          if(options.objname.length === 0){
            throw new Error(`Invalid Option: objname must be a non empty buffer`);
          }
          if(options.encoding === null);else {
            options.objname = options.objname.toString(options.encoding);
          }
        }else if(typeof options.objname === 'string'){
          if(options.objname.length === 0){
            throw new Error(`Invalid Option: objname must be a non empty string`);
          }
          // Great, nothing to do
        }else if(typeof options.objname === 'number');else {
          throw new Error(`Invalid Option: objname must be a string or a buffer, got ${options.objname}`);
        }
        if(options.objname !== undefined){
          if(typeof options.objname === 'number'){
            if(options.columns !== false){
              throw Error('Invalid Option: objname index cannot be combined with columns or be defined as a field');
            }
          }else { // A string or a buffer
            if(options.columns === false){
              throw Error('Invalid Option: objname field must be combined with columns or be defined as an index');
            }
          }
        }
        // Normalize option `on_record`
        if(options.on_record === undefined || options.on_record === null){
          options.on_record = undefined;
        }else if(typeof options.on_record !== 'function'){
          throw new CsvError$1('CSV_INVALID_OPTION_ON_RECORD', [
            'Invalid option `on_record`:',
            'expect a function,',
            `got ${JSON.stringify(options.on_record)}`
          ], options);
        }
        // Normalize option `quote`
        if(options.quote === null || options.quote === false || options.quote === ''){
          options.quote = null;
        }else {
          if(options.quote === undefined || options.quote === true){
            options.quote = Buffer$1.from('"', options.encoding);
          }else if(typeof options.quote === 'string'){
            options.quote = Buffer$1.from(options.quote, options.encoding);
          }
          if(!Buffer$1.isBuffer(options.quote)){
            throw new Error(`Invalid Option: quote must be a buffer or a string, got ${JSON.stringify(options.quote)}`);
          }
        }
        // Normalize option `raw`
        if(options.raw === undefined || options.raw === null || options.raw === false){
          options.raw = false;
        }else if(options.raw !== true){
          throw new Error(`Invalid Option: raw must be true, got ${JSON.stringify(options.raw)}`);
        }
        // Normalize option `record_delimiter`
        if(options.record_delimiter === undefined){
          options.record_delimiter = [];
        }else if(typeof options.record_delimiter === 'string' || Buffer$1.isBuffer(options.record_delimiter)){
          if(options.record_delimiter.length === 0){
            throw new CsvError$1('CSV_INVALID_OPTION_RECORD_DELIMITER', [
              'Invalid option `record_delimiter`:',
              'value must be a non empty string or buffer,',
              `got ${JSON.stringify(options.record_delimiter)}`
            ], options);
          }
          options.record_delimiter = [options.record_delimiter];
        }else if(!Array.isArray(options.record_delimiter)){
          throw new CsvError$1('CSV_INVALID_OPTION_RECORD_DELIMITER', [
            'Invalid option `record_delimiter`:',
            'value must be a string, a buffer or array of string|buffer,',
            `got ${JSON.stringify(options.record_delimiter)}`
          ], options);
        }
        options.record_delimiter = options.record_delimiter.map(function(rd, i){
          if(typeof rd !== 'string' && ! Buffer$1.isBuffer(rd)){
            throw new CsvError$1('CSV_INVALID_OPTION_RECORD_DELIMITER', [
              'Invalid option `record_delimiter`:',
              'value must be a string, a buffer or array of string|buffer',
              `at index ${i},`,
              `got ${JSON.stringify(rd)}`
            ], options);
          }else if(rd.length === 0){
            throw new CsvError$1('CSV_INVALID_OPTION_RECORD_DELIMITER', [
              'Invalid option `record_delimiter`:',
              'value must be a non empty string or buffer',
              `at index ${i},`,
              `got ${JSON.stringify(rd)}`
            ], options);
          }
          if(typeof rd === 'string'){
            rd = Buffer$1.from(rd, options.encoding);
          }
          return rd;
        });
        // Normalize option `relax_column_count`
        if(typeof options.relax_column_count === 'boolean');else if(options.relax_column_count === undefined || options.relax_column_count === null){
          options.relax_column_count = false;
        }else {
          throw new Error(`Invalid Option: relax_column_count must be a boolean, got ${JSON.stringify(options.relax_column_count)}`);
        }
        if(typeof options.relax_column_count_less === 'boolean');else if(options.relax_column_count_less === undefined || options.relax_column_count_less === null){
          options.relax_column_count_less = false;
        }else {
          throw new Error(`Invalid Option: relax_column_count_less must be a boolean, got ${JSON.stringify(options.relax_column_count_less)}`);
        }
        if(typeof options.relax_column_count_more === 'boolean');else if(options.relax_column_count_more === undefined || options.relax_column_count_more === null){
          options.relax_column_count_more = false;
        }else {
          throw new Error(`Invalid Option: relax_column_count_more must be a boolean, got ${JSON.stringify(options.relax_column_count_more)}`);
        }
        // Normalize option `relax_quotes`
        if(typeof options.relax_quotes === 'boolean');else if(options.relax_quotes === undefined || options.relax_quotes === null){
          options.relax_quotes = false;
        }else {
          throw new Error(`Invalid Option: relax_quotes must be a boolean, got ${JSON.stringify(options.relax_quotes)}`);
        }
        // Normalize option `skip_empty_lines`
        if(typeof options.skip_empty_lines === 'boolean');else if(options.skip_empty_lines === undefined || options.skip_empty_lines === null){
          options.skip_empty_lines = false;
        }else {
          throw new Error(`Invalid Option: skip_empty_lines must be a boolean, got ${JSON.stringify(options.skip_empty_lines)}`);
        }
        // Normalize option `skip_records_with_empty_values`
        if(typeof options.skip_records_with_empty_values === 'boolean');else if(options.skip_records_with_empty_values === undefined || options.skip_records_with_empty_values === null){
          options.skip_records_with_empty_values = false;
        }else {
          throw new Error(`Invalid Option: skip_records_with_empty_values must be a boolean, got ${JSON.stringify(options.skip_records_with_empty_values)}`);
        }
        // Normalize option `skip_records_with_error`
        if(typeof options.skip_records_with_error === 'boolean');else if(options.skip_records_with_error === undefined || options.skip_records_with_error === null){
          options.skip_records_with_error = false;
        }else {
          throw new Error(`Invalid Option: skip_records_with_error must be a boolean, got ${JSON.stringify(options.skip_records_with_error)}`);
        }
        // Normalize option `rtrim`
        if(options.rtrim === undefined || options.rtrim === null || options.rtrim === false){
          options.rtrim = false;
        }else if(options.rtrim !== true){
          throw new Error(`Invalid Option: rtrim must be a boolean, got ${JSON.stringify(options.rtrim)}`);
        }
        // Normalize option `ltrim`
        if(options.ltrim === undefined || options.ltrim === null || options.ltrim === false){
          options.ltrim = false;
        }else if(options.ltrim !== true){
          throw new Error(`Invalid Option: ltrim must be a boolean, got ${JSON.stringify(options.ltrim)}`);
        }
        // Normalize option `trim`
        if(options.trim === undefined || options.trim === null || options.trim === false){
          options.trim = false;
        }else if(options.trim !== true){
          throw new Error(`Invalid Option: trim must be a boolean, got ${JSON.stringify(options.trim)}`);
        }
        // Normalize options `trim`, `ltrim` and `rtrim`
        if(options.trim === true && opts.ltrim !== false){
          options.ltrim = true;
        }else if(options.ltrim !== true){
          options.ltrim = false;
        }
        if(options.trim === true && opts.rtrim !== false){
          options.rtrim = true;
        }else if(options.rtrim !== true){
          options.rtrim = false;
        }
        // Normalize option `to`
        if(options.to === undefined || options.to === null){
          options.to = -1;
        }else {
          if(typeof options.to === 'string' && /\d+/.test(options.to)){
            options.to = parseInt(options.to);
          }
          if(Number.isInteger(options.to)){
            if(options.to <= 0){
              throw new Error(`Invalid Option: to must be a positive integer greater than 0, got ${JSON.stringify(opts.to)}`);
            }
          }else {
            throw new Error(`Invalid Option: to must be an integer, got ${JSON.stringify(opts.to)}`);
          }
        }
        // Normalize option `to_line`
        if(options.to_line === undefined || options.to_line === null){
          options.to_line = -1;
        }else {
          if(typeof options.to_line === 'string' && /\d+/.test(options.to_line)){
            options.to_line = parseInt(options.to_line);
          }
          if(Number.isInteger(options.to_line)){
            if(options.to_line <= 0){
              throw new Error(`Invalid Option: to_line must be a positive integer greater than 0, got ${JSON.stringify(opts.to_line)}`);
            }
          }else {
            throw new Error(`Invalid Option: to_line must be an integer, got ${JSON.stringify(opts.to_line)}`);
          }
        }
        this.info = {
          bytes: 0,
          comment_lines: 0,
          empty_lines: 0,
          invalid_field_length: 0,
          lines: 1,
          records: 0
        };
        this.options = options;
        this.state = {
          bomSkipped: false,
          bufBytesStart: 0,
          castField: fnCastField,
          commenting: false,
          // Current error encountered by a record
          error: undefined,
          enabled: options.from_line === 1,
          escaping: false,
          escapeIsQuote: Buffer$1.isBuffer(options.escape) && Buffer$1.isBuffer(options.quote) && Buffer$1.compare(options.escape, options.quote) === 0,
          // columns can be `false`, `true`, `Array`
          expectedRecordLength: Array.isArray(options.columns) ? options.columns.length : undefined,
          field: new ResizeableBuffer(20),
          firstLineToHeaders: fnFirstLineToHeaders,
          needMoreDataSize: Math.max(
            // Skip if the remaining buffer smaller than comment
            options.comment !== null ? options.comment.length : 0,
            // Skip if the remaining buffer can be delimiter
            ...options.delimiter.map((delimiter) => delimiter.length),
            // Skip if the remaining buffer can be escape sequence
            options.quote !== null ? options.quote.length : 0,
          ),
          previousBuf: undefined,
          quoting: false,
          stop: false,
          rawBuffer: new ResizeableBuffer(100),
          record: [],
          recordHasError: false,
          record_length: 0,
          recordDelimiterMaxLength: options.record_delimiter.length === 0 ? 2 : Math.max(...options.record_delimiter.map((v) => v.length)),
          trimChars: [Buffer$1.from(' ', options.encoding)[0], Buffer$1.from('\t', options.encoding)[0]],
          wasQuoting: false,
          wasRowDelimiter: false
        };
      }
      // Implementation of `Transform._transform`
      _transform(buf, encoding, callback){
        if(this.state.stop === true){
          return;
        }
        const err = this.__parse(buf, false);
        if(err !== undefined){
          this.state.stop = true;
        }
        callback(err);
      }
      // Implementation of `Transform._flush`
      _flush(callback){
        if(this.state.stop === true){
          return;
        }
        const err = this.__parse(undefined, true);
        callback(err);
      }
      // Central parser implementation
      __parse(nextBuf, end){
        const {bom, comment, escape, from_line, ltrim, max_record_size, quote, raw, relax_quotes, rtrim, skip_empty_lines, to, to_line} = this.options;
        let {record_delimiter} = this.options;
        const {bomSkipped, previousBuf, rawBuffer, escapeIsQuote} = this.state;
        let buf;
        if(previousBuf === undefined){
          if(nextBuf === undefined){
            // Handle empty string
            this.push(null);
            return;
          }else {
            buf = nextBuf;
          }
        }else if(previousBuf !== undefined && nextBuf === undefined){
          buf = previousBuf;
        }else {
          buf = Buffer$1.concat([previousBuf, nextBuf]);
        }
        // Handle UTF BOM
        if(bomSkipped === false){
          if(bom === false){
            this.state.bomSkipped = true;
          }else if(buf.length < 3){
            // No enough data
            if(end === false){
              // Wait for more data
              this.state.previousBuf = buf;
              return;
            }
          }else {
            for(const encoding in boms){
              if(boms[encoding].compare(buf, 0, boms[encoding].length) === 0){
                // Skip BOM
                const bomLength = boms[encoding].length;
                this.state.bufBytesStart += bomLength;
                buf = buf.slice(bomLength);
                // Renormalize original options with the new encoding
                this.__normalizeOptions({...this.__originalOptions, encoding: encoding});
                break;
              }
            }
            this.state.bomSkipped = true;
          }
        }
        const bufLen = buf.length;
        let pos;
        for(pos = 0; pos < bufLen; pos++){
          // Ensure we get enough space to look ahead
          // There should be a way to move this out of the loop
          if(this.__needMoreData(pos, bufLen, end)){
            break;
          }
          if(this.state.wasRowDelimiter === true){
            this.info.lines++;
            this.state.wasRowDelimiter = false;
          }
          if(to_line !== -1 && this.info.lines > to_line){
            this.state.stop = true;
            this.push(null);
            return;
          }
          // Auto discovery of record_delimiter, unix, mac and windows supported
          if(this.state.quoting === false && record_delimiter.length === 0){
            const record_delimiterCount = this.__autoDiscoverRecordDelimiter(buf, pos);
            if(record_delimiterCount){
              record_delimiter = this.options.record_delimiter;
            }
          }
          const chr = buf[pos];
          if(raw === true){
            rawBuffer.append(chr);
          }
          if((chr === cr || chr === nl) && this.state.wasRowDelimiter === false){
            this.state.wasRowDelimiter = true;
          }
          // Previous char was a valid escape char
          // treat the current char as a regular char
          if(this.state.escaping === true){
            this.state.escaping = false;
          }else {
            // Escape is only active inside quoted fields
            // We are quoting, the char is an escape chr and there is a chr to escape
            // if(escape !== null && this.state.quoting === true && chr === escape && pos + 1 < bufLen){
            if(escape !== null && this.state.quoting === true && this.__isEscape(buf, pos, chr) && pos + escape.length < bufLen){
              if(escapeIsQuote){
                if(this.__isQuote(buf, pos+escape.length)){
                  this.state.escaping = true;
                  pos += escape.length - 1;
                  continue;
                }
              }else {
                this.state.escaping = true;
                pos += escape.length - 1;
                continue;
              }
            }
            // Not currently escaping and chr is a quote
            // TODO: need to compare bytes instead of single char
            if(this.state.commenting === false && this.__isQuote(buf, pos)){
              if(this.state.quoting === true){
                const nextChr = buf[pos+quote.length];
                const isNextChrTrimable = rtrim && this.__isCharTrimable(nextChr);
                const isNextChrComment = comment !== null && this.__compareBytes(comment, buf, pos+quote.length, nextChr);
                const isNextChrDelimiter = this.__isDelimiter(buf, pos+quote.length, nextChr);
                const isNextChrRecordDelimiter = record_delimiter.length === 0 ? this.__autoDiscoverRecordDelimiter(buf, pos+quote.length) : this.__isRecordDelimiter(nextChr, buf, pos+quote.length);
                // Escape a quote
                // Treat next char as a regular character
                if(escape !== null && this.__isEscape(buf, pos, chr) && this.__isQuote(buf, pos + escape.length)){
                  pos += escape.length - 1;
                }else if(!nextChr || isNextChrDelimiter || isNextChrRecordDelimiter || isNextChrComment || isNextChrTrimable){
                  this.state.quoting = false;
                  this.state.wasQuoting = true;
                  pos += quote.length - 1;
                  continue;
                }else if(relax_quotes === false){
                  const err = this.__error(
                    new CsvError$1('CSV_INVALID_CLOSING_QUOTE', [
                      'Invalid Closing Quote:',
                      `got "${String.fromCharCode(nextChr)}"`,
                      `at line ${this.info.lines}`,
                      'instead of delimiter, record delimiter, trimable character',
                      '(if activated) or comment',
                    ], this.options, this.__infoField())
                  );
                  if(err !== undefined) return err;
                }else {
                  this.state.quoting = false;
                  this.state.wasQuoting = true;
                  this.state.field.prepend(quote);
                  pos += quote.length - 1;
                }
              }else {
                if(this.state.field.length !== 0){
                  // In relax_quotes mode, treat opening quote preceded by chrs as regular
                  if(relax_quotes === false){
                    const err = this.__error(
                      new CsvError$1('INVALID_OPENING_QUOTE', [
                        'Invalid Opening Quote:',
                        `a quote is found inside a field at line ${this.info.lines}`,
                      ], this.options, this.__infoField(), {
                        field: this.state.field,
                      })
                    );
                    if(err !== undefined) return err;
                  }
                }else {
                  this.state.quoting = true;
                  pos += quote.length - 1;
                  continue;
                }
              }
            }
            if(this.state.quoting === false){
              const recordDelimiterLength = this.__isRecordDelimiter(chr, buf, pos);
              if(recordDelimiterLength !== 0){
                // Do not emit comments which take a full line
                const skipCommentLine = this.state.commenting && (this.state.wasQuoting === false && this.state.record.length === 0 && this.state.field.length === 0);
                if(skipCommentLine){
                  this.info.comment_lines++;
                  // Skip full comment line
                }else {
                  // Activate records emition if above from_line
                  if(this.state.enabled === false && this.info.lines + (this.state.wasRowDelimiter === true ? 1: 0) >= from_line){
                    this.state.enabled = true;
                    this.__resetField();
                    this.__resetRecord();
                    pos += recordDelimiterLength - 1;
                    continue;
                  }
                  // Skip if line is empty and skip_empty_lines activated
                  if(skip_empty_lines === true && this.state.wasQuoting === false && this.state.record.length === 0 && this.state.field.length === 0){
                    this.info.empty_lines++;
                    pos += recordDelimiterLength - 1;
                    continue;
                  }
                  this.info.bytes = this.state.bufBytesStart + pos;
                  const errField = this.__onField();
                  if(errField !== undefined) return errField;
                  this.info.bytes = this.state.bufBytesStart + pos + recordDelimiterLength;
                  const errRecord = this.__onRecord();
                  if(errRecord !== undefined) return errRecord;
                  if(to !== -1 && this.info.records >= to){
                    this.state.stop = true;
                    this.push(null);
                    return;
                  }
                }
                this.state.commenting = false;
                pos += recordDelimiterLength - 1;
                continue;
              }
              if(this.state.commenting){
                continue;
              }
              const commentCount = comment === null ? 0 : this.__compareBytes(comment, buf, pos, chr);
              if(commentCount !== 0){
                this.state.commenting = true;
                continue;
              }
              const delimiterLength = this.__isDelimiter(buf, pos, chr);
              if(delimiterLength !== 0){
                this.info.bytes = this.state.bufBytesStart + pos;
                const errField = this.__onField();
                if(errField !== undefined) return errField;
                pos += delimiterLength - 1;
                continue;
              }
            }
          }
          if(this.state.commenting === false){
            if(max_record_size !== 0 && this.state.record_length + this.state.field.length > max_record_size){
              const err = this.__error(
                new CsvError$1('CSV_MAX_RECORD_SIZE', [
                  'Max Record Size:',
                  'record exceed the maximum number of tolerated bytes',
                  `of ${max_record_size}`,
                  `at line ${this.info.lines}`,
                ], this.options, this.__infoField())
              );
              if(err !== undefined) return err;
            }
          }
          const lappend = ltrim === false || this.state.quoting === true || this.state.field.length !== 0 || !this.__isCharTrimable(chr);
          // rtrim in non quoting is handle in __onField
          const rappend = rtrim === false || this.state.wasQuoting === false;
          if(lappend === true && rappend === true){
            this.state.field.append(chr);
          }else if(rtrim === true && !this.__isCharTrimable(chr)){
            const err = this.__error(
              new CsvError$1('CSV_NON_TRIMABLE_CHAR_AFTER_CLOSING_QUOTE', [
                'Invalid Closing Quote:',
                'found non trimable byte after quote',
                `at line ${this.info.lines}`,
              ], this.options, this.__infoField())
            );
            if(err !== undefined) return err;
          }
        }
        if(end === true){
          // Ensure we are not ending in a quoting state
          if(this.state.quoting === true){
            const err = this.__error(
              new CsvError$1('CSV_QUOTE_NOT_CLOSED', [
                'Quote Not Closed:',
                `the parsing is finished with an opening quote at line ${this.info.lines}`,
              ], this.options, this.__infoField())
            );
            if(err !== undefined) return err;
          }else {
            // Skip last line if it has no characters
            if(this.state.wasQuoting === true || this.state.record.length !== 0 || this.state.field.length !== 0){
              this.info.bytes = this.state.bufBytesStart + pos;
              const errField = this.__onField();
              if(errField !== undefined) return errField;
              const errRecord = this.__onRecord();
              if(errRecord !== undefined) return errRecord;
            }else if(this.state.wasRowDelimiter === true){
              this.info.empty_lines++;
            }else if(this.state.commenting === true){
              this.info.comment_lines++;
            }
          }
        }else {
          this.state.bufBytesStart += pos;
          this.state.previousBuf = buf.slice(pos);
        }
        if(this.state.wasRowDelimiter === true){
          this.info.lines++;
          this.state.wasRowDelimiter = false;
        }
      }
      __onRecord(){
        const {columns, group_columns_by_name, encoding, info, from, relax_column_count, relax_column_count_less, relax_column_count_more, raw, skip_records_with_empty_values} = this.options;
        const {enabled, record} = this.state;
        if(enabled === false){
          return this.__resetRecord();
        }
        // Convert the first line into column names
        const recordLength = record.length;
        if(columns === true){
          if(skip_records_with_empty_values === true && isRecordEmpty(record)){
            this.__resetRecord();
            return;
          }
          return this.__firstLineToColumns(record);
        }
        if(columns === false && this.info.records === 0){
          this.state.expectedRecordLength = recordLength;
        }
        if(recordLength !== this.state.expectedRecordLength){
          const err = columns === false ?
            new CsvError$1('CSV_RECORD_INCONSISTENT_FIELDS_LENGTH', [
              'Invalid Record Length:',
              `expect ${this.state.expectedRecordLength},`,
              `got ${recordLength} on line ${this.info.lines}`,
            ], this.options, this.__infoField(), {
              record: record,
            })
            :
            new CsvError$1('CSV_RECORD_INCONSISTENT_COLUMNS', [
              'Invalid Record Length:',
              `columns length is ${columns.length},`, // rename columns
              `got ${recordLength} on line ${this.info.lines}`,
            ], this.options, this.__infoField(), {
              record: record,
            });
          if(relax_column_count === true ||
            (relax_column_count_less === true && recordLength < this.state.expectedRecordLength) ||
            (relax_column_count_more === true && recordLength > this.state.expectedRecordLength)){
            this.info.invalid_field_length++;
            this.state.error = err;
          // Error is undefined with skip_records_with_error
          }else {
            const finalErr = this.__error(err);
            if(finalErr) return finalErr;
          }
        }
        if(skip_records_with_empty_values === true && isRecordEmpty(record)){
          this.__resetRecord();
          return;
        }
        if(this.state.recordHasError === true){
          this.__resetRecord();
          this.state.recordHasError = false;
          return;
        }
        this.info.records++;
        if(from === 1 || this.info.records >= from){
          const {objname} = this.options;
          // With columns, records are object
          if(columns !== false){
            const obj = {};
            // Transform record array to an object
            for(let i = 0, l = record.length; i < l; i++){
              if(columns[i] === undefined || columns[i].disabled) continue;
              // Turn duplicate columns into an array
              if (group_columns_by_name === true && obj[columns[i].name] !== undefined) {
                if (Array.isArray(obj[columns[i].name])) {
                  obj[columns[i].name] = obj[columns[i].name].concat(record[i]);
                } else {
                  obj[columns[i].name] = [obj[columns[i].name], record[i]];
                }
              } else {
                obj[columns[i].name] = record[i];
              }
            }
            // Without objname (default)
            if(raw === true || info === true){
              const extRecord = Object.assign(
                {record: obj},
                (raw === true ? {raw: this.state.rawBuffer.toString(encoding)}: {}),
                (info === true ? {info: this.__infoRecord()}: {})
              );
              const err = this.__push(
                objname === undefined ? extRecord : [obj[objname], extRecord]
              );
              if(err){
                return err;
              }
            }else {
              const err = this.__push(
                objname === undefined ? obj : [obj[objname], obj]
              );
              if(err){
                return err;
              }
            }
          // Without columns, records are array
          }else {
            if(raw === true || info === true){
              const extRecord = Object.assign(
                {record: record},
                raw === true ? {raw: this.state.rawBuffer.toString(encoding)}: {},
                info === true ? {info: this.__infoRecord()}: {}
              );
              const err = this.__push(
                objname === undefined ? extRecord : [record[objname], extRecord]
              );
              if(err){
                return err;
              }
            }else {
              const err = this.__push(
                objname === undefined ? record : [record[objname], record]
              );
              if(err){
                return err;
              }
            }
          }
        }
        this.__resetRecord();
      }
      __firstLineToColumns(record){
        const {firstLineToHeaders} = this.state;
        try{
          const headers = firstLineToHeaders === undefined ? record : firstLineToHeaders.call(null, record);
          if(!Array.isArray(headers)){
            return this.__error(
              new CsvError$1('CSV_INVALID_COLUMN_MAPPING', [
                'Invalid Column Mapping:',
                'expect an array from column function,',
                `got ${JSON.stringify(headers)}`
              ], this.options, this.__infoField(), {
                headers: headers,
              })
            );
          }
          const normalizedHeaders = normalizeColumnsArray(headers);
          this.state.expectedRecordLength = normalizedHeaders.length;
          this.options.columns = normalizedHeaders;
          this.__resetRecord();
          return;
        }catch(err){
          return err;
        }
      }
      __resetRecord(){
        if(this.options.raw === true){
          this.state.rawBuffer.reset();
        }
        this.state.error = undefined;
        this.state.record = [];
        this.state.record_length = 0;
      }
      __onField(){
        const {cast, encoding, rtrim, max_record_size} = this.options;
        const {enabled, wasQuoting} = this.state;
        // Short circuit for the from_line options
        if(enabled === false){
          return this.__resetField();
        }
        let field = this.state.field.toString(encoding);
        if(rtrim === true && wasQuoting === false){
          field = field.trimRight();
        }
        if(cast === true){
          const [err, f] = this.__cast(field);
          if(err !== undefined) return err;
          field = f;
        }
        this.state.record.push(field);
        // Increment record length if record size must not exceed a limit
        if(max_record_size !== 0 && typeof field === 'string'){
          this.state.record_length += field.length;
        }
        this.__resetField();
      }
      __resetField(){
        this.state.field.reset();
        this.state.wasQuoting = false;
      }
      __push(record){
        const {on_record} = this.options;
        if(on_record !== undefined){
          const info = this.__infoRecord();
          try{
            record = on_record.call(null, record, info);
          }catch(err){
            return err;
          }
          if(record === undefined || record === null){ return; }
        }
        this.push(record);
      }
      // Return a tuple with the error and the casted value
      __cast(field){
        const {columns, relax_column_count} = this.options;
        const isColumns = Array.isArray(columns);
        // Dont loose time calling cast
        // because the final record is an object
        // and this field can't be associated to a key present in columns
        if(isColumns === true && relax_column_count && this.options.columns.length <= this.state.record.length){
          return [undefined, undefined];
        }
        if(this.state.castField !== null){
          try{
            const info = this.__infoField();
            return [undefined, this.state.castField.call(null, field, info)];
          }catch(err){
            return [err];
          }
        }
        if(this.__isFloat(field)){
          return [undefined, parseFloat(field)];
        }else if(this.options.cast_date !== false){
          const info = this.__infoField();
          return [undefined, this.options.cast_date.call(null, field, info)];
        }
        return [undefined, field];
      }
      // Helper to test if a character is a space or a line delimiter
      __isCharTrimable(chr){
        return chr === space || chr === tab || chr === cr || chr === nl || chr === np;
      }
      // Keep it in case we implement the `cast_int` option
      // __isInt(value){
      //   // return Number.isInteger(parseInt(value))
      //   // return !isNaN( parseInt( obj ) );
      //   return /^(\-|\+)?[1-9][0-9]*$/.test(value)
      // }
      __isFloat(value){
        return (value - parseFloat(value) + 1) >= 0; // Borrowed from jquery
      }
      __compareBytes(sourceBuf, targetBuf, targetPos, firstByte){
        if(sourceBuf[0] !== firstByte) return 0;
        const sourceLength = sourceBuf.length;
        for(let i = 1; i < sourceLength; i++){
          if(sourceBuf[i] !== targetBuf[targetPos+i]) return 0;
        }
        return sourceLength;
      }
      __needMoreData(i, bufLen, end){
        if(end) return false;
        const {quote} = this.options;
        const {quoting, needMoreDataSize, recordDelimiterMaxLength} = this.state;
        const numOfCharLeft = bufLen - i - 1;
        const requiredLength = Math.max(
          needMoreDataSize,
          // Skip if the remaining buffer smaller than record delimiter
          recordDelimiterMaxLength,
          // Skip if the remaining buffer can be record delimiter following the closing quote
          // 1 is for quote.length
          quoting ? (quote.length + recordDelimiterMaxLength) : 0,
        );
        return numOfCharLeft < requiredLength;
      }
      __isDelimiter(buf, pos, chr){
        const {delimiter, ignore_last_delimiters} = this.options;
        if(ignore_last_delimiters === true && this.state.record.length === this.options.columns.length - 1){
          return 0;
        }else if(ignore_last_delimiters !== false && typeof ignore_last_delimiters === 'number' && this.state.record.length === ignore_last_delimiters - 1){
          return 0;
        }
        loop1: for(let i = 0; i < delimiter.length; i++){
          const del = delimiter[i];
          if(del[0] === chr){
            for(let j = 1; j < del.length; j++){
              if(del[j] !== buf[pos+j]) continue loop1;
            }
            return del.length;
          }
        }
        return 0;
      }
      __isRecordDelimiter(chr, buf, pos){
        const {record_delimiter} = this.options;
        const recordDelimiterLength = record_delimiter.length;
        loop1: for(let i = 0; i < recordDelimiterLength; i++){
          const rd = record_delimiter[i];
          const rdLength = rd.length;
          if(rd[0] !== chr){
            continue;
          }
          for(let j = 1; j < rdLength; j++){
            if(rd[j] !== buf[pos+j]){
              continue loop1;
            }
          }
          return rd.length;
        }
        return 0;
      }
      __isEscape(buf, pos, chr){
        const {escape} = this.options;
        if(escape === null) return false;
        const l = escape.length;
        if(escape[0] === chr){
          for(let i = 0; i < l; i++){
            if(escape[i] !== buf[pos+i]){
              return false;
            }
          }
          return true;
        }
        return false;
      }
      __isQuote(buf, pos){
        const {quote} = this.options;
        if(quote === null) return false;
        const l = quote.length;
        for(let i = 0; i < l; i++){
          if(quote[i] !== buf[pos+i]){
            return false;
          }
        }
        return true;
      }
      __autoDiscoverRecordDelimiter(buf, pos){
        const {encoding} = this.options;
        const chr = buf[pos];
        if(chr === cr){
          if(buf[pos+1] === nl){
            this.options.record_delimiter.push(Buffer$1.from('\r\n', encoding));
            this.state.recordDelimiterMaxLength = 2;
            return 2;
          }else {
            this.options.record_delimiter.push(Buffer$1.from('\r', encoding));
            this.state.recordDelimiterMaxLength = 1;
            return 1;
          }
        }else if(chr === nl){
          this.options.record_delimiter.push(Buffer$1.from('\n', encoding));
          this.state.recordDelimiterMaxLength = 1;
          return 1;
        }
        return 0;
      }
      __error(msg){
        const {encoding, raw, skip_records_with_error} = this.options;
        const err = typeof msg === 'string' ? new Error(msg) : msg;
        if(skip_records_with_error){
          this.state.recordHasError = true;
          this.emit('skip', err, raw ? this.state.rawBuffer.toString(encoding) : undefined);
          return undefined;
        }else {
          return err;
        }
      }
      __infoDataSet(){
        return {
          ...this.info,
          columns: this.options.columns
        };
      }
      __infoRecord(){
        const {columns, raw, encoding} = this.options;
        return {
          ...this.__infoDataSet(),
          error: this.state.error,
          header: columns === true,
          index: this.state.record.length,
          raw: raw ? this.state.rawBuffer.toString(encoding) : undefined
        };
      }
      __infoField(){
        const {columns} = this.options;
        const isColumns = Array.isArray(columns);
        return {
          ...this.__infoRecord(),
          column: isColumns === true ?
            (columns.length > this.state.record.length ?
              columns[this.state.record.length].name :
              null
            ) :
            this.state.record.length,
          quoting: this.state.wasQuoting,
        };
      }
    }

    const parse = function(data, options={}){
      if(typeof data === 'string'){
        data = Buffer$1.from(data);
      }
      const records = options && options.objname ? {} : [];
      const parser = new Parser(options);
      parser.push = function(record){
        if(record === null){
          return;
        }
        if(options.objname === undefined)
          records.push(record);
        else {
          records[record[0]] = record[1];
        }
      };
      const err1 = parser.__parse(data, false);
      if(err1 !== undefined) throw err1;
      const err2 = parser.__parse(undefined, true);
      if(err2 !== undefined) throw err2;
      return records;
    };

    const bom_utf8 = Buffer$1.from([239, 187, 191]);

    class CsvError extends Error {
      constructor(code, message, ...contexts) {
        if(Array.isArray(message)) message = message.join(' ');
        super(message);
        if(Error.captureStackTrace !== undefined){
          Error.captureStackTrace(this, CsvError);
        }
        this.code = code;
        for(const context of contexts){
          for(const key in context){
            const value = context[key];
            this[key] = Buffer$1.isBuffer(value) ? value.toString() : value == null ? value : JSON.parse(JSON.stringify(value));
          }
        }
      }
    }

    const isObject = function(obj){
      return typeof obj === 'object' && obj !== null && ! Array.isArray(obj);
    };

    const underscore = function(str){
      return str.replace(/([A-Z])/g, function(_, match){
        return '_' + match.toLowerCase();
      });
    };

    // Lodash implementation of `get`

    const charCodeOfDot = '.'.charCodeAt(0);
    const reEscapeChar = /\\(\\)?/g;
    const rePropName = RegExp(
      // Match anything that isn't a dot or bracket.
      '[^.[\\]]+' + '|' +
      // Or match property names within brackets.
      '\\[(?:' +
        // Match a non-string expression.
        '([^"\'][^[]*)' + '|' +
        // Or match strings (supports escaping characters).
        '(["\'])((?:(?!\\2)[^\\\\]|\\\\.)*?)\\2' +
      ')\\]'+ '|' +
      // Or match "" as the space between consecutive dots or empty brackets.
      '(?=(?:\\.|\\[\\])(?:\\.|\\[\\]|$))'
      , 'g');
    const reIsDeepProp = /\.|\[(?:[^[\]]*|(["'])(?:(?!\1)[^\\]|\\.)*?\1)\]/;
    const reIsPlainProp = /^\w*$/;
    const getTag = function(value){
      return Object.prototype.toString.call(value);
    };
    const isSymbol = function(value){
      const type = typeof value;
      return type === 'symbol' || (type === 'object' && value && getTag(value) === '[object Symbol]');
    };
    const isKey = function(value, object){
      if(Array.isArray(value)){
        return false;
      }
      const type = typeof value;
      if(type === 'number' || type === 'symbol' || type === 'boolean' || !value || isSymbol(value)){
        return true;
      }
      return reIsPlainProp.test(value) || !reIsDeepProp.test(value) ||
        (object != null && value in Object(object));
    };
    const stringToPath = function(string){
      const result = [];
      if(string.charCodeAt(0) === charCodeOfDot){
        result.push('');
      }
      string.replace(rePropName, function(match, expression, quote, subString){
        let key = match;
        if(quote){
          key = subString.replace(reEscapeChar, '$1');
        }else if(expression){
          key = expression.trim();
        }
        result.push(key);
      });
      return result;
    };
    const castPath = function(value, object){
      if(Array.isArray(value)){
        return value;
      } else {
        return isKey(value, object) ? [value] : stringToPath(value);
      }
    };
    const toKey = function(value){
      if(typeof value === 'string' || isSymbol(value))
        return value;
      const result = `${value}`;
      // eslint-disable-next-line
      return (result == '0' && (1 / value) == -INFINITY) ? '-0' : result;
    };
    const get = function(object, path){
      path = castPath(path, object);
      let index = 0;
      const length = path.length;
      while(object != null && index < length){
        object = object[toKey(path[index++])];
      }
      return (index && index === length) ? object : undefined;
    };

    class Stringifier extends Transform {
      constructor(opts = {}){
        super({...{writableObjectMode: true}, ...opts});
        const options = {};
        let err;
        // Merge with user options
        for(const opt in opts){
          options[underscore(opt)] = opts[opt];
        }
        if((err = this.normalize(options)) !== undefined) throw err;
        switch(options.record_delimiter){
        case 'auto':
          options.record_delimiter = null;
          break;
        case 'unix':
          options.record_delimiter = "\n";
          break;
        case 'mac':
          options.record_delimiter = "\r";
          break;
        case 'windows':
          options.record_delimiter = "\r\n";
          break;
        case 'ascii':
          options.record_delimiter = "\u001e";
          break;
        case 'unicode':
          options.record_delimiter = "\u2028";
          break;
        }
        // Expose options
        this.options = options;
        // Internal state
        this.state = {
          stop: false
        };
        // Information
        this.info = {
          records: 0
        };
      }
      normalize(options){
        // Normalize option `bom`
        if(options.bom === undefined || options.bom === null || options.bom === false){
          options.bom = false;
        }else if(options.bom !== true){
          return new CsvError('CSV_OPTION_BOOLEAN_INVALID_TYPE', [
            'option `bom` is optional and must be a boolean value,',
            `got ${JSON.stringify(options.bom)}`
          ]);
        }
        // Normalize option `delimiter`
        if(options.delimiter === undefined || options.delimiter === null){
          options.delimiter = ',';
        }else if(Buffer$1.isBuffer(options.delimiter)){
          options.delimiter = options.delimiter.toString();
        }else if(typeof options.delimiter !== 'string'){
          return new CsvError('CSV_OPTION_DELIMITER_INVALID_TYPE', [
            'option `delimiter` must be a buffer or a string,',
            `got ${JSON.stringify(options.delimiter)}`
          ]);
        }
        // Normalize option `quote`
        if(options.quote === undefined || options.quote === null){
          options.quote = '"';
        }else if(options.quote === true){
          options.quote = '"';
        }else if(options.quote === false){
          options.quote = '';
        }else if (Buffer$1.isBuffer(options.quote)){
          options.quote = options.quote.toString();
        }else if(typeof options.quote !== 'string'){
          return new CsvError('CSV_OPTION_QUOTE_INVALID_TYPE', [
            'option `quote` must be a boolean, a buffer or a string,',
            `got ${JSON.stringify(options.quote)}`
          ]);
        }
        // Normalize option `quoted`
        if(options.quoted === undefined || options.quoted === null){
          options.quoted = false;
        }
        // Normalize option `quoted_empty`
        if(options.quoted_empty === undefined || options.quoted_empty === null){
          options.quoted_empty = undefined;
        }
        // Normalize option `quoted_match`
        if(options.quoted_match === undefined || options.quoted_match === null || options.quoted_match === false){
          options.quoted_match = null;
        }else if(!Array.isArray(options.quoted_match)){
          options.quoted_match = [options.quoted_match];
        }
        if(options.quoted_match){
          for(const quoted_match of options.quoted_match){
            const isString = typeof quoted_match === 'string';
            const isRegExp = quoted_match instanceof RegExp;
            if(!isString && !isRegExp){
              return Error(`Invalid Option: quoted_match must be a string or a regex, got ${JSON.stringify(quoted_match)}`);
            }
          }
        }
        // Normalize option `quoted_string`
        if(options.quoted_string === undefined || options.quoted_string === null){
          options.quoted_string = false;
        }
        // Normalize option `eof`
        if(options.eof === undefined || options.eof === null){
          options.eof = true;
        }
        // Normalize option `escape`
        if(options.escape === undefined || options.escape === null){
          options.escape = '"';
        }else if(Buffer$1.isBuffer(options.escape)){
          options.escape = options.escape.toString();
        }else if(typeof options.escape !== 'string'){
          return Error(`Invalid Option: escape must be a buffer or a string, got ${JSON.stringify(options.escape)}`);
        }
        if (options.escape.length > 1){
          return Error(`Invalid Option: escape must be one character, got ${options.escape.length} characters`);
        }
        // Normalize option `header`
        if(options.header === undefined || options.header === null){
          options.header = false;
        }
        // Normalize option `columns`
        const [err, columns] = this.normalize_columns(options.columns);
        if(err) return err;
        options.columns = columns;
        // Normalize option `quoted`
        if(options.quoted === undefined || options.quoted === null){
          options.quoted = false;
        }
        // Normalize option `cast`
        if(options.cast === undefined || options.cast === null){
          options.cast = {};
        }
        // Normalize option cast.bigint
        if(options.cast.bigint === undefined || options.cast.bigint === null){
          // Cast boolean to string by default
          options.cast.bigint = value => '' + value;
        }
        // Normalize option cast.boolean
        if(options.cast.boolean === undefined || options.cast.boolean === null){
          // Cast boolean to string by default
          options.cast.boolean = value => value ? '1' : '';
        }
        // Normalize option cast.date
        if(options.cast.date === undefined || options.cast.date === null){
          // Cast date to timestamp string by default
          options.cast.date = value => '' + value.getTime();
        }
        // Normalize option cast.number
        if(options.cast.number === undefined || options.cast.number === null){
          // Cast number to string using native casting by default
          options.cast.number = value => '' + value;
        }
        // Normalize option cast.object
        if(options.cast.object === undefined || options.cast.object === null){
          // Stringify object as JSON by default
          options.cast.object = value => JSON.stringify(value);
        }
        // Normalize option cast.string
        if(options.cast.string === undefined || options.cast.string === null){
          // Leave string untouched
          options.cast.string = function(value){return value;};
        }
        // Normalize option `record_delimiter`
        if(options.record_delimiter === undefined || options.record_delimiter === null){
          options.record_delimiter = '\n';
        }else if(Buffer$1.isBuffer(options.record_delimiter)){
          options.record_delimiter = options.record_delimiter.toString();
        }else if(typeof options.record_delimiter !== 'string'){
          return Error(`Invalid Option: record_delimiter must be a buffer or a string, got ${JSON.stringify(options.record_delimiter)}`);
        }
      }
      _transform(chunk, encoding, callback){
        if(this.state.stop === true){
          return;
        }
        const err = this.__transform(chunk);
        if(err !== undefined){
          this.state.stop = true;
        }
        callback(err);
      }
      _flush(callback){
        if(this.state.stop === true){
          // Note, Node.js 12 call flush even after an error, we must prevent
          // `callback` from being called in flush without any error.
          return;
        }
        if(this.info.records === 0){
          this.bom();
          const err = this.headers();
          if(err) callback(err);
        }
        callback();
      }
      __transform(chunk){
        // Chunk validation
        if(!Array.isArray(chunk) && typeof chunk !== 'object'){
          return Error(`Invalid Record: expect an array or an object, got ${JSON.stringify(chunk)}`);
        }
        // Detect columns from the first record
        if(this.info.records === 0){
          if(Array.isArray(chunk)){
            if(this.options.header === true && this.options.columns === undefined){
              return Error('Undiscoverable Columns: header option requires column option or object records');
            }
          }else if(this.options.columns === undefined){
            const [err, columns] = this.normalize_columns(Object.keys(chunk));
            if(err) return;
            this.options.columns = columns;
          }
        }
        // Emit the header
        if(this.info.records === 0){
          this.bom();
          const err = this.headers();
          if(err) return err;
        }
        // Emit and stringify the record if an object or an array
        try{
          this.emit('record', chunk, this.info.records);
        }catch(err){
          return err;
        }
        // Convert the record into a string
        let err, chunk_string;
        if(this.options.eof){
          [err, chunk_string] = this.stringify(chunk);
          if(err) return err;
          if(chunk_string === undefined){
            return;
          }else {
            chunk_string = chunk_string + this.options.record_delimiter;
          }
        }else {
          [err, chunk_string] = this.stringify(chunk);
          if(err) return err;
          if(chunk_string === undefined){
            return;
          }else {
            if(this.options.header || this.info.records){
              chunk_string = this.options.record_delimiter + chunk_string;
            }
          }
        }
        // Emit the csv
        this.info.records++;
        this.push(chunk_string);
      }
      stringify(chunk, chunkIsHeader=false){
        if(typeof chunk !== 'object'){
          return [undefined, chunk];
        }
        const {columns} = this.options;
        const record = [];
        // Record is an array
        if(Array.isArray(chunk)){
          // We are getting an array but the user has specified output columns. In
          // this case, we respect the columns indexes
          if(columns){
            chunk.splice(columns.length);
          }
          // Cast record elements
          for(let i=0; i<chunk.length; i++){
            const field = chunk[i];
            const [err, value] = this.__cast(field, {
              index: i, column: i, records: this.info.records, header: chunkIsHeader
            });
            if(err) return [err];
            record[i] = [value, field];
          }
        // Record is a literal object
        // `columns` is always defined: it is either provided or discovered.
        }else {
          for(let i=0; i<columns.length; i++){
            const field = get(chunk, columns[i].key);
            const [err, value] = this.__cast(field, {
              index: i, column: columns[i].key, records: this.info.records, header: chunkIsHeader
            });
            if(err) return [err];
            record[i] = [value, field];
          }
        }
        let csvrecord = '';
        for(let i=0; i<record.length; i++){
          let options, err;
          // eslint-disable-next-line
          let [value, field] = record[i];
          if(typeof value === "string"){
            options = this.options;
          }else if(isObject(value)){
            options = value;
            value = options.value;
            delete options.value;
            if(typeof value !== "string" && value !== undefined && value !== null){
              if(err) return [Error(`Invalid Casting Value: returned value must return a string, null or undefined, got ${JSON.stringify(value)}`)];
            }
            options = {...this.options, ...options};
            if((err = this.normalize(options)) !== undefined){
              return [err];
            }
          }else if(value === undefined || value === null){
            options = this.options;
          }else {
            return [Error(`Invalid Casting Value: returned value must return a string, an object, null or undefined, got ${JSON.stringify(value)}`)];
          }
          const {delimiter, escape, quote, quoted, quoted_empty, quoted_string, quoted_match, record_delimiter} = options;
          if(value){
            if(typeof value !== 'string'){
              return [Error(`Formatter must return a string, null or undefined, got ${JSON.stringify(value)}`)];
            }
            const containsdelimiter = delimiter.length && value.indexOf(delimiter) >= 0;
            const containsQuote = (quote !== '') && value.indexOf(quote) >= 0;
            const containsEscape = value.indexOf(escape) >= 0 && (escape !== quote);
            const containsRecordDelimiter = value.indexOf(record_delimiter) >= 0;
            const quotedString = quoted_string && typeof field === 'string';
            let quotedMatch = quoted_match && quoted_match.filter(quoted_match => {
              if(typeof quoted_match === 'string'){
                return value.indexOf(quoted_match) !== -1;
              }else {
                return quoted_match.test(value);
              }
            });
            quotedMatch = quotedMatch && quotedMatch.length > 0;
            const shouldQuote = containsQuote === true || containsdelimiter || containsRecordDelimiter || quoted || quotedString || quotedMatch;
            if(shouldQuote === true && containsEscape === true){
              const regexp = escape === '\\'
                ? new RegExp(escape + escape, 'g')
                : new RegExp(escape, 'g');
              value = value.replace(regexp, escape + escape);
            }
            if(containsQuote === true){
              const regexp = new RegExp(quote,'g');
              value = value.replace(regexp, escape + quote);
            }
            if(shouldQuote === true){
              value = quote + value + quote;
            }
            csvrecord += value;
          }else if(quoted_empty === true || (field === '' && quoted_string === true && quoted_empty !== false)){
            csvrecord += quote + quote;
          }
          if(i !== record.length - 1){
            csvrecord += delimiter;
          }
        }
        return [undefined, csvrecord];
      }
      bom(){
        if(this.options.bom !== true){
          return;
        }
        this.push(bom_utf8);
      }
      headers(){
        if(this.options.header === false){
          return;
        }
        if(this.options.columns === undefined){
          return;
        }
        let err;
        let headers = this.options.columns.map(column => column.header);
        if(this.options.eof){
          [err, headers] = this.stringify(headers, true);
          headers += this.options.record_delimiter;
        }else {
          [err, headers] = this.stringify(headers);
        }
        if(err) return err;
        this.push(headers);
      }
      __cast(value, context){
        const type = typeof value;
        try{
          if(type === 'string'){ // Fine for 99% of the cases
            return [undefined, this.options.cast.string(value, context)];
          }else if(type === 'bigint'){
            return [undefined, this.options.cast.bigint(value, context)];
          }else if(type === 'number'){
            return [undefined, this.options.cast.number(value, context)];
          }else if(type === 'boolean'){
            return [undefined, this.options.cast.boolean(value, context)];
          }else if(value instanceof Date){
            return [undefined, this.options.cast.date(value, context)];
          }else if(type === 'object' && value !== null){
            return [undefined, this.options.cast.object(value, context)];
          }else {
            return [undefined, value, value];
          }
        }catch(err){
          return [err];
        }
      }
      normalize_columns(columns){
        if(columns === undefined || columns === null){
          return [];
        }
        if(typeof columns !== 'object'){
          return [Error('Invalid option "columns": expect an array or an object')];
        }
        if(!Array.isArray(columns)){
          const newcolumns = [];
          for(const k in columns){
            newcolumns.push({
              key: k,
              header: columns[k]
            });
          }
          columns = newcolumns;
        }else {
          const newcolumns = [];
          for(const column of columns){
            if(typeof column === 'string'){
              newcolumns.push({
                key: column,
                header: column
              });
            }else if(typeof column === 'object' && column !== undefined && !Array.isArray(column)){
              if(!column.key){
                return [Error('Invalid column definition: property "key" is required')];
              }
              if(column.header === undefined){
                column.header = column.key;
              }
              newcolumns.push(column);
            }else {
              return [Error('Invalid column definition: expect a string or an object')];
            }
          }
          columns = newcolumns;
        }
        return [undefined, columns];
      }
    }

    const stringify = function(records, options={}){
      const data = [];
      const stringifier = new Stringifier(options);
      stringifier.push = function(record){
        if(record === null){
          return;
        }
        data.push(record.toString());
      };
      for(const record of records){
        const err = stringifier.__transform(record, null);
        if(err !== undefined) throw err;
      }
      return data.join('');
    };

    const Transformer = function(options = {}, handler){
      this.options = options;
      if(options.consume === undefined || options.consume === null){
        this.options.consume = false;
      }
      this.options.objectMode = true;
      if(options.parallel === undefined || options.parallel === null){
        this.options.parallel = 100;
      }
      if(options.params === undefined || options.params === null){
        options.params = null;
      }
      this.handler = handler;
      Stream.Transform.call(this, this.options);
      this.state = {
        running: 0,
        started: 0,
        finished: 0
      };
      return this;
    };

    util.inherits(Transformer, Stream.Transform);

    Transformer.prototype._transform = function(chunk, encoding, cb){
      this.state.started++;
      this.state.running++;
      if(this.state.running < this.options.parallel){
        cb();
        cb = null; // Cancel further callback execution
      }
      try {
        let l = this.handler.length;
        if(this.options.params !== null){  
          l--;
        }
        if(l === 1){ // sync
          this.__done(null, [this.handler.call(this, chunk, this.options.params)], cb);
        }else if(l === 2){ // async
          const callback = (err, ...chunks) =>
            this.__done(err, chunks, cb);
          this.handler.call(this, chunk, callback, this.options.params);
        }else {
          throw Error('Invalid handler arguments');
        }
        return false;
      }
      catch (err) {
        this.__done(err);
      }
    };
    Transformer.prototype._flush = function(cb){
      if(this.state.running === 0){
        cb();
      }else {
        this._ending = function(){
          cb();
        };
      }
    };
    Transformer.prototype.__done = function(err, chunks, cb){
      this.state.running--;
      if(err){
        return this.emit('error', err);
      }
      this.state.finished++;
      for(let chunk of chunks){
        if (typeof chunk === 'number'){
          chunk = `${chunk}`;
        }
        // We dont push empty string
        // See https://nodejs.org/api/stream.html#stream_readable_push
        if(chunk !== undefined && chunk !== null && chunk !== ''){
          this.push(chunk);
        }
      }
      if(cb){
        cb();
      }
      if(this._ending && this.state.running === 0){
        this._ending();
      }
    };

    /**
     * Prompts the user to specify data dimensions.
     */
    function runDimensionsModal(data, dimensions, nanDimensions) {
        return new Promise((resolve, reject) => {
            const modalContainer = document.createElement('div');
            Object.assign(modalContainer.style, {
                position: 'fixed',
                display: 'flex',
                alignItems: 'center',
                justifyContent: 'center',
                inset: '0',
                background: 'rgba(0, 0, 0, 0.1)',
                opacity: '0',
                transition: 'opacity 0.3s',
                zIndex: '1000'
            });
            document.body.appendChild(modalContainer);
            const modal = document.createElement('div');
            Object.assign(modal.style, {
                position: 'relative',
                background: 'white',
                color: 'black',
                border: '1px solid rgba(0, 0, 0, 0.1)',
                borderRadius: '8px',
                boxShadow: '0 8px 32px rgba(0, 0, 0, 0.4)',
                font: '13px sans-serif',
                overflow: 'auto',
                maxHeight: '95vh'
            });
            modalContainer.className = 'd3st-data-import-modal-container';
            modalContainer.appendChild(modal);
            {
                const title = document.createElement('h2');
                title.style.marginTop = '0';
                title.style.marginBottom = '8px';
                title.style.padding = '8px 16px 0 16px';
                title.textContent = 'Import Data';
                modal.appendChild(title);
                const subtitle = document.createElement('h4');
                subtitle.style.marginTop = '0';
                subtitle.style.padding = '0 16px';
                subtitle.textContent = 'Specify how to import each data dimension.';
                subtitle.style.fontWeight = 'inherit';
                modal.appendChild(subtitle);
            }
            const dimSettings = [];
            {
                const dimContainer = document.createElement('ul');
                Object.assign(dimContainer.style, {
                    padding: '0',
                    margin: '0',
                    listStyle: 'none'
                });
                modal.appendChild(dimContainer);
                for (const dimName of dimensions) {
                    const isNan = nanDimensions.has(dimName);
                    const li = document.createElement('li');
                    Object.assign(li.style, {
                        padding: '4px 16px',
                        borderBottom: '1px solid rgba(0, 0, 0, 0.1)'
                    });
                    dimContainer.appendChild(li);
                    const details = document.createElement('div');
                    Object.assign(details.style, {
                        marginBottom: '4px'
                    });
                    li.appendChild(details);
                    const name = document.createElement('div');
                    name.style.fontWeight = '600';
                    details.appendChild(name);
                    name.textContent = dimName;
                    if (isNan) {
                        const isNanText = document.createElement('div');
                        isNanText.style.fontSize = 'smaller';
                        isNanText.style.marginTop = '2px';
                        details.appendChild(isNanText);
                        isNanText.textContent = '(not a number)';
                    }
                    const controls = document.createElement('div');
                    li.appendChild(controls);
                    const method = document.createElement('select');
                    controls.appendChild(method);
                    {
                        const ignore = document.createElement('option');
                        ignore.value = 'ignore';
                        ignore.textContent = 'Ignore';
                        method.appendChild(ignore);
                    }
                    let domainLo;
                    let domainHi;
                    let logChkbox;
                    if (!isNan) {
                        const read = document.createElement('option');
                        read.value = 'read';
                        read.textContent = 'Read';
                        read.selected = true;
                        method.appendChild(read);
                        const domain = document.createElement('div');
                        controls.appendChild(domain);
                        const label = document.createElement('span');
                        label.textContent = 'Domain: ';
                        domain.appendChild(label);
                        domainLo = document.createElement('input');
                        domain.appendChild(domainLo);
                        domainLo.type = 'number';
                        domainHi = document.createElement('input');
                        domain.appendChild(domainHi);
                        domainHi.type = 'number';
                        const inputStyle = {
                            width: '7em'
                        };
                        Object.assign(domainLo.style, inputStyle);
                        Object.assign(domainHi.style, inputStyle);
                        const defaultDomain = Dimension.fromData(dimName, data, 0.0).domain;
                        domainLo.value = defaultDomain[0].toString();
                        domainHi.value = defaultDomain[1].toString();
                        method.addEventListener('change', () => {
                            domain.style.display = method.value === 'read' ? '' : 'none';
                        });
                        const log = document.createElement('div');
                        logChkbox = document.createElement('input');
                        const logLabel = document.createElement('label');
                        logLabel.textContent = 'Log';
                        logChkbox.type = 'checkbox';
                        logLabel.htmlFor = logChkbox.id = Math.random().toString();
                        log.appendChild(logChkbox);
                        log.appendChild(document.createTextNode(' '));
                        log.appendChild(logLabel);
                        controls.appendChild(log);
                    }
                    dimSettings.push({
                        name: dimName,
                        method,
                        domainLo,
                        domainHi,
                        logChkbox,
                    });
                }
            }
            const close = () => {
                modalContainer.style.opacity = '0';
                modalContainer.style.pointerEvents = 'none';
                modalContainer.addEventListener('transitionend', () => {
                    var _a;
                    (_a = modalContainer.parentNode) === null || _a === void 0 ? void 0 : _a.removeChild(modalContainer);
                });
            };
            const confirm = () => {
                close();
                const dimensions = [];
                for (const dim of dimSettings) {
                    if (dim.method.value === 'read') {
                        const domainLo = +dim.domainLo.value;
                        const domainHi = +dim.domainHi.value;
                        const log = dim.logChkbox.checked;
                        const mapping = log ? Dimension.Log : Dimension.Linear;
                        dimensions.push(new Dimension(dim.name, [domainLo, domainHi], mapping));
                    }
                }
                resolve(dimensions);
            };
            {
                const buttons = document.createElement('div');
                buttons.style.padding = '8px 16px';
                buttons.style.textAlign = 'right';
                const cancelButton = document.createElement('button');
                cancelButton.textContent = 'Cancel';
                buttons.appendChild(cancelButton);
                const confirmButton = document.createElement('button');
                confirmButton.textContent = 'Import';
                buttons.appendChild(confirmButton);
                cancelButton.addEventListener('click', () => {
                    close();
                    reject();
                });
                confirmButton.addEventListener('click', confirm);
                modal.appendChild(buttons);
            }
            requestAnimationFrame(() => {
                modalContainer.style.opacity = '1';
            });
        });
    }
    class FileIo extends EventEmitter {
        constructor() {
            super();
            this._node = document.createElement('div');
            const importButton = document.createElement('button');
            importButton.textContent = 'Import Data';
            this._node.appendChild(importButton);
            const loadPathButton = document.createElement('button');
            loadPathButton.textContent = 'Load Path';
            this._node.appendChild(loadPathButton);
            const storePathButton = document.createElement('button');
            storePathButton.textContent = 'Store Path';
            this._node.appendChild(storePathButton);
            const setUpImportButton = (button, onFile) => {
                button.addEventListener('dragover', event => {
                    event.preventDefault();
                    button.style.outline = '1px solid #00f';
                });
                button.addEventListener('dragleave', event => {
                    button.style.outline = '';
                });
                button.addEventListener('drop', event => {
                    var _a;
                    button.style.outline = '';
                    event.preventDefault();
                    const file = (_a = event.dataTransfer) === null || _a === void 0 ? void 0 : _a.files[0];
                    if (!file) {
                        alert('Not a file');
                        return;
                    }
                    onFile(file);
                });
                button.addEventListener('click', () => {
                    const filePicker = document.createElement('input');
                    filePicker.type = 'file';
                    filePicker.accept = 'text/csv';
                    filePicker.addEventListener('change', () => {
                        const file = filePicker.files && filePicker.files[0];
                        if (!file)
                            return;
                        onFile(file);
                    });
                    filePicker.click();
                });
            };
            setUpImportButton(importButton, file => this.loadData(file));
            setUpImportButton(loadPathButton, file => this.loadPath(file));
            storePathButton.addEventListener('click', () => this.storePath());
        }
        node() {
            return this._node;
        }
        connect(target) {
            this._matrix = target;
            return this;
        }
        disconnect() {
            this._matrix = undefined;
            return this;
        }
        loadData(file) {
            const fileReader = new FileReader();
            fileReader.onload = () => {
                const input = parse(fileReader.result, { columns: true, skip_empty_lines: true });
                const dimensions = new Set(input.flatMap((entry) => Object.keys(entry)));
                const nanDimensions = new Set();
                const data = [];
                for (const entry of input) {
                    const item = {};
                    for (const dimension of dimensions) {
                        const num = +(entry[dimension].trim());
                        if (Number.isFinite(num)) {
                            item[dimension] = num;
                        }
                        else {
                            item[dimension] = entry[dimension];
                            if (entry[dimension].trim())
                                nanDimensions.add(dimension);
                        }
                    }
                    data.push(item);
                }
                runDimensionsModal(data, dimensions, nanDimensions).then(dimensions => {
                    this.emit('loadData', data, dimensions);
                    if (this._matrix) {
                        this._matrix.dimensions(dimensions).data(data);
                    }
                }).catch(() => { });
            };
            fileReader.readAsText(file);
        }
        loadPath(file) {
            const matrix = this._matrix;
            if (!matrix) {
                alert('File IO is not connected to anything');
                return;
            }
            const fileReader = new FileReader();
            fileReader.onload = () => {
                const input = parse(fileReader.result, { skip_empty_lines: true });
                const dims = matrix.dimensions();
                const dimNames = dims.map(dim => dim.name);
                const path = [];
                for (const pair of input) {
                    const x = dimNames.indexOf(pair[0]);
                    const y = dimNames.indexOf(pair[1]);
                    if (x === -1 || y === -1) {
                        alert('Unknown dimensions in pair: ' + pair[0] + ', ' + pair[1] + '.\nTry loading the data first.');
                        return;
                    }
                    path.push(new ScatterView(dims[x], dims[y]));
                }
                matrix.transBuilder().begin();
                matrix.transBuilder().path.views.push(...path);
                matrix.transBuilder().path.renderPaths();
            };
            fileReader.readAsText(file);
        }
        storePath() {
            const matrix = this._matrix;
            if (!matrix) {
                alert('File IO is not connected to anything');
                return;
            }
            const plot = matrix.plot();
            let views = null;
            if (matrix.transBuilder().buildingTransition) {
                views = matrix.transBuilder().path.views;
            }
            else if (plot) {
                const transition = plot.transition();
                if (transition) {
                    views = transition.views;
                }
            }
            if (views) {
                const path = [];
                for (const view of views) {
                    path.push([view.x.name, view.y.name]);
                }
                const blob = new Blob([stringify(path)]);
                const blobUrl = URL.createObjectURL(blob);
                const downloadLink = document.createElement('a');
                downloadLink.href = blobUrl;
                downloadLink.download = 'path.csv';
                downloadLink.click();
                URL.revokeObjectURL(blobUrl);
            }
            else {
                alert('No path loaded');
            }
        }
    }
    function fileio() {
        return new FileIo();
    }

    var sControls = /*#__PURE__*/Object.freeze({
        __proto__: null,
        ScatterplotMatrix: ScatterplotMatrix,
        scatterplotMatrix: scatterplotMatrix,
        Scatterplot: Scatterplot,
        scatterplot: scatterplot,
        TimelineSlider: TimelineSlider,
        timelineSlider: timelineSlider,
        FileIo: FileIo,
        fileio: fileio
    });

    const scatterTrans = {
        ...sTransitions,
        ...sData,
        ...sView,
        ...sControls
    };

    exports.scatterTrans = scatterTrans;

    Object.defineProperty(exports, '__esModule', { value: true });

}));
